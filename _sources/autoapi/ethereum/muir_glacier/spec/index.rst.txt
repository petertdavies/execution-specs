:mod:`ethereum.muir_glacier.spec`
=================================

.. py:module:: ethereum.muir_glacier.spec

Ethereum Specification
^^^^^^^^^^^^^^^^^^^^^^

.. contents:: Table of Contents
    :backlinks: none
    :local:

Introduction
------------

Entry point for the Ethereum specification.


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   ethereum.muir_glacier.spec.BlockChain



Functions
~~~~~~~~~

.. autoapisummary::
   :nosignatures:

   ethereum.muir_glacier.spec.apply_fork
   ethereum.muir_glacier.spec.get_last_256_block_hashes
   ethereum.muir_glacier.spec.state_transition
   ethereum.muir_glacier.spec.validate_header
   ethereum.muir_glacier.spec.generate_header_hash_for_pow
   ethereum.muir_glacier.spec.validate_proof_of_work
   ethereum.muir_glacier.spec.apply_body
   ethereum.muir_glacier.spec.validate_ommers
   ethereum.muir_glacier.spec.pay_rewards
   ethereum.muir_glacier.spec.process_transaction
   ethereum.muir_glacier.spec.validate_transaction
   ethereum.muir_glacier.spec.calculate_intrinsic_cost
   ethereum.muir_glacier.spec.recover_sender
   ethereum.muir_glacier.spec.signing_hash_pre155
   ethereum.muir_glacier.spec.signing_hash_155
   ethereum.muir_glacier.spec.compute_header_hash
   ethereum.muir_glacier.spec.check_gas_limit
   ethereum.muir_glacier.spec.calculate_block_difficulty



Attributes
~~~~~~~~~~

.. autoapisummary::

   ethereum.muir_glacier.spec.BLOCK_REWARD
   ethereum.muir_glacier.spec.GAS_LIMIT_ADJUSTMENT_FACTOR
   ethereum.muir_glacier.spec.GAS_LIMIT_MINIMUM
   ethereum.muir_glacier.spec.GENESIS_DIFFICULTY
   ethereum.muir_glacier.spec.MAX_OMMER_DEPTH
   ethereum.muir_glacier.spec.BOMB_DELAY_BLOCKS
   ethereum.muir_glacier.spec.EMPTY_OMMER_HASH


Module Details
---------------

BLOCK_REWARD
~~~~~~~~~~~~



.. py:data:: BLOCK_REWARD

   

.. undocinclude:: /../src/ethereum/muir_glacier/spec.py
   :language: python
   :lines: 59-59


GAS_LIMIT_ADJUSTMENT_FACTOR
~~~~~~~~~~~~~~~~~~~~~~~~~~~



.. py:data:: GAS_LIMIT_ADJUSTMENT_FACTOR

   

.. undocinclude:: /../src/ethereum/muir_glacier/spec.py
   :language: python
   :lines: 60-60


GAS_LIMIT_MINIMUM
~~~~~~~~~~~~~~~~~



.. py:data:: GAS_LIMIT_MINIMUM

   

.. undocinclude:: /../src/ethereum/muir_glacier/spec.py
   :language: python
   :lines: 61-61


GENESIS_DIFFICULTY
~~~~~~~~~~~~~~~~~~



.. py:data:: GENESIS_DIFFICULTY

   

.. undocinclude:: /../src/ethereum/muir_glacier/spec.py
   :language: python
   :lines: 62-62


MAX_OMMER_DEPTH
~~~~~~~~~~~~~~~



.. py:data:: MAX_OMMER_DEPTH

   

.. undocinclude:: /../src/ethereum/muir_glacier/spec.py
   :language: python
   :lines: 63-63


BOMB_DELAY_BLOCKS
~~~~~~~~~~~~~~~~~



.. py:data:: BOMB_DELAY_BLOCKS

   

.. undocinclude:: /../src/ethereum/muir_glacier/spec.py
   :language: python
   :lines: 64-64


EMPTY_OMMER_HASH
~~~~~~~~~~~~~~~~



.. py:data:: EMPTY_OMMER_HASH

   

.. undocinclude:: /../src/ethereum/muir_glacier/spec.py
   :language: python
   :lines: 65-65


BlockChain
~~~~~~~~~~


History and current state of the block chain.


.. class:: BlockChain

   

   .. py:attribute:: blocks
      :annotation: :List[ethereum.muir_glacier.eth_types.Block]

      

   

   .. py:attribute:: state
      :annotation: :ethereum.muir_glacier.state.State

      

   

   .. py:attribute:: chain_id
      :annotation: :ethereum.base_types.Uint64

      



apply_fork
~~~~~~~~~~


.. function:: apply_fork(old: BlockChain) -> BlockChain
   :noindexentry:

   Transforms the state from the previous hard fork (`old`) into the block
   chain object for this hard fork and returns it.

   :param old: Previous block chain object.

   :returns: **new** -- Upgraded block chain object for this hard fork.
   :rtype: `BlockChain`




.. undocinclude:: /../src/ethereum/muir_glacier/spec.py
   :language: python
   :pyobject: apply_fork

get_last_256_block_hashes
~~~~~~~~~~~~~~~~~~~~~~~~~


.. function:: get_last_256_block_hashes(chain: BlockChain) -> List[ethereum.muir_glacier.eth_types.Hash32]
   :noindexentry:

   Obtain the list of hashes of the previous 256 blocks in order of increasing
   block number.

   This function will return less hashes for the first 256 blocks.

   :param chain: History and current state.

   :returns: **recent_block_hashes** -- Hashes of the recent 256 blocks in order of increasing block number.
   :rtype: `List[Hash32]`




.. undocinclude:: /../src/ethereum/muir_glacier/spec.py
   :language: python
   :pyobject: get_last_256_block_hashes

state_transition
~~~~~~~~~~~~~~~~


.. function:: state_transition(chain: BlockChain, block: ethereum.muir_glacier.eth_types.Block) -> None
   :noindexentry:

   Attempts to apply a block to an existing block chain.

   :param chain: History and current state.
   :param block: Block to apply to `chain`.




.. undocinclude:: /../src/ethereum/muir_glacier/spec.py
   :language: python
   :pyobject: state_transition

validate_header
~~~~~~~~~~~~~~~


.. function:: validate_header(header: ethereum.muir_glacier.eth_types.Header, parent_header: ethereum.muir_glacier.eth_types.Header) -> None
   :noindexentry:

   Verifies a block header.

   :param header: Header to check for correctness.
   :param parent_header: Parent Header of the header to check for correctness




.. undocinclude:: /../src/ethereum/muir_glacier/spec.py
   :language: python
   :pyobject: validate_header

generate_header_hash_for_pow
~~~~~~~~~~~~~~~~~~~~~~~~~~~~


.. function:: generate_header_hash_for_pow(header: ethereum.muir_glacier.eth_types.Header) -> ethereum.muir_glacier.eth_types.Hash32
   :noindexentry:

   Generate rlp hash of the header which is to be used for Proof-of-Work
   verification. This hash is generated with the following header fields:

     * `parent_hash`
     * `ommers_hash`
     * `coinbase`
     * `state_root`
     * `transactions_root`
     * `receipt_root`
     * `bloom`
     * `difficulty`
     * `number`
     * `gas_limit`
     * `gas_used`
     * `timestamp`
     * `extra_data`

   In other words, the PoW artefacts `mix_digest` and `nonce` are ignored
   while calculating this hash.

   :param header: The header object for which the hash is to be generated.

   :returns: **hash** -- The PoW valid rlp hash of the passed in header.
   :rtype: `Hash32`




.. undocinclude:: /../src/ethereum/muir_glacier/spec.py
   :language: python
   :pyobject: generate_header_hash_for_pow

validate_proof_of_work
~~~~~~~~~~~~~~~~~~~~~~


.. function:: validate_proof_of_work(header: ethereum.muir_glacier.eth_types.Header) -> None
   :noindexentry:

   Validates the Proof of Work constraints.

   :param header: Header of interest.




.. undocinclude:: /../src/ethereum/muir_glacier/spec.py
   :language: python
   :pyobject: validate_proof_of_work

apply_body
~~~~~~~~~~


.. function:: apply_body(state: ethereum.muir_glacier.state.State, block_hashes: List[ethereum.muir_glacier.eth_types.Hash32], coinbase: ethereum.muir_glacier.eth_types.Address, block_number: ethereum.base_types.Uint, block_gas_limit: ethereum.base_types.Uint, block_time: ethereum.base_types.U256, block_difficulty: ethereum.base_types.Uint, transactions: Tuple[ethereum.muir_glacier.eth_types.Transaction, Ellipsis], ommers: Tuple[ethereum.muir_glacier.eth_types.Header, Ellipsis], chain_id: ethereum.base_types.Uint64) -> Tuple[ethereum.base_types.Uint, ethereum.muir_glacier.eth_types.Root, ethereum.muir_glacier.eth_types.Root, ethereum.muir_glacier.eth_types.Bloom, ethereum.muir_glacier.state.State]
   :noindexentry:

   Executes a block.

   :param state: Current account state.
   :param block_hashes: List of hashes of the previous 256 blocks in the order of
                        increasing block number.
   :param coinbase: Address of account which receives block reward and transaction fees.
   :param block_number: Position of the block within the chain.
   :param block_gas_limit: Initial amount of gas available for execution in this block.
   :param block_time: Time the block was produced, measured in seconds since the epoch.
   :param block_difficulty: Difficulty of the block.
   :param transactions: Transactions included in the block.
   :param ommers: Headers of ancestor blocks which are not direct parents (formerly
                  uncles.)
   :param chain_id: ID of the executing chain.

   :returns: * **gas_available** (`eth1spec.base_types.Uint`) -- Remaining gas after all transactions have been executed.
             * **transactions_root** (`eth1spec.eth_types.Root`) -- Trie root of all the transactions in the block.
             * **receipt_root** (`eth1spec.eth_types.Root`) -- Trie root of all the receipts in the block.
             * **block_logs_bloom** (`Bloom`) -- Logs bloom of all the logs included in all the transactions of the
               block.
             * **state** (`eth1spec.eth_types.State`) -- State after all transactions have been executed.




.. undocinclude:: /../src/ethereum/muir_glacier/spec.py
   :language: python
   :pyobject: apply_body

validate_ommers
~~~~~~~~~~~~~~~


.. function:: validate_ommers(ommers: Tuple[ethereum.muir_glacier.eth_types.Header, Ellipsis], block_header: ethereum.muir_glacier.eth_types.Header, chain: BlockChain) -> None
   :noindexentry:

   Validates the ommers mentioned in the block.

   :param ommers: List of ommers mentioned in the current block.
   :param block_header: The header of current block.
   :param chain: History and current state.




.. undocinclude:: /../src/ethereum/muir_glacier/spec.py
   :language: python
   :pyobject: validate_ommers

pay_rewards
~~~~~~~~~~~


.. function:: pay_rewards(state: ethereum.muir_glacier.state.State, block_number: ethereum.base_types.Uint, coinbase: ethereum.muir_glacier.eth_types.Address, ommers: Tuple[ethereum.muir_glacier.eth_types.Header, Ellipsis]) -> None
   :noindexentry:

   Pay rewards to the block miner as well as the ommers miners.

   :param state: Current account state.
   :param block_number: Position of the block within the chain.
   :param coinbase: Address of account which receives block reward and transaction fees.
   :param ommers: List of ommers mentioned in the current block.




.. undocinclude:: /../src/ethereum/muir_glacier/spec.py
   :language: python
   :pyobject: pay_rewards

process_transaction
~~~~~~~~~~~~~~~~~~~


.. function:: process_transaction(env: ethereum.muir_glacier.vm.Environment, tx: ethereum.muir_glacier.eth_types.Transaction) -> Tuple[ethereum.base_types.U256, Tuple[ethereum.muir_glacier.eth_types.Log, Ellipsis], bool]
   :noindexentry:

   Execute a transaction against the provided environment.

   :param env: Environment for the Ethereum Virtual Machine.
   :param tx: Transaction to execute.

   :returns: * **gas_left** (`eth1spec.base_types.U256`) -- Remaining gas after execution.
             * **logs** (`Tuple[eth1spec.eth_types.Log, ...]`) -- Logs generated during execution.




.. undocinclude:: /../src/ethereum/muir_glacier/spec.py
   :language: python
   :pyobject: process_transaction

validate_transaction
~~~~~~~~~~~~~~~~~~~~


.. function:: validate_transaction(tx: ethereum.muir_glacier.eth_types.Transaction) -> bool
   :noindexentry:

   Verifies a transaction.

   :param tx: Transaction to validate.

   :returns: **verified** -- True if the transaction can be executed, or False otherwise.
   :rtype: `bool`




.. undocinclude:: /../src/ethereum/muir_glacier/spec.py
   :language: python
   :pyobject: validate_transaction

calculate_intrinsic_cost
~~~~~~~~~~~~~~~~~~~~~~~~


.. function:: calculate_intrinsic_cost(tx: ethereum.muir_glacier.eth_types.Transaction) -> ethereum.base_types.Uint
   :noindexentry:

   Calculates the intrinsic cost of the transaction that is charged before
   execution is instantiated.

   :param tx: Transaction to compute the intrinsic cost of.

   :returns: **verified** -- The intrinsic cost of the transaction.
   :rtype: `eth1spec.base_types.Uint`




.. undocinclude:: /../src/ethereum/muir_glacier/spec.py
   :language: python
   :pyobject: calculate_intrinsic_cost

recover_sender
~~~~~~~~~~~~~~


.. function:: recover_sender(chain_id: ethereum.base_types.Uint64, tx: ethereum.muir_glacier.eth_types.Transaction) -> ethereum.muir_glacier.eth_types.Address
   :noindexentry:

   Extracts the sender address from a transaction.

   :param tx: Transaction of interest.
   :param chain_id: ID of the executing chain.

   :returns: **sender** -- The address of the account that signed the transaction.
   :rtype: `eth1spec.eth_types.Address`




.. undocinclude:: /../src/ethereum/muir_glacier/spec.py
   :language: python
   :pyobject: recover_sender

signing_hash_pre155
~~~~~~~~~~~~~~~~~~~


.. function:: signing_hash_pre155(tx: ethereum.muir_glacier.eth_types.Transaction) -> ethereum.muir_glacier.eth_types.Hash32
   :noindexentry:

   Compute the hash of a transaction used in a legacy (pre EIP 155) signature.

   :param tx: Transaction of interest.

   :returns: **hash** -- Hash of the transaction.
   :rtype: `eth1spec.eth_types.Hash32`




.. undocinclude:: /../src/ethereum/muir_glacier/spec.py
   :language: python
   :pyobject: signing_hash_pre155

signing_hash_155
~~~~~~~~~~~~~~~~


.. function:: signing_hash_155(tx: ethereum.muir_glacier.eth_types.Transaction) -> ethereum.muir_glacier.eth_types.Hash32
   :noindexentry:

   Compute the hash of a transaction used in a EIP 155 signature.

   :param tx: Transaction of interest.

   :returns: **hash** -- Hash of the transaction.
   :rtype: `eth1spec.eth_types.Hash32`




.. undocinclude:: /../src/ethereum/muir_glacier/spec.py
   :language: python
   :pyobject: signing_hash_155

compute_header_hash
~~~~~~~~~~~~~~~~~~~


.. function:: compute_header_hash(header: ethereum.muir_glacier.eth_types.Header) -> ethereum.muir_glacier.eth_types.Hash32
   :noindexentry:

   Computes the hash of a block header.

   :param header: Header of interest.

   :returns: **hash** -- Hash of the header.
   :rtype: `ethereum.eth_types.Hash32`




.. undocinclude:: /../src/ethereum/muir_glacier/spec.py
   :language: python
   :pyobject: compute_header_hash

check_gas_limit
~~~~~~~~~~~~~~~


.. function:: check_gas_limit(gas_limit: ethereum.base_types.Uint, parent_gas_limit: ethereum.base_types.Uint) -> bool
   :noindexentry:

   Validates the gas limit for a block.

   :param gas_limit: Gas limit to validate.
   :param parent_gas_limit: Gas limit of the parent block.

   :returns: **check** -- True if gas limit constraints are satisfied, False otherwise.
   :rtype: `bool`




.. undocinclude:: /../src/ethereum/muir_glacier/spec.py
   :language: python
   :pyobject: check_gas_limit

calculate_block_difficulty
~~~~~~~~~~~~~~~~~~~~~~~~~~


.. function:: calculate_block_difficulty(block_number: ethereum.base_types.Uint, block_timestamp: ethereum.base_types.U256, parent_timestamp: ethereum.base_types.U256, parent_difficulty: ethereum.base_types.Uint, parent_has_ommers: bool) -> ethereum.base_types.Uint
   :noindexentry:

   Computes difficulty of a block using its header and parent header.

   :param block_number: Block number of the block.
   :param block_timestamp: Timestamp of the block.
   :param parent_timestamp: Timestamp of the parent block.
   :param parent_difficulty: difficulty of the parent block.
   :param parent_has_ommers: does the parent have ommers.

   :returns: **difficulty** -- Computed difficulty for a block.
   :rtype: `ethereum.base_types.Uint`




.. undocinclude:: /../src/ethereum/muir_glacier/spec.py
   :language: python
   :pyobject: calculate_block_difficulty
