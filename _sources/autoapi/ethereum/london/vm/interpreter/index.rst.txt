.. py:module:: ethereum.london.vm.interpreter

Ethereum Virtual Machine (EVM) Interpreter
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. contents:: Table of Contents
    :backlinks: none
    :local:

Introduction
------------

A straightforward interpreter that executes EVM code.


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   ethereum.london.vm.interpreter.MessageCallOutput



Functions
~~~~~~~~~

.. autoapisummary::
   :nosignatures:

   ethereum.london.vm.interpreter.process_message_call
   ethereum.london.vm.interpreter.process_create_message
   ethereum.london.vm.interpreter.process_message
   ethereum.london.vm.interpreter.execute_code
   ethereum.london.vm.interpreter.collect_touched_accounts
   ethereum.london.vm.interpreter.collect_accounts_to_delete
   ethereum.london.vm.interpreter.calculate_gas_refund



Attributes
~~~~~~~~~~

.. autoapisummary::

   ethereum.london.vm.interpreter.STACK_DEPTH_LIMIT
   ethereum.london.vm.interpreter.MAX_CODE_SIZE
   ethereum.london.vm.interpreter.RIPEMD160_ADDRESS


Module Details
---------------

STACK_DEPTH_LIMIT
~~~~~~~~~~~~~~~~~



.. py:data:: STACK_DEPTH_LIMIT
   
   

.. undocinclude:: /../src/ethereum/london/vm/interpreter.py
   :language: python
   :lines: 50-50


MAX_CODE_SIZE
~~~~~~~~~~~~~



.. py:data:: MAX_CODE_SIZE
   
   

.. undocinclude:: /../src/ethereum/london/vm/interpreter.py
   :language: python
   :lines: 51-51


RIPEMD160_ADDRESS
~~~~~~~~~~~~~~~~~



.. py:data:: RIPEMD160_ADDRESS
   
   

.. undocinclude:: /../src/ethereum/london/vm/interpreter.py
   :language: python
   :lines: 52-52


MessageCallOutput
~~~~~~~~~~~~~~~~~


Output of a particular message call

Contains the following:

      1. `gas_left`: remaining gas after execution.
      2. `refund_counter`: gas to refund after execution.
      3. `logs`: list of `Log` generated during execution.
      4. `accounts_to_delete`: Contracts which have self-destructed.
      5. `touched_accounts`: Accounts that have been touched.
      6. `has_erred`: True if execution has caused an error.


.. class:: MessageCallOutput

   

   .. py:attribute:: gas_left
         :annotation: :ethereum.base_types.U256

      

   

   .. py:attribute:: refund_counter
         :annotation: :ethereum.base_types.U256

      

   

   .. py:attribute:: logs
         :annotation: :Union[Tuple[], Tuple[ethereum.london.eth_types.Log, Ellipsis]]

      

   

   .. py:attribute:: accounts_to_delete
         :annotation: :Set[ethereum.london.eth_types.Address]

      

   

   .. py:attribute:: touched_accounts
         :annotation: :Iterable[ethereum.london.eth_types.Address]

      

   

   .. py:attribute:: has_erred
         :annotation: :bool

      



process_message_call
~~~~~~~~~~~~~~~~~~~~


.. function:: process_message_call(message: ethereum.london.vm.Message, env: ethereum.london.vm.Environment) -> MessageCallOutput
   :noindexentry:

   If `message.current` is empty then it creates a smart contract
   else it executes a call from the `message.caller` to the `message.target`.

   :param message: Transaction specific items.
   :param env: External items required for EVM execution.

   :returns: **output** -- Output of the message call
   :rtype: `MessageCallOutput`




.. undocinclude:: /../src/ethereum/london/vm/interpreter.py
   :language: python
   :pyobject: process_message_call

process_create_message
~~~~~~~~~~~~~~~~~~~~~~


.. function:: process_create_message(message: ethereum.london.vm.Message, env: ethereum.london.vm.Environment) -> ethereum.london.vm.Evm
   :noindexentry:

   Executes a call to create a smart contract.

   :param message: Transaction specific items.
   :param env: External items required for EVM execution.

   :returns: **evm** -- Items containing execution specific objects.
   :rtype: :py:class:`~ethereum.london.vm.Evm`




.. undocinclude:: /../src/ethereum/london/vm/interpreter.py
   :language: python
   :pyobject: process_create_message

process_message
~~~~~~~~~~~~~~~


.. function:: process_message(message: ethereum.london.vm.Message, env: ethereum.london.vm.Environment) -> ethereum.london.vm.Evm
   :noindexentry:

   Executes a call to create a smart contract.

   :param message: Transaction specific items.
   :param env: External items required for EVM execution.

   :returns: **evm** -- Items containing execution specific objects
   :rtype: :py:class:`~ethereum.london.vm.Evm`




.. undocinclude:: /../src/ethereum/london/vm/interpreter.py
   :language: python
   :pyobject: process_message

execute_code
~~~~~~~~~~~~


.. function:: execute_code(message: ethereum.london.vm.Message, env: ethereum.london.vm.Environment) -> ethereum.london.vm.Evm
   :noindexentry:

   Executes bytecode present in the `message`.

   :param message: Transaction specific items.
   :param env: External items required for EVM execution.

   :returns: **evm** -- Items containing execution specific objects
   :rtype: `ethereum.vm.EVM`




.. undocinclude:: /../src/ethereum/london/vm/interpreter.py
   :language: python
   :pyobject: execute_code

collect_touched_accounts
~~~~~~~~~~~~~~~~~~~~~~~~


.. function:: collect_touched_accounts(evm: ethereum.london.vm.Evm, ancestor_had_error: bool = False) -> Iterable[ethereum.london.eth_types.Address]
   :noindexentry:

   Collect all of the accounts that *may* need to be deleted based on
   `EIP-161 <https://eips.ethereum.org/EIPS/eip-161>`_.
   Checking whether they *do* need to be deleted happens in the caller.
   See also: https://github.com/ethereum/EIPs/issues/716

   :param evm: The current EVM frame.
   :param ancestor_had_error: True if the ancestors of the evm object erred else False

   :returns: **touched_accounts** -- returns all the accounts that were touched and may need to be deleted.
   :rtype: `typing.Iterable`




.. undocinclude:: /../src/ethereum/london/vm/interpreter.py
   :language: python
   :pyobject: collect_touched_accounts

collect_accounts_to_delete
~~~~~~~~~~~~~~~~~~~~~~~~~~


.. function:: collect_accounts_to_delete(evm: ethereum.london.vm.Evm) -> Set[ethereum.london.eth_types.Address]
   :noindexentry:

   Collects all the accounts that were marked for deletion by the
   `SELFDESTRUCT` opcode.

   :param evm: The current EVM frame.

   :returns: **accounts_to_delete** -- returns all the accounts need marked for deletion by the
             `SELFDESTRUCT` opcode.
   :rtype: `set`




.. undocinclude:: /../src/ethereum/london/vm/interpreter.py
   :language: python
   :pyobject: collect_accounts_to_delete

calculate_gas_refund
~~~~~~~~~~~~~~~~~~~~


.. function:: calculate_gas_refund(evm: ethereum.london.vm.Evm) -> int
   :noindexentry:

   Adds up the gas that was refunded in each execution frame during the
   message call.

   :param evm: The current EVM frame.

   :returns: **gas_refund** -- returns the total gas that needs to be refunded after executing the
             message call.
   :rtype: `ethereum.base_types.U256`




.. undocinclude:: /../src/ethereum/london/vm/interpreter.py
   :language: python
   :pyobject: calculate_gas_refund
