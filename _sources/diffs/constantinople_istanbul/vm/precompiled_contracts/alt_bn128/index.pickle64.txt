gASV7GQAAAAAAACMDmRvY3V0aWxzLm5vZGVzlIwIZG9jdW1lbnSUk5QpgZR9lCiMCXJhd3NvdXJjZZSMAJSMCGNoaWxkcmVulF2UKGgAjAZ0YXJnZXSUk5QpgZR9lChoBWgGaAddlIwKYXR0cmlidXRlc5R9lCiMA2lkc5RdlIxBbW9kdWxlLWV0aGVyZXVtLmNvbnN0YW50aW5vcGxlLnZtLnByZWNvbXBpbGVkX2NvbnRyYWN0cy5hbHRfYm4xMjiUYYwHY2xhc3Nlc5RdlIwFbmFtZXOUXZSMCGR1cG5hbWVzlF2UjAhiYWNrcmVmc5RdlIwFaXNtb2SUiHWMB3RhZ25hbWWUaAmMBnNvdXJjZZSMgi9ob21lL3J1bm5lci93b3JrL2V4ZWN1dGlvbi1zcGVjcy9leGVjdXRpb24tc3BlY3MvZG9jL2F1dG9hcGkvZXRoZXJldW0vY29uc3RhbnRpbm9wbGUvdm0vcHJlY29tcGlsZWRfY29udHJhY3RzL2FsdF9ibjEyOC9pbmRleC5yc3SUjARsaW5llEsBjAZwYXJlbnSUaAOMCV9kb2N1bWVudJRoA3VijA9zcGhpbnguYWRkbm9kZXOUjAVpbmRleJSTlCmBlH2UKGgFaAZoB12UaA59lChoEF2UaBNdlGgVXZRoF12UaBldlIwHZW50cmllc5RdlCiMBHBhaXKUjEJtb2R1bGU7IGV0aGVyZXVtLmNvbnN0YW50aW5vcGxlLnZtLnByZWNvbXBpbGVkX2NvbnRyYWN0cy5hbHRfYm4xMjiUaBJoBk50lGF1aBxoI2gdaB5oH0sCaCBoA2ghaAN1YmgAjAdzZWN0aW9ulJOUKYGUfZQoaAVoBmgHXZQoaACMBXRpdGxllJOUKYGUfZQoaAWMMkV0aGVyZXVtIFZpcnR1YWwgTWFjaGluZSAoRVZNKSBBTFRfQk4xMjggQ09OVFJBQ1RTlGgHXZRoAIwEVGV4dJSTlIwyRXRoZXJldW0gVmlydHVhbCBNYWNoaW5lIChFVk0pIEFMVF9CTjEyOCBDT05UUkFDVFOUhZSBlH2UKGgFaAZoIGg6aCFoA2gdjCkudG94L2RvY3Mvc3RhZ2UwX291dC9hdXRvYXBpID0+IGRvYy9kaWZmc5RoH0sAdWJhaA59lChoEF2UaBNdlGgVXZRoF12UaBldlHVo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YmFoDn2UKGgQXZRoE12UaBVdlGgXXZRoGV2UjAhpbnRlcm5hbJSIjAVyZWZpZJSMSGV0aGVyZXVtLmNvbnN0YW50aW5vcGxlLnZtLnByZWNvbXBpbGVkX2NvbnRyYWN0cy5hbHRfYm4xMjguYWx0X2JuMTI4X211bJSMCHJlZnRpdGxllIxIZXRoZXJldW0uY29uc3RhbnRpbm9wbGUudm0ucHJlY29tcGlsZWRfY29udHJhY3RzLmFsdF9ibjEyOC5hbHRfYm4xMjhfbXVslHVoHGhtaB1OaB9OaCBqWgIAAHViYWgOfZQoaBBdlGgTXZRoFV2UaBddlGgZXZR1aBxoaGgdjJMvaG9tZS9ydW5uZXIvd29yay9leGVjdXRpb24tc3BlY3MvZXhlY3V0aW9uLXNwZWNzL2RvYy9hdXRvYXBpL2V0aGVyZXVtL2NvbnN0YW50aW5vcGxlL3ZtL3ByZWNvbXBpbGVkX2NvbnRyYWN0cy9hbHRfYm4xMjgvaW5kZXgucnN0OjMxOjxhdXRvc3VtbWFyeT6UaB9LAWggalcCAAB1YmFoDn2UKGgQXZRoE12UaBVdlGgXXZRoGV2UdWgcagACAABoHU5oH05oIGpUAgAAdWJqAQIAACmBlH2UKGgFaAZoB12UaGkpgZR9lChoBYwyVGhlIEFMVF9CTjEyOCBtdWx0aXBsaWNhdGlvbiBwcmVjb21waWxlZCBjb250cmFjdC6UaAddlGg/jDJUaGUgQUxUX0JOMTI4IG11bHRpcGxpY2F0aW9uIHByZWNvbXBpbGVkIGNvbnRyYWN0LpSFlIGUfZQoaAVoBmggaosCAABoIWgDaB1oRGgfSwB1YmFoDn2UKGgQXZRoE12UaBVdlGgXXZRoGV2UdWgcaGhoHYyTL2hvbWUvcnVubmVyL3dvcmsvZXhlY3V0aW9uLXNwZWNzL2V4ZWN1dGlvbi1zcGVjcy9kb2MvYXV0b2FwaS9ldGhlcmV1bS9jb25zdGFudGlub3BsZS92bS9wcmVjb21waWxlZF9jb250cmFjdHMvYWx0X2JuMTI4L2luZGV4LnJzdDozMTo8YXV0b3N1bW1hcnk+lGgfSwFoIGqIAgAAdWJhaA59lChoEF2UaBNdlGgVXZRoF12UaBldlHVoHGoAAgAAaB1OaB9OaCBqVAIAAHViZWgOfZQoaBBdlGgTXZRoFV2UaBddlGgZXZR1aBxq+wEAAGgdTmgfTmggavgBAAB1Ymr8AQAAKYGUfZQoaAVoBmgHXZQoagECAAApgZR9lChoBWgGaAddlGhpKYGUfZQoaAWMczpvYmo6YGFsdF9ibjEyOF9wYWlyaW5nX2NoZWNrIDxldGhlcmV1bS5jb25zdGFudGlub3BsZS52bS5wcmVjb21waWxlZF9jb250cmFjdHMuYWx0X2JuMTI4LmFsdF9ibjEyOF9wYWlyaW5nX2NoZWNrPmCUaAddlGhuKYGUfZQoaAVoBmgHXZRqDQIAACmBlH2UKGgFaq4CAABoB12UaD+MF2FsdF9ibjEyOF9wYWlyaW5nX2NoZWNrlIWUgZR9lChoBWgGaCBqswIAAGghaANoHWhEaB9LAHViYWgOfZQoaBBdlGgTXZQoahgCAACMAnB5lIwGcHktb2JqlGVoFV2UaBddlGgZXZR1aBxqDAIAAGgdTmgfTmggarACAAB1YmFoDn2UKGgQXZRoE12UaBVdlGgXXZRoGV2UjAhpbnRlcm5hbJSIjAVyZWZpZJSMUmV0aGVyZXVtLmNvbnN0YW50aW5vcGxlLnZtLnByZWNvbXBpbGVkX2NvbnRyYWN0cy5hbHRfYm4xMjguYWx0X2JuMTI4X3BhaXJpbmdfY2hlY2uUjAhyZWZ0aXRsZZSMUmV0aGVyZXVtLmNvbnN0YW50aW5vcGxlLnZtLnByZWNvbXBpbGVkX2NvbnRyYWN0cy5hbHRfYm4xMjguYWx0X2JuMTI4X3BhaXJpbmdfY2hlY2uUdWgcaG1oHU5oH05oIGqsAgAAdWJhaA59lChoEF2UaBNdlGgVXZRoF12UaBldlHVoHGhoaB2Mky9ob21lL3J1bm5lci93b3JrL2V4ZWN1dGlvbi1zcGVjcy9leGVjdXRpb24tc3BlY3MvZG9jL2F1dG9hcGkvZXRoZXJldW0vY29uc3RhbnRpbm9wbGUvdm0vcHJlY29tcGlsZWRfY29udHJhY3RzL2FsdF9ibjEyOC9pbmRleC5yc3Q6MzE6PGF1dG9zdW1tYXJ5PpRoH0sBaCBqqQIAAHViYWgOfZQoaBBdlGgTXZRoFV2UaBddlGgZXZR1aBxqAAIAAGgdTmgfTmggaqYCAAB1YmoBAgAAKYGUfZQoaAVoBmgHXZRoaSmBlH2UKGgF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eTFfdmFsdWUpOgogICAgICAgIGlmIGkgPj0gQUxUX0JOMTI4X1BSSU1FOgogICAgICAgICAgICByYWlzZSBPdXRPZkdhc0Vycm9yCgogICAgdHJ5OgogICAgICAgIHAwID0gQk5QKEJORih4MF92YWx1ZSksIEJORih5MF92YWx1ZSkpCiAgICAgICAgcDEgPSBCTlAoQk5GKHgxX3ZhbHVlKSwgQk5GKHkxX3ZhbHVlKSkKICAgIGV4Y2VwdCBWYWx1ZUVycm9yOgogICAgICAgIHJhaXNlIE91dE9mR2FzRXJyb3IKCiAgICBwID0gcDAgKyBwMQoKICAgIGV2bS5nYXNfbGVmdCA9IHN1YnRyYWN0X2dhcyhldm0uZ2FzX2xlZnQsIFUyNTYoNTAwKSkKICAgIGV2bS5vdXRwdXQgPSBwLngudG9fYmVfYnl0ZXMzMigpICsgcC55LnRvX2JlX2J5dGVzMzIoKQqUaAddlChoP1gsAwAAZGVmIGFsdF9ibjEyOF9hZGQoZXZtOiBFdm0pIC0+IE5vbmU6CiAgICB4MF9ieXRlcyA9IHJpZ2h0X3BhZF96ZXJvX2J5dGVzKGV2bS5tZXNzYWdlLmRhdGFbOjMyXSwgMzIpCiAgICB4MF92YWx1ZSA9IFUyNTYuZnJvbV9iZV9ieXRlcyh4MF9ieXRlcykKICAgIHkwX2J5dGVzID0gcmlnaHRfcGFkX3plcm9fYnl0ZXMoZXZtLm1lc3NhZ2UuZGF0YVszMjo2NF0sIDMyKQogICAgeTBfdmFsdWUgPSBVMjU2LmZyb21fYmVfYnl0ZXMoeTBfYnl0ZXMpCiAgICB4MV9ieXRlcyA9IHJpZ2h0X3BhZF96ZXJvX2J5dGVzKGV2bS5tZXNzYWdlLmRhdGFbNjQ6OTZdLCAzMikKICAgIHgxX3ZhbHVlID0gVTI1Ni5mcm9tX2JlX2J5dGVzKHgxX2J5dGVzKQogICAgeTFfYnl0ZXMgPSByaWdodF9wYWRfemVyb19ieXRlcyhldm0ubWVzc2FnZS5kYXRhWzk2OjEyOF0sIDMyKQogICAgeTFfdmFsdWUgPSBVMjU2LmZyb21fYmVfYnl0ZXMoeTFfYnl0ZXMpCgogICAgZm9yIGkgaW4gKHgwX3ZhbHVlLCB5MF92YWx1ZSwgeDFfdmFsdWUsIHkxX3Zh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cm9yCgogICAgcCA9IHAwLm11bF9ieShuKQoKICAgIGV2bS5nYXNfbGVmdCA9IHN1YnRyYWN0X2dhcyhldm0uZ2FzX2xlZnQsIFUyNTYoNDAwMDApKQogICAgZXZtLm91dHB1dCA9IHAueC50b19iZV9ieXRlczMyKCkgKyBwLnkudG9fYmVfYnl0ZXMzMigpCpRoB12UKGg/WGECAABkZWYgYWx0X2JuMTI4X211bChldm06IEV2bSkgLT4gTm9uZToKICAgIHgwX2J5dGVzID0gcmlnaHRfcGFkX3plcm9fYnl0ZXMoZXZtLm1lc3NhZ2UuZGF0YVs6MzJdLCAzMikKICAgIHgwX3ZhbHVlID0gVTI1Ni5mcm9tX2JlX2J5dGVzKHgwX2J5dGVzKQogICAgeTBfYnl0ZXMgPSByaWdodF9wYWRfemVyb19ieXRlcyhldm0ubWVzc2FnZS5kYXRhWzMyOjY0XSwgMzIpCiAgICB5MF92YWx1ZSA9IFUyNTYuZnJvbV9iZV9ieXRlcyh5MF9ieXRlcykKICAgIG4gPSBVMjU2LmZyb21fYmVfYnl0ZXMocmlnaHRfcGFkX3plcm9fYnl0ZXMoZXZtLm1lc3NhZ2UuZGF0YVs2NDo5Nl0sIDMyKSkKCiAgICBmb3IgaSBpbiAoeDBfdmFsdWUsIHkwX3ZhbHVlKToKICAgICAgICBpZiBpID49IEFMVF9CTjEyOF9QUklNRToKICAgICAgICAgICAgcmFpc2UgT3V0T2ZHYXNFcnJvcgoKICAgIHRyeToKICAgICAgICBwMCA9IEJOUChCTkYoeDBfdmFsdWUpLCBCTkYoeTBfdmFsdWUpKQogICAgZXhjZXB0IFZhbHVlRXJyb3I6CiAgICAgICAgcmFpc2UgT3V0T2ZHYXNFcnJvcgoKICAgIHAgPSBwMC5tdWxfYnkobikKCiAgICBldm0uZ2FzX2xlZnQgPSBzdWJ0cmFjdF9nYXMoZXZtLmdhc19sZWZ0LCCUhZSBlH2UKGgFaAZoIGopBQAAaCFoA2gdaERoH0sAdWJqewMAACmBlH2UKGgFaAZoB12UaD+MDFUyNTYoNDAwMDApKZSFlIGUfZQoaAVoBmggajEFAABoIWgDaB1oRGgfSwB1YmFoDn2UKGgQXZRoE12UjA9jaGFuZ2UtcmVwbGFjZWSUYWgVXZRoF12UaBldlHVoHGp6AwAAaCBqKQUAAGghaANoHWhEaB9LAHViansDAAApgZR9lChoBWgGaAddlGg/jAtVMjU2KDYwMDApKZSFlIGUfZQoaAVoBmggaj8FAABoIWgDaB1oRGgfSwB1YmFoDn2UKGgQXZRoE12UjBJjaGFuZ2UtcmVwbGFjZW1lbnSUYWgVXZRoF12UaBldlHVoHGp6AwAAaCBqKQUAAGghaANoHWhEaB9LAHViaD+MPAogICAgZXZtLm91dHB1dCA9IHAueC50b19iZV9ieXRlczMyKCkgKyBwLnkudG9fYmVfYnl0ZXMzMigpCpSFlIGUfZQoaAVoBmggaikFAABoIWgDaB1oRGgfSwB1YmVoDn2UKGgQXZRoE12UaBVdlGgXXZRoGV2UjAZzb3VyY2WUjHMvaG9tZS9ydW5uZXIvd29yay9leGVjdXRpb24tc3BlY3MvZXhlY3V0aW9uLXNwZWNzL3NyYy9ldGhlcmV1bS9jb25zdGFudGlub3BsZS92bS9wcmVjb21waWxlZF9jb250cmFjdHMvYWx0X2JuMTI4LnB5lIwJeG1sOnNwYWNllGoSAwAAjAVmb3JjZZSJjAhsYW5ndWFnZZSMBnB5dGhvbpSMDmhpZ2hsaWdodF9hcmdzlH2UalYEAABLAXOMB2xpbmVub3OUiXVoHGoeBAAAaB1oHmgfS0NoIGpfBAAAaCFoA3ViZWgOfZQoaBBdlGouAQAAYWgTXZRoFV2UjA1hbHRfYm4xMjhfbXVslGFoF12UaBldlHVoHGgzaB1oHmgfSzZoIGohAwAAaCFoA3ViaDQpgZR9lChoBWgGaAddlChoOSmBlH2UKGgFjBdhbHRfYm4xMjhfcGFpcmluZ19jaGVja5RoB12UaD+MF2FsdF9ibjEyOF9wYWlyaW5nX2NoZWNrlIWUgZR9lChoBWgGaCBqagUAAGghaANoHWhEaB9LAHViYWgOfZQoaBBdlGgTXZRoFV2UaBddlGgZXZR1aBxoOGgdaB5oH0tIaCBqZwUAAGghaAN1YmgkKYGUfZQoaAVoBmgHXZRoDn2UKGgQXZRoE12UaBVdlGgXXZRoGV2UjAdlbnRyaWVzlF2UdWgcaCNoHWhEaB9LAGggamcFAABoIWgDdWJqTwMAACmBlH2UKGgFaAZoB12UKGpUAwAAKYGUfZQoaAWMHGFsdF9ibjEyOF9wYWlyaW5nX2NoZWNrKGV2bSmUaAddlChqWgMAACmBlH2UKGgFjBdhbHRfYm4xMjhfcGFpcmluZ19jaGVja5RoB12UaD+MF2FsdF9ibjEyOF9wYWlyaW5nX2NoZWNrlIWUgZR9lChoBWgGaCBqigUAAGghaANoHWhEaB9LAHViYWgOfZQoaBBdlGgTXZQoamYDAABqZwMAAGpoAwAAamkDAABlaBVdlGgXXZRoGV2UjAl4bWw6c3BhY2WUahIDAAB1aBxqWQMAAGgdaB5oH05oIGqGBQAAdWJqbwMAACmBlH2UKGgFjANldm2UaAddlGp1AwAAKYGUfZQoaAWMA2V2bZRoB12UansDAAApgZR9lChoBWgGaAddlGg/jANldm2UhZSBlH2UKGgFaAZoIGqhBQAAaCFoA2gdaERoH0sAdWJhaA59lChoEF2UaBNdlGqGAwAAYWgVXZRoF12UaBldlHVoHGp6AwAAaB1OaB9OaCBqnQUAAHViYWgOfZQoaBBdlGgTXZRoFV2UaBddlGgZXZSMCXhtbDpzcGFjZZRqEgMAAHVoHGp0AwAAaB1OaB9OaCBqmQUAAHViYWgOfZQoaBBdlGgTXZRoFV2UaBddlGgZXZSMCXhtbDpzcGFjZZRqEgMAAHVoHGpuAwAAaB1oHmgfTmggaoYFAAB1YmVoDn2UKGgQXZSMUmV0aGVyZXVtLmNvbnN0YW50aW5vcGxlLnZtLnByZWNvbXBpbGVkX2NvbnRyYWN0cy5hbHRfYm4xMjguYWx0X2JuMTI4X3BhaXJpbmdfY2hlY2uUYWgTXZQoapwDAABqnQMAAIwCcHmUap8DAABqoAMAAGVoFV2UaBddlGgZXZSMBm1vZHVsZZRqpQMAAIwFY2xhc3OUaAaMCGZ1bGxuYW1llGqMBQAAdWgcalMDAABoHWgeaB9LS2ggaoMFAAB1YmqpAwAAKYGUfZQoaAVoBmgHXZQoaGkpgZR9lChoBYwxVGhlIEFMVF9CTjEyOCBwYWlyaW5nIGNoZWNrIHByZWNvbXBpbGVkIGNvbnRyYWN0LpRoB12UaD+MMVRoZSBBTFRfQk4xMjggcGFpcmluZyBjaGVjayBwcmVjb21waWxlZCBjb250cmFjdC6UhZSBlH2UKGgFaAZoIGrKBQAAaCFoA2gdaERoH0sAdWJhaA59lChoEF2UaBNdlGgVXZRoF12UaBldlHVoHGhoaB1oHmgfS05oIGrHBQAAdWJqvAMAACmBlH2UKGgFaAZoB12UasEDAAApgZR9lChoBWgGaAddlChqxgMAACmBlH2UKGgFjApQYXJhbWV0ZXJzlGgHXZRoP4wKUGFyYW1ldGVyc5SFlIGUfZQoaAVoBmggat4FAABoIWgDaB1oRGgfSwB1YmFoDn2UKGgQXZRoE12UaBVdlGgXXZRoGV2UdWgcasUDAABoHWgeaB9LAGggatsFAAB1YmrWAwAAKYGUfZQoaAVoBmgHXZRoaSmBlH2UKGgFjB1ldm0gLS0gVGhlIGN1cnJlbnQgRVZNIGZyYW1lLpRoB12UKGrfAwAAKYGUfZQoaAWMA2V2bZRoB12UaD+MA2V2bZSFlIGUfZQoaAVoBmggavMFAABoIWgDaB1oRGgfSwB1YmFoDn2UKGgQXZRoE12UaBVdlGgXXZRoGV2UjAtyZWZzcGVjaWZpY5SIjAlweTptb2R1bGWUaqUDAACMCHB5OmNsYXNzlE51aBxq3gMAAGgdTmgfTmggau8FAAB1Ymg/jBsg4oCTIFRoZSBjdXJyZW50IEVWTSBmcmFtZS6UhZSBlH2UKGgFaAZoIGrvBQAAaCFoA2gdaERoH0sAdWJlaA59lChoEF2UaBNdlGgVXZRoF12UaBldlHVoHGhoaB1OaB9OaCBq7AUAAHViYWgOfZQoaBBdlGgTXZRoFV2UaBddlGgZXZR1aBxq1QMAAGgdTmgfTmggatsFAAB1YmVoDn2UKGgQXZRoE12UaBVdlGgXXZRoGV2UdWgcasADAABoHU5oH05oIGrYBQAAdWJhaA59lChoEF2UaBNdlGgVXZRoF12UaBldlHVoHGq7AwAAaB1OaB9OaCBqxwUAAHViZWgOfZQoaBBdlGgTXZRoFV2UaBddlGgZXZR1aBxqqAMAAGgdaB5oH05oIGqDBQAAdWJlaA59lChoEF2UaBNdlChqwAUAAIwIZnVuY3Rpb26UZWgVXZRoF12UaBldlIwGZG9tYWlulGrABQAAjAdvYmp0eXBllGopBgAAjAhkZXNjdHlwZZRqKQYAAIwHbm9pbmRleJSJdWgcak4DAABoHWhEaB9LAGggamcFAABoIWgDdWJqHwQAACmBlH2UKGgFWEUFAABkZWYgYWx0X2JuMTI4X3BhaXJpbmdfY2hlY2soZXZtOiBFdm0pIC0+IE5vbmU6CiAgICBpZiBsZW4oZXZtLm1lc3NhZ2UuZGF0YSkgJSAxOTIgIT0gMDoKICAgICAgICByYWlzZSBPdXRPZkdhc0Vycm9yCiAgICBldm0uZ2FzX2xlZnQgPSBzdWJ0cmFjdF9nYXMoCiAgICAgICAgZXZtLmdhc19sZWZ0LCBVMjU2KDgwMDAwICogKGxlbihldm0ubWVzc2FnZS5kYXRhKSAvLyAxOTIpICsgMTAwMDAwKQogICAgKQogICAgcmVzdWx0ID0gQk5GMTIuZnJvbV9pbnQoMSkKICAgIGZvciBpIGluIHJhbmdlKGxlbihldm0ubWVzc2FnZS5kYXRhKSAvLyAxOTIpOgogICAgICAgIHZhbHVlcyA9IFtdCiAgICAgICAgZm9yIGogaW4gcmFuZ2UoNik6CiAgICAgICAgICAgIHZhbHVlID0gVTI1Ni5mcm9tX2JlX2J5dGVzKAogICAgICAgICAgICAgICAgZXZtLm1lc3NhZ2UuZGF0YVtpICogMTkyICsgMzIgKiBqIDogaSAqIDE5MiArIDMyICogKGogKyAxKV0KICAgICAgICAgICAgKQogICAgICAgICAgICBpZiB2YWx1ZSA+PSBBTFRfQk4xMjhfUFJJTUU6CiAgICAgICAgICAgICAgICByYWlzZSBPdXRPZkdhc0Vycm9yCiAgICAgICAgICAgIHZhbHVlcy5hcHBlbmQoaW50KHZhbHVlKSkKCiAgICAgICAgdHJ5OgogICAgICAgICAgICBwID0gQk5QKEJORih2YWx1ZXNbMF0pLCBCTkYodmFsdWVzWzFdKSkKICAgICAgICAgICAgcSA9IEJOUDIoCiAgICAgICAgICAgICAgICBCTkYyKCh2YWx1ZXNbM10sIHZhbHVlc1syXSkpLCBCTkYyKCh2YWx1ZXNbNV0sIHZhbHVlc1s0XSkpCiAgICAgICAgICAgICkKICAgICAgICBleGNlcHQgVmFsdWVFcnJvcjoKICAgICAgICAgICAgcmFpc2UgT3V0T2ZHYXNFcnJvcigpCiAgICAgICAgZW5zdXJlKAogICAgICAgICAgICBwLm11bF9ieShBTFRfQk4xMjhfQ1VSVkVfT1JERVIpID09IEJO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ZXNbMl0pKSwgQk5GMigodmFsdWVzWzVdLCB2YWx1ZXNbNF0pKQogICAgICAgICAgICApCiAgICAgICAgZXhjZXB0IFZhbHVlRXJyb3I6CiAgICAgICAgICAgIHJhaXNlIE91dE9mR2FzRXJyb3IoKQogICAgICAgIGVuc3VyZSgKICAgICAgICAgICAgcC5tdWxfYnkoQUxUX0JOMTI4X0NVUlZFX09SREVSKSA9PSBCTlAucG9pbnRfYXRfaW5maW5pdHkoKSwKICAgICAgICAgICAgT3V0T2ZHYXNFcnJvciwKICAgICAgICApCiAgICAgICAgZW5zdXJlKAogICAgICAgICAgICBxLm11bF9ieShBTFRfQk4xMjhfQ1VSVkVfT1JERVIpID09IEJOUDIucG9pbnRfYXRfaW5maW5pdHkoKSwKICAgICAgICAgICAgT3V0T2ZHYXNFcnJvciwKICAgICAgICApCiAgICAgICAgaWYgcCAhPSBCTlAucG9pbnRfYXRfaW5maW5pdHkoKSBhbmQgcSAhPSBCTlAyLnBvaW50X2F0X2luZmluaXR5KCk6CiAgICAgICAgICAgIHJlc3VsdCA9IHJlc3VsdCAqIHBhaXJpbmcocSwgcCkKCiAgICBpZiByZXN1bHQgPT0gQk5GMTIuZnJvbV9pbnQoMSk6CiAgICAgICAgZXZtLm91dHB1dCA9IFUyNTYoMSkudG9fYmVfYnl0ZXMzMigpCiAgICBlbHNlOgogICAgICAgIGV2bS5vdXRwdXQgPSBVMjU2KDApLnRvX2JlX2J5dGVzMzIoKQqUhZSBlH2UKGgFaAZoIGoxBgAAaCFoA2gdaERoH0sAdWJlaA59lChoEF2UaBNdlGgVXZRoF12UaBldlIwGc291cmNllIxzL2hvbWUvcnVubmVyL3dvcmsvZXhlY3V0aW9uLXNwZWNzL2V4ZWN1dGlvbi1zcGVjcy9zcmMvZXRoZXJldW0vY29uc3RhbnRpbm9wbGUvdm0vcHJlY29tcGlsZWRfY29udHJhY3RzL2FsdF9ibjEyOC5weZSMCXhtbDpzcGFjZZRqEgMAAIwFZm9yY2WUiYwIbGFuZ3VhZ2WUjAZweXRob26UjA5oaWdobGlnaHRfYXJnc5R9lGpWBAAASwFzjAdsaW5lbm9zlIl1aBxqHgQAAGgdaB5oH0tVaCBqZwUAAGghaAN1YmVoDn2UKGgQXZRqUAEAAGFoE12UaBVdlIwXYWx0X2JuMTI4X3BhaXJpbmdfY2hlY2uUYWgXXZRoGV2UdWgcaDNoHWgeaB9LSGggaiEDAABoIWgDdWJlaA59lChoEF2UaO1haBNdlGgVXZSMDm1vZHVsZSBkZXRhaWxzlGFoF12UaBldlHVoHGgzaB1oHmgfSyFoIGg1aCFoA3ViZWgOfZQoaBBdlIwwZXRoZXJldW0tdmlydHVhbC1tYWNoaW5lLWV2bS1hbHQtYm4xMjgtY29udHJhY3RzlGFoE12UaBVdlIwyZXRoZXJldW0gdmlydHVhbCBtYWNoaW5lIChldm0pIGFsdF9ibjEyOCBjb250cmFjdHOUYWgXXZRoGV2UdWgcaDNoHWgeaB9LBGggaANoIWgDdWJlaA59lChoEF2UaBNdlGgVXZRoF12UaBldlIwGc291cmNllGhEdWgcaAGMDmN1cnJlbnRfc291cmNllGhEjAxjdXJyZW50X2xpbmWUSwCMCHNldHRpbmdzlIwRZG9jdXRpbHMuZnJvbnRlbmSUjAZWYWx1ZXOUk5QpgZR9lCiMDHJlcG9ydF9sZXZlbJRLAowKaGFsdF9sZXZlbJRLBIwRZXhpdF9zdGF0dXNfbGV2ZWyUSwWMBWRlYnVnlE6MDndhcm5pbmdfc3RyZWFtlE6MCXRyYWNlYmFja5ROjA9vdXRwdXRfZW5jb2RpbmeUjAV1dGYtOJSMHW91dHB1dF9lbmNvZGluZ19lcnJvcl9oYW5kbGVylIwReG1sY2hhcnJlZnJlcGxhY2WUjA5lcnJvcl9lbmNvZGluZ5SMBXV0Zi04lIwcZXJyb3JfZW5jb2RpbmdfZXJyb3JfaGFuZGxlcpSMEGJhY2tzbGFzaHJlcGxhY2WUjBNyZWNvcmRfZGVwZW5kZW5jaWVzlIwOZG9jdXRpbHMudXRpbHOUjA5EZXBlbmRlbmN5TGlzdJSTlCmBlH2UKIwEbGlzdJRdlIwEZmlsZZROdWKMBmNvbmZpZ5ROjA1kdW1wX3NldHRpbmdzlE6MDmR1bXBfaW50ZXJuYWxzlE6MD2R1bXBfdHJhbnNmb3Jtc5ROjA9kdW1wX3BzZXVkb194bWyUTowQZXhwb3NlX2ludGVybmFsc5ROjA5zdHJpY3RfdmlzaXRvcpROjA9fZGlzYWJsZV9jb25maWeUTowHX3NvdXJjZZROjAxfZGVzdGluYXRpb26UjFNkb2MvZGlmZnMvY29uc3RhbnRpbm9wbGVfaXN0YW5idWwvdm0vcHJlY29tcGlsZWRfY29udHJhY3RzL2FsdF9ibjEyOC9pbmRleC5waWNrbGU2NJSMDV9jb25maWdfZmlsZXOUXZSMEWxpbmVfbGVuZ3RoX2xpbWl0lE0QJ4wJdGFiX3dpZHRolEsIjBBzeW50YXhfaGlnaGxpZ2h0lIwEbG9uZ5SMDHNtYXJ0X3F1b3Rlc5SJjBNzbWFydHF1b3Rlc19sb2NhbGVzlE6MHWNoYXJhY3Rlcl9sZXZlbF9pbmxpbmVfbWFya3VwlImMBndyaXRlcpSMA3htbJSMGWNvbXBhcmVfc2VjdGlvbnNfYnlfbmFtZXOUiYwMZHVtcF9yc3RkaWZmlE6MBV9ib3RolH2UKGg4TowJZ2VuZXJhdG9ylE6MCWRhdGVzdGFtcJROjAtzb3VyY2VfbGlua5ROjApzb3VyY2VfdXJslE6MDXRvY19iYWNrbGlua3OUagACAACMEmZvb3Rub3RlX2JhY2tsaW5rc5RLAYwNc2VjdG51bV94Zm9ybZRLAYwOZG9jdGl0bGVfeGZvcm2USwGMDWRvY2luZm9feGZvcm2USwGMEnNlY3RzdWJ0aXRsZV94Zm9ybZRLAIwOc3RyaXBfY29tbWVudHOUTowOaW5wdXRfZW5jb2RpbmeUTowcaW5wdXRfZW5jb2RpbmdfZXJyb3JfaGFuZGxlcpSMBnN0cmljdJSMDWxhbmd1YWdlX2NvZGWUjAJlbpSMDnBlcF9yZWZlcmVuY2VzlE6MDHBlcF9iYXNlX3VybJSMH2h0dHA6Ly93d3cucHl0aG9uLm9yZy9kZXYvcGVwcy+UjBVwZXBfZmlsZV91cmxfdGVtcGxhdGWUjAhwZXAtJTA0ZJSMDnJmY19yZWZlcmVuY2VzlE6MDHJmY19iYXNlX3VybJSMG2h0dHA6Ly90b29scy5pZXRmLm9yZy9odG1sL5SMHXRyaW1fZm9vdG5vdGVfcmVmZXJlbmNlX3NwYWNllE6MFmZpbGVfaW5zZXJ0aW9uX2VuYWJsZWSUSwGMC3Jhd19lbmFibGVklEsBjA5hdXRvX2lkX3ByZWZpeJSMAmlklIwJaWRfcHJlZml4lGgGjBtzdHJpcF9lbGVtZW50c193aXRoX2NsYXNzZXOUTowNc3RyaXBfY2xhc3Nlc5ROdYwEYm90aJR9lIwKX29wdGlvbnNUb5SMBV9ib3RolIwLX29sZF9zb3VyY2WUjBwudG94L2RvY3Mvc3RhZ2UwX291dC9hdXRvYXBplIwLX25ld19zb3VyY2WUjAlkb2MvZGlmZnOUauwGAABq7QYAAHVijAhyZXBvcnRlcpROjBBpbmRpcmVjdF90YXJnZXRzlF2UjBFzdWJzdGl0dXRpb25fZGVmc5R9lIwSc3Vic3RpdHV0aW9uX25hbWVzlH2UjAhyZWZuYW1lc5R9lIwGcmVmaWRzlH2UjAduYW1laWRzlH2UjAluYW1ldHlwZXOUfZRoEH2UjA1mb290bm90ZV9yZWZzlH2UjA1jaXRhdGlvbl9yZWZzlH2UjA1hdXRvZm9vdG5vdGVzlF2UjBFhdXRvZm9vdG5vdGVfcmVmc5RdlIwQc3ltYm9sX2Zvb3Rub3Rlc5RdlIwUc3ltYm9sX2Zvb3Rub3RlX3JlZnOUXZSMCWZvb3Rub3Rlc5RdlIwJY2l0YXRpb25zlF2UjBJhdXRvZm9vdG5vdGVfc3RhcnSUSwGMFXN5bWJvbF9mb290bm90ZV9zdGFydJRLAIwKaWRfY291bnRlcpSMC2NvbGxlY3Rpb25zlIwHQ291bnRlcpSTlH2UhZRSlIwOcGFyc2VfbWVzc2FnZXOUXZSMEnRyYW5zZm9ybV9tZXNzYWdlc5RdlIwLdHJhbnNmb3JtZXKUTowLaW5jbHVkZV9sb2eUXZSMCmRlY29yYXRpb26UTmghaAN1Yi4=