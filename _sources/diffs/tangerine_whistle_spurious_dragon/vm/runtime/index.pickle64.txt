gASVeEIAAAAAAACMDmRvY3V0aWxzLm5vZGVzlIwIZG9jdW1lbnSUk5QpgZR9lCiMCXJhd3NvdXJjZZSMAJSMCGNoaWxkcmVulF2UaACMB3NlY3Rpb26Uk5QpgZR9lChoBWgGaAddlChoAIwFdGl0bGWUk5QpgZR9lChoBYwsOm1vZDpgZXRoZXJldW0udGFuZ2VyaW5lX3doaXN0bGUudm0ucnVudGltZWCUaAddlChoAIwJcmVmZXJlbmNllJOUKYGUfZQoaAVoBmgHXZRoAIwHbGl0ZXJhbJSTlCmBlH2UKGgFaBJoB12UaACMBFRleHSUk5SMJWV0aGVyZXVtLnRhbmdlcmluZV93aGlzdGxlLnZtLnJ1bnRpbWWUhZSBlH2UKGgFaAaMBnBhcmVudJRoG4wJX2RvY3VtZW50lGgDjAZzb3VyY2WUjCkudG94L2RvY3Mvc3RhZ2UwX291dC9hdXRvYXBpID0+IGRvYy9kaWZmc5SMBGxpbmWUSwB1YmGMCmF0dHJpYnV0ZXOUfZQojANpZHOUXZSMB2NsYXNzZXOUXZQojAR4cmVmlIwCcHmUjAZweS1tb2SUZYwFbmFtZXOUXZSMCGR1cG5hbWVzlF2UjAhiYWNrcmVmc5RdlHWMB3RhZ25hbWWUaBloJk5oKE5oJGgWdWJhaCl9lChoK12UaC1dlIwPY2hhbmdlLXJlcGxhY2VklGFoMl2UaDRdlGg2XZSMCGludGVybmFslIiMBXJlZmlklIwsbW9kdWxlLWV0aGVyZXVtLnRhbmdlcmluZV93aGlzdGxlLnZtLnJ1bnRpbWWUjAhyZWZ0aXRsZZSMJWV0aGVyZXVtLnRhbmdlcmluZV93aGlzdGxlLnZtLnJ1bnRpbWWUdWg4aBRoJmgnaChLAGgkaBBoJWgDdWJoFSmBlH2UKGgFaAZoB12UaBopgZR9lChoBYwqOm1vZDpgZXRoZXJldW0uc3B1cmlvdXNfZHJhZ29uLnZtLnJ1bnRpbWVglGgHXZRoH4wjZXRoZXJldW0uc3B1cmlvdXNfZHJhZ29uLnZtLnJ1bnRpbWWUhZSBlH2UKGgFaAZoJGhIaCVoA2gmaCdoKEsAdWJhaCl9lChoK12UaC1dlCiMBHhyZWaUjAJweZSMBnB5LW1vZJRlaDJdlGg0XZRoNl2UdWg4aBloJk5oKE5oJGhFdWJhaCl9lChoK12UaC1dlIwSY2hhbmdlLXJlcGxhY2VtZW50lGFoMl2UaDRdlGg2XZSMCGludGVybmFslIiMBXJlZmlklIwqbW9kdWxlLWV0aGVyZXVtLnNwdXJpb3VzX2RyYWdvbi52bS5ydW50aW1llIwIcmVmdGl0bGWUjCNldGhlcmV1bS5zcHVyaW91c19kcmFnb24udm0ucnVudGltZZR1aDhoFGgmaCdoKEsAaCRoEGglaAN1YmVoKX2UKGgrXZRoLV2UaDJdlGg0XZRoNl2UdWg4aA5oJoxtL2hvbWUvcnVubmVyL3dvcmsvZXhlY3V0aW9uLXNwZWNzL2V4ZWN1dGlvbi1zcGVjcy9kb2MvYXV0b2FwaS9ldGhlcmV1bS90YW5nZXJpbmVfd2hpc3RsZS92bS9ydW50aW1lL2luZGV4LnJzdJRoKEsCaCRoC2glaAN1YowPc3BoaW54LmFkZG5vZGVzlIwFaW5kZXiUk5QpgZR9lChoBWgGaAddlGgpfZQoaCtdlGgtXZRoMl2UaDRdlGg2XZSMB2VudHJpZXOUXZQojARwYWlylIwtbW9kdWxlOyBldGhlcmV1bS50YW5nZXJpbmVfd2hpc3RsZS52bS5ydW50aW1llIwsbW9kdWxlLWV0aGVyZXVtLnRhbmdlcmluZV93aGlzdGxlLnZtLnJ1bnRpbWWUaAZOdJRhdWg4aG1oJmhraChLBWgkaAtoJWgDdWJoCimBlH2UKGgFaAZoB12UKGgPKYGUfZQoaAWMMUV0aGVyZXVtIFZpcnR1YWwgTWFjaGluZSAoRVZNKSBSdW50aW1lIE9wZXJhdGlvbnOUaAddlGgfjDFFdGhlcmV1bSBWaXJ0dWFsIE1hY2hpbmUgKEVWTSkgUnVudGltZSBPcGVyYXRpb25zlIWUgZR9lChoBWgGaCRogWglaANoJmgnaChLAHViYWgpfZQoaCtdlGgtXZRoMl2UaDRdlGg2XZR1aDhoDmgmaGtoKEsHaCRofnViaACMBXRvcGljlJOUKYGUfZQoaAVoBmgHXZQoaA8pgZR9lChoBYwRVGFibGUgb2YgQ29udGVudHOUaAddlGgfjBFUYWJsZSBvZiBDb250ZW50c5SFlIGUfZQoaAVoBmgkaJRoJWgDaCZoJ2goSwB1YmFoKX2UKGgrXZRoLV2UaDJdlGg0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ZWxlc3MsIHN1Y2ggaW52YWxpZCBvcGNvZGVzIHdvdWxkIGJlIGNhdWdodAogICAgICAgICAgICAjIGFuZCByYWlzZWQgd2hlbiB0aGUgaW50ZXJwcmV0ZXIgcnVucy4KICAgICAgICAgICAgcGMgKz0gMQogICAgICAgICAgICBjb250aW51ZQoKICAgICAgICBpZiBjdXJyZW50X29wY29kZSA9PSBPcHMuSlVNUERFU1Q6CiAgICAgICAgICAgIHZhbGlkX2p1bXBfZGVzdGluYXRpb25zLmFkZChwYykKICAgICAgICBlbGlmIE9wcy5QVVNIMS52YWx1ZSA8PSBjdXJyZW50X29wY29kZS52YWx1ZSA8PSBPcHMuUFVTSDMyLnZhbHVlOgogICAgICAgICAgICAjIElmIFBVU0gtTiBvcGNvZGVzIGFyZSBlbmNvdW50ZXJlZCwgc2tpcCB0aGUgY3VycmVudCBvcGNvZGUgYWxvbmcKICAgICAgICAgICAgIyB3aXRoIHRoZSB0cmFpbGluZyBkYXRhIHNlZ21lbnQgY29ycmVzcG9uZGluZyB0byB0aGUgUFVTSC1OCiAgICAgICAgICAgICMgb3Bjb2Rlcy4KICAgICAgICAgICAgcHVzaF9kYXRhX3NpemUgPSBjdXJyZW50X29wY29kZS52YWx1ZSAtIE9wcy5QVVNIMS52YWx1ZSArIDEKICAgICAgICAgICAgcGMgKz0gcHVzaF9kYXRhX3NpemUKCiAgICAgICAgcGMgKz0gMQoKICAgIHJldHVybiB2YWxpZF9qdW1wX2Rlc3RpbmF0aW9ucwqUaAddlGgfWLsDAABkZWYgZ2V0X3ZhbGlkX2p1bXBfZGVzdGluYXRpb25zKGNvZGU6IGJ5dGVzKSAtPiBTZXRbVWludF06CiAgICB2YWxpZF9qdW1wX2Rlc3RpbmF0aW9ucyA9IHNldCgpCiAgICBwYyA9IFVpbnQoMCkKCiAgICB3aGlsZSBwYyA8IGxlbihjb2RlKToKICAgICAgICB0cnk6CiAgICAgICAgICAgIGN1cnJlbnRfb3Bjb2RlID0gT3BzKGNvZGVbcGNdKQogICAgICAgIGV4Y2VwdCBWYWx1ZUVycm9yOgogICAgICAgICAgICAjIFNraXAgaW52YWxpZCBvcGNvZGVzLCBhcyB0aGV5IGRvbid0IGFmZmVjdCB0aGUganVtcGRlc3QKICAgICAgICAgICAgIyBhbmFseXNpcy4gTmV2ZXJ0aGVsZXNzLCBzdWNoIGludmFsaWQgb3Bjb2RlcyB3b3VsZCBiZSBjYXVnaHQKICAgICAgICAgICAgIyBhbmQgcmFpc2VkIHdoZW4gdGhlIGludGVycHJldGVyIHJ1bnMuCiAgICAgICAgICAgIHBjICs9IDEKICAgICAgICAgICAgY29udGludWUKCiAgICAgICAgaWYgY3VycmVudF9vcGNvZGUgPT0gT3BzLkpVTVBERVNUOgogICAgICAgICAgICB2YWxpZF9qdW1wX2Rlc3RpbmF0aW9ucy5hZGQocGMpCiAgICAgICAgZWxpZiBPcHMuUFVTSDEudmFsdWUgPD0gY3VycmVudF9vcGNvZGUudmFsdWUgPD0gT3BzLlBVU0gzMi52YWx1ZToKICAgICAgICAgICAgIyBJZiBQVVNILU4gb3Bjb2RlcyBhcmUgZW5jb3VudGVyZWQsIHNraXAgdGhlIGN1cnJlbnQgb3Bjb2RlIGFsb25nCiAgICAgICAgICAgICMgd2l0aCB0aGUgdHJhaWxpbmcgZGF0YSBzZWdtZW50IGNvcnJlc3BvbmRpbmcgdG8gdGhlIFBVU0gtTgogICAgICAgICAgICAjIG9wY29kZXMuCiAgICAgICAgICAgIHB1c2hfZGF0YV9zaXplID0gY3VycmVudF9vcGNvZGUudmFsdWUgLSBPcHMuUFVTSDEudmFsdWUgKyAxCiAgICAgICAgICAgIHBjICs9IHB1c2hfZGF0YV9zaXplCgogICAgICAgIHBjICs9IDEKCiAgICByZXR1cm4gdmFsaWRfanVtcF9kZXN0aW5hdGlvbnMKlIWUgZR9lChoBWgGaCRqpAQAAGglaANoJmgnaChLAHViYWgpfZQoaCtdlGgtXZRoMl2UaDRdlGg2XZSMBnNvdXJjZZSMXi9ob21lL3J1bm5lci93b3JrL2V4ZWN1dGlvbi1zcGVjcy9leGVjdXRpb24tc3BlY3Mvc3JjL2V0aGVyZXVtL3RhbmdlcmluZV93aGlzdGxlL3ZtL3J1bnRpbWUucHmUjAl4bWw6c3BhY2WUamkCAACMBWZvcmNllImMCGxhbmd1YWdllIwGcHl0aG9ulIwOaGlnaGxpZ2h0X2FyZ3OUfZSMC2xpbmVub3N0YXJ0lEsBc4wHbGluZW5vc5SJdWg4aqIEAABoJmhraChLPWgkaokCAAB1YmVoKX2UKGgrXZRqTgEAAGFoLV2UaDJdlIwbZ2V0X3ZhbGlkX2p1bXBfZGVzdGluYXRpb25zlGFoNF2UaDZdlHVoOGgJaCZoa2goSyVoJGp4AgAAdWJlaCl9lChoK12Uai8BAABhaC1dlGgyXZSMDm1vZHVsZSBkZXRhaWxzlGFoNF2UaDZdlHVoOGgJaCZoa2goSyJoJGh+dWJlaCl9lChoK12UjC9ldGhlcmV1bS12aXJ0dWFsLW1hY2hpbmUtZXZtLXJ1bnRpbWUtb3BlcmF0aW9uc5RhaC1dlGgyXZSMMWV0aGVyZXVtIHZpcnR1YWwgbWFjaGluZSAoZXZtKSBydW50aW1lIG9wZXJhdGlvbnOUYWg0XZRoNl2UdWg4aAloJmhraChLB2gkaAtoJWgDdWJlaCl9lChoK12UKGh8jCVldGhlcmV1bS10YW5nZXJpbmUtd2hpc3RsZS12bS1ydW50aW1llGVoLV2UaDJdlIwlZXRoZXJldW0udGFuZ2VyaW5lX3doaXN0bGUudm0ucnVudGltZZRhaDRdlGg2XZR1aDhoCWgmaGtoKEsCaCRoA2glaAN1YmFoKX2UKGgrXZRoLV2UaDJdlGg0XZRoNl2UjAZzb3VyY2WUaCd1aDhoAYwOY3VycmVudF9zb3VyY2WUaCeMDGN1cnJlbnRfbGluZZRLAIwIc2V0dGluZ3OUjBFkb2N1dGlscy5mcm9udGVuZJSMBlZhbHVlc5STlCmBlH2UKIwMcmVwb3J0X2xldmVslEsCjApoYWx0X2xldmVslEsEjBFleGl0X3N0YXR1c19sZXZlbJRLBYwFZGVidWeUTowOd2FybmluZ19zdHJlYW2UTowJdHJhY2ViYWNrlE6MD291dHB1dF9lbmNvZGluZ5SMBXV0Zi04lIwdb3V0cHV0X2VuY29kaW5nX2Vycm9yX2hhbmRsZXKUjBF4bWxjaGFycmVmcmVwbGFjZZSMDmVycm9yX2VuY29kaW5nlIwFdXRmLTiUjBxlcnJvcl9lbmNvZGluZ19lcnJvcl9oYW5kbGVylIwQYmFja3NsYXNocmVwbGFjZZSME3JlY29yZF9kZXBlbmRlbmNpZXOUjA5kb2N1dGlscy51dGlsc5SMDkRlcGVuZGVuY3lMaXN0lJOUKYGUfZQojARsaXN0lF2UjARmaWxllE51YowGY29uZmlnlE6MDWR1bXBfc2V0dGluZ3OUTowOZHVtcF9pbnRlcm5hbHOUTowPZHVtcF90cmFuc2Zvcm1zlE6MD2R1bXBfcHNldWRvX3htbJROjBBleHBvc2VfaW50ZXJuYWxzlE6MDnN0cmljdF92aXNpdG9ylE6MD19kaXNhYmxlX2NvbmZpZ5ROjAdfc291cmNllE6MDF9kZXN0aW5hdGlvbpSMRWRvYy9kaWZmcy90YW5nZXJpbmVfd2hpc3RsZV9zcHVyaW91c19kcmFnb24vdm0vcnVudGltZS9pbmRleC5waWNrbGU2NJSMDV9jb25maWdfZmlsZXOUXZSMEWxpbmVfbGVuZ3RoX2xpbWl0lE0QJ4wJdGFiX3dpZHRolEsIjBBzeW50YXhfaGlnaGxpZ2h0lIwEbG9uZ5SMDHNtYXJ0X3F1b3Rlc5SJjBNzbWFydHF1b3Rlc19sb2NhbGVzlE6MHWNoYXJhY3Rlcl9sZXZlbF9pbmxpbmVfbWFya3VwlImMBndyaXRlcpSMA3htbJSMGWNvbXBhcmVfc2VjdGlvbnNfYnlfbmFtZXOUiYwMZHVtcF9yc3RkaWZmlE6MBV9ib3RolH2UKGgOTowJZ2VuZXJhdG9ylE6MCWRhdGVzdGFtcJROjAtzb3VyY2VfbGlua5ROjApzb3VyY2VfdXJslE6MDXRvY19iYWNrbGlua3OUav4BAACMEmZvb3Rub3RlX2JhY2tsaW5rc5RLAYwNc2VjdG51bV94Zm9ybZRLAYwOZG9jdGl0bGVfeGZvcm2USwGMDWRvY2luZm9feGZvcm2USwGMEnNlY3RzdWJ0aXRsZV94Zm9ybZRLAIwOc3RyaXBfY29tbWVudHOUTowOaW5wdXRfZW5jb2RpbmeUTowcaW5wdXRfZW5jb2RpbmdfZXJyb3JfaGFuZGxlcpSMBnN0cmljdJSMDWxhbmd1YWdlX2NvZGWUjAJlbpSMDnBlcF9yZWZlcmVuY2VzlE6MDHBlcF9iYXNlX3VybJSMH2h0dHA6Ly93d3cucHl0aG9uLm9yZy9kZXYvcGVwcy+UjBVwZXBfZmlsZV91cmxfdGVtcGxhdGWUjAhwZXAtJTA0ZJSMDnJmY19yZWZlcmVuY2VzlE6MDHJmY19iYXNlX3VybJSMG2h0dHA6Ly90b29scy5pZXRmLm9yZy9odG1sL5SMHXRyaW1fZm9vdG5vdGVfcmVmZXJlbmNlX3NwYWNllE6MFmZpbGVfaW5zZXJ0aW9uX2VuYWJsZWSUSwGMC3Jhd19lbmFibGVklEsBjA5hdXRvX2lkX3ByZWZpeJSMAmlklIwJaWRfcHJlZml4lGgGjBtzdHJpcF9lbGVtZW50c193aXRoX2NsYXNzZXOUTowNc3RyaXBfY2xhc3Nlc5ROdYwEYm90aJR9lIwKX29wdGlvbnNUb5SMBV9ib3RolIwLX29sZF9zb3VyY2WUjBwudG94L2RvY3Mvc3RhZ2UwX291dC9hdXRvYXBplIwLX25ld19zb3VyY2WUjAlkb2MvZGlmZnOUaigFAABqKQUAAHVijAhyZXBvcnRlcpROjBBpbmRpcmVjdF90YXJnZXRzlF2UjBFzdWJzdGl0dXRpb25fZGVmc5R9lIwSc3Vic3RpdHV0aW9uX25hbWVzlH2UjAhyZWZuYW1lc5R9lIwGcmVmaWRzlH2UjAduYW1laWRzlH2UjAluYW1ldHlwZXOUfZRoK32UjA1mb290bm90ZV9yZWZzlH2UjA1jaXRhdGlvbl9yZWZzlH2UjA1hdXRvZm9vdG5vdGVzlF2UjBFhdXRvZm9vdG5vdGVfcmVmc5RdlIwQc3ltYm9sX2Zvb3Rub3Rlc5RdlIwUc3ltYm9sX2Zvb3Rub3RlX3JlZnOUXZSMCWZvb3Rub3Rlc5RdlIwJY2l0YXRpb25zlF2UjBJhdXRvZm9vdG5vdGVfc3RhcnSUSwGMFXN5bWJvbF9mb290bm90ZV9zdGFydJRLAIwKaWRfY291bnRlcpSMC2NvbGxlY3Rpb25zlIwHQ291bnRlcpSTlH2UhZRSlIwOcGFyc2VfbWVzc2FnZXOUXZSMEnRyYW5zZm9ybV9tZXNzYWdlc5RdlIwLdHJhbnNmb3JtZXKUTowLaW5jbHVkZV9sb2eUXZSMCmRlY29yYXRpb26UTmglaAN1Yi4=