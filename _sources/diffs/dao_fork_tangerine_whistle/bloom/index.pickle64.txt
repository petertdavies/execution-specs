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ZXMpIC0+IE5vbmU6CiAgICAjIFRPRE86IFRoaXMgZnVuY3Rpb25hbGl0eSBoYXNuJ3QgYmVlbiB0ZXN0ZWQgcmlnb3JvdXNseSB5ZXQuCiAgICBoYXNoID0ga2VjY2FrMjU2KGJsb29tX2VudHJ5KQoKICAgIGZvciBpZHggaW4gKDAsIDIsIDQpOgogICAgICAgICMgT2J0YWluIHRoZSBsZWFzdCBzaWduaWZpY2FudCAxMSBiaXRzIGZyb20gdGhlIHBhaXIgb2YgYnl0ZXMKICAgICAgICAjICgxNiBiaXRzKSwgYW5kIHNldCB0aGlzIGJpdCBpbiBibG9vbSBieXRlYXJyYXkuCiAgICAgICAgIyBUaGUgb2J0YWluZWQgYml0IGlzIDAtaW5kZXhlZCBpbiB0aGUgYmxvb20gZmlsdGVyIGZyb20gdGhlIGxlYXN0CiAgICAgICAgIyBzaWduaWZpY2FudCBiaXQgdG8gdGhlIG1vc3Qgc2lnbmlmaWNhbnQgYml0LgogICAgICAgIGJpdF90b19zZXQgPSBVaW50LmZyb21fYmVfYnl0ZXMoaGFzaFtpZHggOiBpZHggKyAyXSkgJiAweDA3RkYKICAgICAgICAjIEJlbG93IGlzIHRoZSBpbmRleCBvZiB0aGUgYml0IGluIHRoZSBieXRlYXJyYXkgKHdoZXJlIDAtaW5kZXhlZAogICAgICAgICMgYnl0ZSBpcyB0aGUgbW9zdCBzaWduaWZpY2FudCBieXRlKQogICAgICAgIGJpdF9pbmRleCA9IDB4MDdGRiAtIGJpdF90b19zZXQKCiAgICAgICAgYnl0ZV9pbmRleCA9IGJpdF9pbmRleCAvLyA4CiAgICAgICAgYml0X3ZhbHVlID0gMSA8PCAoNyAtIChiaXRfaW5kZXggJSA4KSkKICAgICAgICBibG9vbVtieXRlX2luZGV4XSA9IGJsb29tW2J5dGVfaW5kZXhdIHwgYml0X3ZhbHVlCpRoB12UaB9YNAMAAGRlZiBhZGRfdG9fYmxvb20oYmxvb206IGJ5dGVhcnJheSwgYmxvb21fZW50cnk6IGJ5dGVzKSAtPiBOb25lOgogICAgIyBUT0RPOiBUaGlzIGZ1bmN0aW9uYWxpdHkgaGFzbid0IGJlZW4gdGVzdGVkIHJpZ29yb3VzbHkgeWV0LgogICAgaGFzaCA9IGtlY2NhazI1NihibG9vbV9lbnRyeSkKCiAgICBmb3IgaWR4IGluICgwLCAyLCA0KToKICAgICAgICAjIE9idGFpbiB0aGUgbGVhc3Qgc2lnbmlmaWNhbnQgMTEgYml0cyBmcm9tIHRoZSBwYWlyIG9mIGJ5dGVzCiAgICAgICAgIyAoMTYgYml0cyksIGFuZCBzZXQgdGhpcyBiaXQgaW4gYmxvb20gYnl0ZWFycmF5LgogICAgICAgICMgVGhlIG9idGFpbmVkIGJpdCBpcyAwLWluZGV4ZWQgaW4gdGhlIGJsb29tIGZpbHRlciBmcm9tIHRoZSBsZWFzdAogICAgICAgICMgc2lnbmlmaWNhbnQgYml0IHRvIHRoZSBtb3N0IHNpZ25pZmljYW50IGJpdC4KICAgICAgICBiaXRfdG9fc2V0ID0gVWludC5mcm9tX2JlX2J5dGVzKGhhc2hbaWR4IDogaWR4ICsgMl0pICYgMHgwN0ZGCiAgICAgICAgIyBCZWxvdyBpcyB0aGUgaW5kZXggb2YgdGhlIGJpdCBpbiB0aGUgYnl0ZWFycmF5ICh3aGVyZSAwLWluZGV4ZWQKICAgICAgICAjIGJ5dGUgaXMgdGhlIG1vc3Qgc2lnbmlmaWNhbnQgYnl0ZSkKICAgICAgICBiaXRfaW5kZXggPSAweDA3RkYgLSBiaXRfdG9fc2V0CgogICAgICAgIGJ5dGVfaW5kZXggPSBiaXRfaW5kZXggLy8gOAogICAgICAgIGJpdF92YWx1ZSA9IDEgPDwgKDcgLSAoYml0X2luZGV4ICUgOCkpCiAgICAgICAgYmxvb21bYnl0ZV9pbmRleF0gPSBibG9vbVtieXRlX2luZGV4XSB8IGJpdF92YWx1ZQqUhZSBlH2UKGgFaAZoJGpjBAAAaCVoA2gmaCdoKEsAdWJhaCl9lChoK12UaC1dlGgyXZRoNF2UaDZdlIwGc291cmNllIxQL2hvbWUvcnVubmVyL3dvcmsvZXhlY3V0aW9uLXNwZWNzL2V4ZWN1dGlvbi1zcGVjcy9zcmMvZXRoZXJldW0vZGFvX2ZvcmsvYmxvb20ucHmUjAl4bWw6c3BhY2WUavECAACMBWZvcmNllImMCGxhbmd1YWdllIwGcHl0aG9ulIwO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ICAgICAgYWRkX3RvX2Jsb29tKGJsb29tLCBsb2cuYWRkcmVzcykKICAgICAgICBmb3IgdG9waWMgaW4gbG9nLnRvcGljczoKICAgICAgICAgICAgYWRkX3RvX2Jsb29tKGJsb29tLCB0b3BpYykKCiAgICByZXR1cm4gQmxvb20oYmxvb20pCpRoB12UaB9YjAEAAGRlZiBsb2dzX2Jsb29tKGxvZ3M6IFR1cGxlW0xvZywgLi4uXSkgLT4gQmxvb206CiAgICAjIFRPRE86IExvZ3MgYmxvb20gZnVuY3Rpb25hbGl0eSBoYXNuJ3QgYmVlbiB0ZXN0ZWQgcmlnb3JvdXNseSB5ZXQuIFRoZQogICAgIyByZXF1aXJlZCB0ZXN0IGNhc2VzIG5lZWQgYENBTExgIG9wY29kZSB0byBiZSBpbXBsZW1lbnRlZC4KICAgIGJsb29tOiBieXRlYXJyYXkgPSBieXRlYXJyYXkoYiJceDAwIiAqIDI1NikKCiAgICBmb3IgbG9nIGluIGxvZ3M6CiAgICAgICAgYWRkX3RvX2Jsb29tKGJsb29tLCBsb2cuYWRkcmVzcykKICAgICAgICBmb3IgdG9waWMgaW4gbG9nLnRvcGljczoKICAgICAgICAgICAgYWRkX3RvX2Jsb29tKGJsb29tLCB0b3BpYykKCiAgICByZXR1cm4gQmxvb20oYmxvb20pCpSFlIGUfZQoaAVoBmgkasIFAABoJWgDaCZoJ2goSwB1YmFoKX2UKGgrXZRoLV2UaDJdlGg0XZRoNl2UjAZzb3VyY2WUjFAvaG9tZS9ydW5uZXIvd29yay9leGVjdXRpb24tc3BlY3MvZXhlY3V0aW9uLXNwZWNzL3NyYy9ldGhlcmV1bS9kYW9fZm9yay9ibG9vbS5weZSMCXhtbDpzcGFjZZRq8QIAAIwFZm9yY2WUiYwIbGFuZ3VhZ2WUjAZweXRob26UjA5oaWdobGlnaHRfYXJnc5R9lGp5BAAASwFzjAdsaW5lbm9zlIl1aDhqYQQAAGgmaGtoKEtKaCRqggQAAHViZWgpfZQoaCtdlGpwAQAAYWgtXZRoMl2UjApsb2dzX2Jsb29tlGFoNF2UaDZdlHVoOGgJaCZoa2goSzloJGoAAwAAdWJlaCl9lChoK12Uai8BAABhaC1dlGgyXZSMDm1vZHVsZSBkZXRhaWxzlGFoNF2UaDZdlHVoOGgJaCZoa2goSyNoJGh+dWJlaCl9lChoK12UjBNldGhlcmV1bS1sb2dzLWJsb29tlGFoLV2UaDJdlIwTZXRoZXJldW0gbG9ncyBibG9vbZRhaDRdlGg2XZR1aDhoCWgmaGtoKEsHaCRoC2glaAN1YmVoKX2UKGgrXZQoaHyMF2V0aGVyZXVtLWRhby1mb3JrLWJsb29tlGVoLV2UaDJdlIwXZXRoZXJldW0uZGFvX2ZvcmsuYmxvb22UYWg0XZRoNl2UdWg4aAloJmhraChLAmgkaANoJWgDdWJhaCl9lChoK12UaC1dlGgyXZRoNF2UaDZdlIwGc291cmNllGgndWg4aAGMDmN1cnJlbnRfc291cmNllGgnjAxjdXJyZW50X2xpbmWUSwCMCHNldHRpbmdzlIwRZG9jdXRpbHMuZnJvbnRlbmSUjAZWYWx1ZXOUk5QpgZR9lCiMDHJlcG9ydF9sZXZlbJRLAowKaGFsdF9sZXZlbJRLBIwRZXhpdF9zdGF0dXNfbGV2ZWyUSwWMBWRlYnVnlE6MDndhcm5pbmdfc3RyZWFtlE6MCXRyYWNlYmFja5ROjA9vdXRwdXRfZW5jb2RpbmeUjAV1dGYtOJSMHW91dHB1dF9lbmNvZGluZ19lcnJvcl9oYW5kbGVylIwReG1sY2hhcnJlZnJlcGxhY2WUjA5lcnJvcl9lbmNvZGluZ5SMBXV0Zi04lIwcZXJyb3JfZW5jb2RpbmdfZXJyb3JfaGFuZGxlcpSMEGJhY2tzbGFzaHJlcGxhY2WUjBNyZWNvcmRfZGVwZW5kZW5jaWVzlIwOZG9jdXRpbHMudXRpbHOUjA5EZXBlbmRlbmN5TGlzdJSTlCmBlH2UKIwEbGlzdJRdlIwEZmlsZZROdWKMBmNvbmZpZ5ROjA1kdW1wX3NldHRpbmdzlE6MDmR1bXBfaW50ZXJuYWxzlE6MD2R1bXBfdHJhbnNmb3Jtc5ROjA9kdW1wX3BzZXVkb194bWyUTowQZXhwb3NlX2ludGVybmFsc5ROjA5zdHJpY3RfdmlzaXRvcpROjA9fZGlzYWJsZV9jb25maWeUTowHX3NvdXJjZZROjAxfZGVzdGluYXRpb26UjDlkb2MvZGlmZnMvZGFvX2ZvcmtfdGFuZ2VyaW5lX3doaXN0bGUvYmxvb20vaW5kZXgucGlja2xlNjSUjA1fY29uZmlnX2ZpbGVzlF2UjBFsaW5lX2xlbmd0aF9saW1pdJRNECeMCXRhYl93aWR0aJRLCIwQc3ludGF4X2hpZ2hsaWdodJSMBGxvbmeUjAxzbWFydF9xdW90ZXOUiYwTc21hcnRxdW90ZXNfbG9jYWxlc5ROjB1jaGFyYWN0ZXJfbGV2ZWxfaW5saW5lX21hcmt1cJSJjAZ3cml0ZXKUjAN4bWyUjBljb21wYXJlX3NlY3Rpb25zX2J5X25hbWVzlImMDGR1bXBfcnN0ZGlmZpROjAVfYm90aJR9lChoDk6MCWdlbmVyYXRvcpROjAlkYXRlc3RhbXCUTowLc291cmNlX2xpbmuUTowKc291cmNlX3VybJROjA10b2NfYmFja2xpbmtzlGogAgAAjBJmb290bm90ZV9iYWNrbGlua3OUSwGMDXNlY3RudW1feGZvcm2USwGMDmRvY3RpdGxlX3hmb3JtlEsBjA1kb2NpbmZvX3hmb3JtlEsBjBJzZWN0c3VidGl0bGVfeGZvcm2USwCMDnN0cmlwX2NvbW1lbnRzlE6MDmlucHV0X2VuY29kaW5nlE6MHGlucHV0X2VuY29kaW5nX2Vycm9yX2hhbmRsZXKUjAZzdHJpY3SUjA1sYW5ndWFnZV9jb2RllIwCZW6UjA5wZXBfcmVmZXJlbmNlc5ROjAxwZXBfYmFzZV91cmyUjB9odHRwOi8vd3d3LnB5dGhvbi5vcmcvZGV2L3BlcHMvlIwVcGVwX2ZpbGVfdXJsX3RlbXBsYXRllIwIcGVwLSUwNGSUjA5yZmNfcmVmZXJlbmNlc5ROjAxyZmNfYmFzZV91cmyUjBtodHRwOi8vdG9vbHMuaWV0Zi5vcmcvaHRtbC+UjB10cmltX2Zvb3Rub3RlX3JlZmVyZW5jZV9zcGFjZZROjBZmaWxlX2luc2VydGlvbl9lbmFibGVklEsBjAtyYXdfZW5hYmxlZJRLAYwOYXV0b19pZF9wcmVmaXiUjAJpZJSMCWlkX3ByZWZpeJRoBowbc3RyaXBfZWxlbWVudHNfd2l0aF9jbGFzc2VzlE6MDXN0cmlwX2NsYXNzZXOUTnWMBGJvdGiUfZSMCl9vcHRpb25zVG+UjAVfYm90aJSMC19vbGRfc291cmNllIwcLnRveC9kb2NzL3N0YWdlMF9vdXQvYXV0b2FwaZSMC19uZXdfc291cmNllIwJZG9jL2RpZmZzlGpFBgAAakYGAAB1YowIcmVwb3J0ZXKUTowQaW5kaXJlY3RfdGFyZ2V0c5RdlIwRc3Vic3RpdHV0aW9uX2RlZnOUfZSMEnN1YnN0aXR1dGlvbl9uYW1lc5R9lIwIcmVmbmFtZXOUfZSMBnJlZmlkc5R9lIwHbmFtZWlkc5R9lIwJbmFtZXR5cGVzlH2UaCt9lIwNZm9vdG5vdGVfcmVmc5R9lIwNY2l0YXRpb25fcmVmc5R9lIwNYXV0b2Zvb3Rub3Rlc5RdlIwRYXV0b2Zvb3Rub3RlX3JlZnOUXZSMEHN5bWJvbF9mb290bm90ZXOUXZSMFHN5bWJvbF9mb290bm90ZV9yZWZzlF2UjAlmb290bm90ZXOUXZSMCWNpdGF0aW9uc5RdlIwSYXV0b2Zvb3Rub3RlX3N0YXJ0lEsBjBVzeW1ib2xfZm9vdG5vdGVfc3RhcnSUSwCMCmlkX2NvdW50ZXKUjAtjb2xsZWN0aW9uc5SMB0NvdW50ZXKUk5R9lIWUUpSMDnBhcnNlX21lc3NhZ2VzlF2UjBJ0cmFuc2Zvcm1fbWVzc2FnZXOUXZSMC3RyYW5zZm9ybWVylE6MC2luY2x1ZGVfbG9nlF2UjApkZWNvcmF0aW9ulE5oJWgDdWIu