gASV/QMBAAAAAACMDmRvY3V0aWxzLm5vZGVzlIwIZG9jdW1lbnSUk5QpgZR9lCiMCXJhd3NvdXJjZZSMAJSMCGNoaWxkcmVulF2UaACMB3NlY3Rpb26Uk5QpgZR9lChoBWgGaAddlChoAIwFdGl0bGWUk5QpgZR9lChoBYwoOm1vZDpgZXRoZXJldW0uYnl6YW50aXVtLnZtLmludGVycHJldGVyYJRoB12UKGgAjAlyZWZlcmVuY2WUk5QpgZR9lChoBWgGaAddlGgAjAdsaXRlcmFslJOUKYGUfZQoaAVoEmgHXZRoAIwEVGV4dJSTlIwhZXRoZXJldW0uYnl6YW50aXVtLnZtLmludGVycHJldGVylIWUgZR9lChoBWgGjAZwYXJlbnSUaBuMCV9kb2N1bWVudJRoA4wGc291cmNllIwpLnRveC9kb2NzL3N0YWdlMF9vdXQvYXV0b2FwaSA9PiBkb2MvZGlmZnOUjARsaW5llEsAdWJhjAphdHRyaWJ1dGVzlH2UKIwDaWRzlF2UjAdjbGFzc2VzlF2UKIwEeHJlZpSMAnB5lIwGcHktbW9klGWMBW5hbWVzlF2UjAhkdXBuYW1lc5RdlIwIYmFja3JlZnOUXZR1jAd0YWduYW1llGgZaCZOaChOaCRoFnViYWgpfZQoaCtdlGgtXZSMD2NoYW5nZS1yZXBsYWNlZJRhaDJdlGg0XZRoNl2UjAhpbnRlcm5hbJSIjAVyZWZpZJSMKG1vZHVsZS1ldGhlcmV1bS5ieXphbnRpdW0udm0uaW50ZXJwcmV0ZXKUjAhyZWZ0aXRsZZSMIWV0aGVyZXVtLmJ5emFudGl1bS52bS5pbnRlcnByZXRlcpR1aDhoFGgmaCdoKEsAaCRoEGglaAN1YmgVKYGUfZQoaAVoBmgHXZRoGimBlH2UKGgFjC06bW9kOmBldGhlcmV1bS5jb25zdGFudGlub3BsZS52bS5pbnRlcnByZXRlcmCUaAddlGgfjCZldGhlcmV1bS5jb25zdGFudGlub3BsZS52bS5pbnRlcnByZXRlcpSFlIGUfZQoaAVoBmgkaEhoJWgDaCZoJ2goSwB1YmFoKX2UKGgrXZRoLV2UKIwEeHJlZpSMAnB5lIwGcHktbW9klGVoMl2UaDRdlGg2XZR1aDhoGWgmTmgoTmgkaEV1YmFoKX2UKGgrXZRoLV2UjBJjaGFuZ2UtcmVwbGFjZW1lbnSUYWgyXZRoNF2UaDZdlIwIaW50ZXJuYWyUiIwFcmVmaWSUjC1tb2R1bGUtZXRoZXJldW0uY29uc3RhbnRpbm9wbGUudm0uaW50ZXJwcmV0ZXKUjAhyZWZ0aXRsZZSMJmV0aGVyZXVtLmNvbnN0YW50aW5vcGxlLnZtLmludGVycHJldGVylHVoOGgUaCZoJ2goSwBoJGgQaCVoA3ViZWgpfZQoaCtdlGgtXZRoMl2UaDRdlGg2XZR1aDhoDmgmjGkvaG9tZS9ydW5uZXIvd29yay9leGVjdXRpb24tc3BlY3MvZXhlY3V0aW9uLXNwZWNzL2RvYy9hdXRvYXBpL2V0aGVyZXVtL2J5emFudGl1bS92bS9pbnRlcnByZXRlci9pbmRleC5yc3SUaChLAmgkaAtoJWgDdWKMD3NwaGlueC5hZGRub2Rlc5SMBWluZGV4lJOUKYGUfZQoaAVoBmgHXZRoKX2UKGgrXZRoLV2UaDJdlGg0XZRoNl2UjAdlbnRyaWVzlF2UKIwEcGFpcpSMKW1vZHVsZTsgZXRoZXJldW0uYnl6YW50aXVtLnZtLmludGVycHJldGVylIwobW9kdWxlLWV0aGVyZXVtLmJ5emFudGl1bS52bS5pbnRlcnByZXRlcpRoBk50lGF1aDhobWgmaGtoKEsFaCRoC2glaAN1YmgKKYGUfZQoaAVoBmgHXZQoaA8pgZR9lChoBYwqRXRoZXJldW0gVmlydHVhbCBNYWNoaW5lIChFVk0pIEludGVycHJldGVylGgHXZRoH4wqRXRoZXJldW0gVmlydHVhbCBNYWNoaW5lIChFVk0pIEludGVycHJldGVylIWUgZR9lChoBWgGaCRogWglaANoJmgnaChLAHViYWgpfZQoaCtdlGgtXZRoMl2UaDRdlGg2XZR1aDhoDmgmaGtoKEsHaCRofmglaAN1YmgAjAV0b3BpY5STlCmBlH2UKGgFaAZoB12UKGgPKYGUfZQoaAWMEVRhYmxlIG9mIENvbnRlbnRzlGgHXZRoH4wRVGFibGUgb2YgQ29udGVudHOUhZSBlH2UKGgFaAZoJGiUaCVoA2gmaCdoKEsAdWJhaCl9lChoK12UaC1dlGgyXZRoNF2UaDZdlHVoOGgOaCZoa2goSwtoJGiRaCVo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BmgHXZQoaA8pgZR9lChoBYwJRnVuY3Rpb25zlGgHXZRoH4wJRnVuY3Rpb25zlIWUgZR9lChoBWgGaCRqMwQAAGglaANoJmgnaChLAHViYWgpfZQoaCtdlGgtXZRoMl2UaDRdlGg2XZR1aDhoDmgmaGtoKEsgaCRqMAQAAGglaAN1Ymp7AwAAKYGUfZQoaAVoBmgHXZRoKX2UKGgrXZRoLV2UaDJdlGg0XZRoNl2UjARzcGVjlGqGAwAAdWg4anoDAABoJox6L2hvbWUvcnVubmVyL3dvcmsvZXhlY3V0aW9uLXNwZWNzL2V4ZWN1dGlvbi1zcGVjcy9kb2MvYXV0b2FwaS9ldGhlcmV1bS9ieXphbnRpdW0vdm0vaW50ZXJwcmV0ZXIvaW5kZXgucnN0OjQ2OjxhdXRvc3VtbWFyeT6UaChLAGgkajAEAABoJWgDdWJqigMAACmBlH2UKGgFWCYCAAAKCgoKcHJvY2Vzc19tZXNzYWdlX2NhbGwKCklmIG1lc3NhZ2UuY3VycmVudCBpcyBlbXB0eSB0aGVuIGl0IGNyZWF0ZXMgYSBzbWFydCBjb250cmFjdAoKcHJvY2Vzc19jcmVhdGVfbWVzc2FnZQoKRXhlY3V0ZXMgYSBjYWxsIHRvIGNyZWF0ZSBhIHNtYXJ0IGNvbnRyYWN0LgoKcHJvY2Vzc19tZXNzYWdlCgpFeGVjdXRlcyBhIGNhbGwgdG8gY3JlYXRlIGEgc21hcnQgY29udHJhY3QuCgpleGVjdXRlX2NvZGUKCkV4ZWN1dGVzIGJ5dGVjb2RlIHByZXNlbnQgaW4gdGhlIG1lc3NhZ2UuCgpjb2xsZWN0X3RvdWNoZWRfYWNjb3VudHMKCkNvbGxlY3QgYWxsIG9mIHRoZSBhY2NvdW50cyB0aGF0IG1heSBuZWVkIHRvIGJlIGRlbGV0ZWQgYmFzZWQgb24KCmNvbGxlY3RfYWNjb3VudHNfdG9fZGVsZXRlCgpDb2xsZWN0cyBhbGwgdGhlIGFjY291bnRzIHRoYXQgd2VyZSBtYXJrZWQgZm9yIGRlbGV0aW9uIGJ5IHRoZQoKY2FsY3VsYXRlX2dhc19yZWZ1bmQKCkFkZHMgdXAgdGhlIGdhcyB0aGF0IHdhcyByZWZ1bmRlZCBpbiBlYWNoIGV4ZWN1dGlvbiBmcmFtZSBkdXJp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Z2WUhZSBlH2UKGgFaAZoJGrgBAAAaCVoA2gmaCdoKEsAdWJhaCl9lChoK12UaC1dlChoL4wCcHmUjAZweS1vYmqUZWgyXZRoNF2UaDZdlHVoOGgZaCZOaChOaCRq3QQAAHViYWgpfZQoaCtdlGgtXZRoMl2UaDRdlGg2XZSMCGludGVybmFslIiMBXJlZmlklIw4ZXRoZXJldW0uYnl6YW50aXVtLnZtLmludGVycHJldGVyLnByb2Nlc3NfY3JlYXRlX21lc3NhZ2WUjAhyZWZ0aXRsZZSMOGV0aGVyZXVtLmJ5emFudGl1bS52bS5pbnRlcnByZXRlci5wcm9jZXNzX2NyZWF0ZV9tZXNzYWdllHVoOGgUaCZOaChOaCRq2QQAAHViYWgpfZQoaCtdlGgtXZRoMl2UaDRdlGg2XZR1aDhorGgmjHovaG9tZS9ydW5uZXIvd29yay9leGVjdXRpb24tc3BlY3MvZXhlY3V0aW9uLXNwZWNzL2RvYy9hdXRvYXBpL2V0aGVyZXVtL2J5emFudGl1bS92bS9pbnRlcnByZXRlci9pbmRleC5yc3Q6NDY6PGF1dG9zdW1tYXJ5PpRoKEsBaCRq1gQAAHViYWgpfZQoaCtdlGgtXZRoMl2UaDRdlGg2XZR1aDhquQMAAGgmTmgoTmgkatMEAAB1Ymq6AwAAKYGUfZQoaAVoBmgHXZRorSmBlH2UKGgFjCtFeGVjdXRlcyBhIGNhbGwgdG8gY3JlYXRlIGEgc21hcnQgY29udHJhY3QulGgHXZRoH4wrRXhlY3V0ZXMgYSBjYWxsIHRvIGNyZWF0ZSBhIHNtYXJ0IGNvbnRyYWN0LpSFlIGUfZQoaAVoBmgkagoFAABoJWgDaCZoJ2goSwB1YmFoKX2UKGgrXZRoLV2UaDJdlGg0XZRoNl2UdWg4aKxoJox6L2hvbWUvcnVubmVyL3dvcmsvZXhlY3V0aW9uLXNwZWNzL2V4ZWN1dGlvbi1zcGVjcy9kb2MvYXV0b2FwaS9ldGhlcmV1bS9ieXphbnRpdW0vdm0vaW50ZXJwcmV0ZXIvaW5kZXgucnN0OjQ2OjxhdXRvc3VtbWFyeT6UaChLAWgkagcFAAB1YmFoKX2UKGgrXZRoLV2UaDJdlGg0XZRoNl2UdWg4arkDAABoJk5oKE5oJGrTBAAAdWJlaCl9lChoK12UaC1dlGgyXZRoNF2UaDZdlHVoOGq0AwAAaCZoJ2goSwBoJGpqBAAAaCVoA3ViarUDAAApgZR9lChoBWgGaAddlChqugMAACmBlH2UKGgFaAZoB12UaK0pgZR9lChoBYxfOm9iajpgcHJvY2Vzc19jcmVhdGUyX21lc3NhZ2UgPGV0aGVyZXVtLmNvbnN0YW50aW5vcGxlLnZtLmludGVycHJldGVyLnByb2Nlc3NfY3JlYXRlMl9tZXNzYWdlPmCUaAddlGgVKYGUfZQoaAVoBmgHXZRoGimBlH2UKGgFai0FAABoB12UaB+MF3Byb2Nlc3NfY3JlYXRlMl9tZXNzYWdllIWUgZR9lChoBWgGaCRqMgUAAGglaANoJmgnaChLAHViYWgpfZQoaCtdlGgtXZQoaFOMAnB5lIwGcHktb2JqlGVoMl2UaDRdlGg2XZR1aDhoGWgmTmgoTmgkai8FAAB1YmFoKX2UKGgrXZRoLV2UaDJdlGg0XZRoNl2UjAhpbnRlcm5hbJSIjAVyZWZpZJSMPmV0aGVyZXVtLmNvbnN0YW50aW5vcGxlLnZtLmludGVycHJldGVyLnByb2Nlc3NfY3JlYXRlMl9tZXNzYWdllIwIcmVmdGl0bGWUjD5ldGhlcmV1bS5jb25zdGFudGlub3BsZS52bS5pbnRlcnByZXRlci5wcm9jZXNzX2NyZWF0ZTJfbWVzc2FnZZR1aDhoFGgmTmgoTmgkaisFAAB1YmFoKX2UKGgrXZRoLV2UaDJdlGg0XZRoNl2UdWg4aKxoJox/L2hvbWUvcnVubmVyL3dvcmsvZXhlY3V0aW9uLXNwZWNzL2V4ZWN1dGlvbi1zcGVjcy9kb2MvYXV0b2FwaS9ldGhlcmV1bS9jb25zdGFudGlub3BsZS92bS9pbnRlcnByZXRlci9pbmRleC5yc3Q6NDc6PGF1dG9zdW1tYXJ5PpRoKEsBaCRqKAUAAHViYWgpfZQoaCtdlGgtXZRoMl2UaDRdlGg2XZR1aDhquQMAAGgmTmgoTmgkaiUFAAB1Ymq6AwAAKYGUfZQoaAVoBmgHXZRorSmBlH2UKGgFjD5FeGVjdXRlcyBhIGNhbGwgdG8gY3JlYXRlIGEgc21hcnQgY29udHJhY3QgdmlhIENSRUFURTIgb3Bjb2RlLpRoB12UaB+MPkV4ZWN1dGVz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bnRlcm5hbJSIjAVyZWZpZJSMLmV0aGVyZXVtLmJ5emFudGl1bS52bS5pbnRlcnByZXRlci5leGVjdXRlX2NvZGWUjAhyZWZ0aXRsZZSMLmV0aGVyZXVtLmJ5emFudGl1bS52bS5pbnRlcnByZXRlci5leGVjdXRlX2NvZGWUdWg4aBRoJk5oKE5oJGrQBQAAdWJhaCl9lChoK12UaC1dlGgyXZRoNF2UaDZdlHVoOGisaCaMei9ob21lL3J1bm5lci93b3JrL2V4ZWN1dGlvbi1zcGVjcy9leGVjdXRpb24tc3BlY3MvZG9jL2F1dG9hcGkvZXRoZXJldW0vYnl6YW50aXVtL3ZtL2ludGVycHJldGVyL2luZGV4LnJzdDo0Njo8YXV0b3N1bW1hcnk+lGgoSwFoJGrNBQAAdWJhaCl9lChoK12UaC1dlGgyXZRoNF2UaDZdlHVoOGq5AwAAaCZOaChOaCRqygUAAHViaroDAAApgZR9lChoBWgGaAddlGitKYGUfZQoaAWMK0V4ZWN1dGVzIGJ5dGVjb2RlIHByZXNlbnQgaW4gdGhlIGBtZXNzYWdlYC6UaAddlChoH4whRXhlY3V0ZXMgYnl0ZWNvZGUgcHJlc2VudCBpbiB0aGUglIWUgZR9lChoBWgGaCRqAQYAAGglaANoJmgnaChLAHViaq0EAAApgZR9lChoBYwJYG1lc3NhZ2VglGgHXZRoH4wHbWVzc2FnZZSFlIGUfZQoaAVoBmgkagkGAABoJWgDaCZoJ2goSwB1YmFoKX2UKGgrXZRoLV2UaDJdlGg0XZRoNl2UdWg4aqwEAABoJk5oKE5oJGoBBgAAdWJoH4wBLpSFlIGUfZQoaAVoBmgkagEGAABoJWgDaCZoJ2goSwB1YmVoKX2UKGgrXZRoLV2UaDJdlGg0XZRoNl2UdWg4aKxoJox6L2hvbWUvcnVubmVyL3dvcmsvZXhlY3V0aW9uLXNwZWNzL2V4ZWN1dGlvbi1zcGVjcy9kb2MvYXV0b2FwaS9ldGhlcmV1bS9ieXphbnRpdW0vdm0vaW50ZXJwcmV0ZXIvaW5kZXgucnN0OjQ2OjxhdXRvc3VtbWFyeT6UaChLAWgkav4FAAB1YmFoKX2UKGgrXZRoLV2UaDJdlGg0XZRoNl2UdWg4arkDAABoJk5oKE5oJGrKBQAAdWJlaCl9lChoK12UaC1dlGgyXZRoNF2UaDZdlHVoOGq0AwAAaCZoJ2goSwBoJGpqBAAAaCVoA3ViarUDAAApgZR9lChoBWgGaAddlChqugMAACmBlH2UKGgFaAZoB12UaK0pgZR9lChoBYxcOm9iajpgY29sbGVjdF90b3VjaGVkX2FjY291bnRzIDxldGhlcmV1bS5ieXphbnRpdW0udm0uaW50ZXJwcmV0ZXIuY29sbGVjdF90b3VjaGVkX2FjY291bnRzPmCUaAddlGgVKYGUfZQoaAVoBmgHXZRoGimBlH2UKGgFajYGAABoB12UaB+MGGNvbGxlY3RfdG91Y2hlZF9hY2NvdW50c5SFlIGUfZQoaAVoBmgkajsGAABoJWgDaCZoJ2goSwB1YmFoKX2UKGgrXZRoLV2UKGgvjAJweZSMBnB5LW9iapRlaDJdlGg0XZRoNl2UdWg4aBloJk5oKE5oJGo4BgAAdWJhaCl9lChoK12UaC1dlGgyXZRoNF2UaDZdlIwIaW50ZXJuYWyUiIwFcmVmaWSUjDpldGhlcmV1bS5ieXphbnRpdW0udm0uaW50ZXJwcmV0ZXIuY29sbGVjdF90b3VjaGVkX2FjY291bnRzlIwIcmVmdGl0bGWUjDpldGhlcmV1bS5ieXphbnRpdW0udm0uaW50ZXJwcmV0ZXIuY29sbGVjdF90b3VjaGVkX2FjY291bnRzlHVoOGgUaCZOaChOaCRqNAYAAHViYWgpfZQoaCtdlGgtXZRoMl2UaDRdlGg2XZR1aDhorGgmjHovaG9tZS9ydW5uZXIvd29yay9leGVjdXRpb24tc3BlY3MvZXhlY3V0aW9uLXNwZWNzL2RvYy9hdXRvYXBpL2V0aGVyZXVtL2J5emFudGl1bS92bS9pbnRlcnByZXRlci9pbmRleC5yc3Q6NDY6PGF1dG9zdW1tYXJ5PpRoKEsBaCRqMQYAAHViYWgpfZQoaCtdlGgtXZRoMl2UaDRdlGg2XZR1aDhquQMAAGgmTmgoTmgkai4GAAB1Ymq6AwAAKYGUfZQoaAVoBmgHXZRorSmBlH2UKGgFjEJDb2xsZWN0IGFsbCBvZiB0aGUgYWNjb3VudHMgdGhhdCAqbWF5KiBuZWVkIHRvIGJlIGRlbGV0ZWQgYmFzZWQgb26UaAddlChoH4whQ29sbGVjdCBhbGwgb2YgdGhlIGFjY291bnRzIHRoYXQglIWUgZR9lChoBWgGaCRqZQYAAGglaANoJmgnaChLAHViaACMCGVtcGhhc2lzlJOUKYGUfZQoaAWMBSptYXkqlGgHXZRoH4wDbWF5lIWUgZR9lChoBWgGaCRqbwYAAGglaANoJmgnaChLAHViYWgpfZQoaCtdlGgtXZRoMl2UaDRdlGg2XZR1aDhqbQYAAGgmTmgoTmgkamUGAAB1YmgfjBwgbmVlZCB0byBiZSBkZWxldGVkIGJhc2VkIG9ulIWUgZR9lChoBWgGaCRqZQYAAGglaANoJmgnaChLAHViZWgpfZQoaCtdlGgtXZRoMl2UaDRdlGg2XZR1aDhorGgmjHovaG9tZS9ydW5uZXIvd29yay9leGVjdXRpb24tc3BlY3MvZXhlY3V0aW9uLXNwZWNzL2RvYy9hdXRvYXBpL2V0aGVyZXVtL2J5emFudGl1bS92bS9pbnRlcnByZXRlci9pbmRleC5yc3Q6NDY6PGF1dG9zdW1tYXJ5PpRoKEsBaCRqYgYAAHViYWgpfZQoaCtdlGgtXZRoMl2UaDRdlGg2XZR1aDhquQMAAGgmTmgoTmgkai4GAAB1YmVoKX2UKGgrXZRoLV2UaDJdlGg0XZRoNl2UdWg4arQDAABoJmgnaChLAGgkamoEAABoJWgDdWJqtQMAACmBlH2UKGgFaAZoB12UKGq6AwAAKYGUfZQoaAVoBmgHXZRorSmBlH2UKGgFjGA6b2JqOmBjb2xsZWN0X2FjY291bnRzX3RvX2RlbGV0ZSA8ZXRoZXJldW0uYnl6YW50aXVtLnZtLmludGVycHJldGVyLmNvbGxlY3RfYWNjb3VudHNfdG9fZGVsZXRlPmCUaAddlGgVKYGUfZQoaAVoBmgHXZRoGimBlH2UKGgFapwGAABoB12UaB+MGmNvbGxlY3RfYWNjb3VudHNfdG9fZGVsZXRllIWUgZR9lChoBWgGaCRqoQYAAGglaANoJmgnaChLAHViYWgpfZQoaCtdlGgtXZQoaC+MAnB5lIwGcHktb2JqlGVoMl2UaDRdlGg2XZR1aDhoGWgmTmgoTmgkap4GAAB1YmFoKX2UKGgrXZRoLV2UaDJdlGg0XZRoNl2UjAhpbnRlcm5hbJSIjAVyZWZpZJSMPGV0aGVyZXVtLmJ5emFudGl1bS52bS5pbnRlcnByZXRlci5jb2xsZWN0X2FjY291bnRzX3RvX2RlbGV0ZZSMCHJlZnRpdGxllIw8ZXRoZXJldW0uYnl6YW50aXVtLnZtLmludGVycHJldGVyLmNvbGxlY3RfYWNjb3VudHNfdG9fZGVsZXRllHVoOGgUaCZOaChOaCRqmgYAAHViYWgpfZQoaCtdlGgtXZRoMl2UaDRdlGg2XZR1aDhorGgmjHovaG9tZS9ydW5uZXIvd29yay9leGVjdXRpb24tc3BlY3MvZXhlY3V0aW9uLXNwZWNzL2RvYy9hdXRvYXBpL2V0aGVyZXVtL2J5emFudGl1bS92bS9pbnRlcnByZXRlci9pbmRleC5yc3Q6NDY6PGF1dG9zdW1tYXJ5PpRoKEsBaCRqlwYAAHViYWgpfZQoaCtdlGgtXZRoMl2UaDRdlGg2XZR1aDhquQMAAGgmTmgoTmgkapQGAAB1Ymq6AwAAKYGUfZQoaAVoBmgHXZRorSmBlH2UKGgFjD5Db2xsZWN0cyBhbGwgdGhlIGFjY291bnRzIHRoYXQgd2VyZSBtYXJrZWQgZm9yIGRlbGV0aW9uIGJ5IHRoZZRoB12UaB+MPkNvbGxlY3RzIGFsbCB0aGUgYWNjb3VudHMgdGhhdCB3ZXJlIG1hcmtlZCBmb3IgZGVsZXRpb24gYnkgdGhllIWUgZR9lChoBWgGaCRqywYAAGglaANoJmgnaChLAHViYWgpfZQoaCtdlGgtXZRoMl2UaDRdlGg2XZR1aDhorGgmjHovaG9tZS9ydW5uZXIvd29yay9leGVjdXRpb24tc3BlY3MvZXhlY3V0aW9uLXNwZWNzL2RvYy9hdXRvYXBpL2V0aGVyZXVtL2J5emFudGl1bS92bS9pbnRlcnByZXRlci9pbmRleC5yc3Q6NDY6PGF1dG9zdW1tYXJ5PpRoKEsBaCRqyAYAAHViYWgpfZQoaCtdlGgtXZRoMl2UaDRdlGg2XZR1aDhquQMAAGgmTmgoTmgkapQGAAB1YmVoKX2UKGgrXZRoLV2UaDJdlGg0XZRoNl2UdWg4arQDAABoJmgnaChLAGgkamoEAABoJWgDdWJqtQMAACmBlH2UKGgFaAZoB12UKGq6AwAAKYGUfZQoaAVoBmgHXZRorSmBlH2UKGgFjFQ6b2JqOmBjYWxjdWxhdGVfZ2FzX3JlZnVuZCA8ZXRoZXJldW0uYnl6YW50aXVtLnZtLmludGVycHJldGVyLmNhbGN1bGF0ZV9nYXNfcmVmdW5kPmCUaAddlGgVKYGUfZQoaAVoBmgHXZRoGimBlH2UKGgFau4GAABoB12UaB+MFGNhbGN1bGF0ZV9nYXNfcmVmdW5klIWUgZR9lChoBWgGaCRq8wYAAGglaANoJmgnaChLAHViYWgpfZQoaCtdlGgtXZQoaC+MAnB5lIwGcHktb2JqlGVoMl2UaDRdlGg2XZR1aDhoGWgmTmgoTmgkavAGAAB1YmFoKX2UKGgrXZRoLV2UaDJdlGg0XZRoNl2UjAhpbnRlcm5hbJSIjAVyZWZpZJSMNmV0aGVyZXVtLmJ5emFudGl1bS52bS5pbnRlcnByZXRlci5jYWxjdWxhdGVfZ2FzX3JlZnVuZJSMCHJlZnRpdGxllIw2ZXRoZXJldW0uYnl6YW50aXVtLnZtLmludGVycHJldGVyLmNhbGN1bGF0ZV9nYXNfcmVmdW5klHVoOGgUaCZOaChOaCRq7AYAAHViYWgpfZQoaCtdlGgtXZRoMl2UaDRdlGg2XZR1aDhorGgmjHovaG9tZS9ydW5uZXIvd29yay9leGVjdXRpb24tc3BlY3MvZXhlY3V0aW9uLXNwZWNzL2RvYy9hdXRvYXBpL2V0aGVyZXVtL2J5emFudGl1bS92bS9pbnRlcnByZXRlci9pbmRleC5yc3Q6NDY6PGF1dG9zdW1tYXJ5PpRoKEsBaCRq6QYAAHViYWgpfZQoaCtdlGgtXZRoMl2UaDRdlGg2XZR1aDhquQMAAGgmTmgoTmgkauYGAAB1Ymq6AwAAKYGUfZQoaAVoBmgHXZRorSmBlH2UKGgFjERBZGRzIHVwIHRoZSBnYXMgdGhhdCB3YXMgcmVmdW5kZWQgaW4gZWFjaCBleGVjdXRpb24gZnJhbWUgZHVyaW5nIHRoZZRoB12UaB+MREFkZHMgdXAgdGhlIGdhcyB0aGF0IHdhcyByZWZ1bmRlZCBpbiBlYWNoIGV4ZWN1dGlvbiBmcmFtZSBkdXJpbmcgdGhllIWUgZR9lChoBWgGaCRqHQcAAGglaANoJmgnaChLAHViYWgpfZQoaCtdlGgtXZRoMl2UaDRdlGg2XZR1aDhorGgmaksEAABoKEsBaCRqGgcAAHViYWgpfZQoaCtd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LT4gTWVzc2FnZUNhbGxPdXRwdXQ6CiAgICBpZiBtZXNzYWdlLnRhcmdldCA9PSBCeXRlczAoYiIiKToKICAgICAgICBpc19jb2xsaXNpb24gPSBhY2NvdW50X2hhc19jb2RlX29yX25vbmNlKAogICAgICAgICAgICBlbnYuc3RhdGUsIG1lc3NhZ2UuY3VycmVudF90YXJnZXQKICAgICAgICApCiAgICAgICAgaWYgaXNfY29sbGlzaW9uOgogICAgICAgICAgICByZXR1cm4gTWVzc2FnZUNhbGxPdXRwdXQoCiAgICAgICAgICAgICAgICBVMjU2KDApLCBVMjU2KDApLCB0dXBsZSgpLCBzZXQoKSwgc2V0KCksIFRydWUKICAgICAgICAgICAgKQogICAgICAgIGVsc2U6CiAgICAgICAgICAgIGV2bSA9IHByb2Nlc3NfY3JlYXRlX21lc3NhZ2UobWVzc2FnZSwgZW52KQogICAgZWxzZToKICAgICAgICBldm0gPSBwcm9jZXNzX21lc3NhZ2UobWVzc2FnZSwgZW52KQoKICAgIGFjY291bnRzX3RvX2RlbGV0ZSA9IGNvbGxlY3RfYWNjb3VudHNfdG9fZGVsZXRlKGV2bSkKICAgIHJlZnVuZF9jb3VudGVyID0gKAogICAgICAgIGNhbGN1bGF0ZV9nYXNfcmVmdW5kKGV2bSkKICAgICAgICArIGxlbihhY2NvdW50c190b19kZWxldGUpICogUkVGVU5EX1NFTEZfREVTVFJVQ1QKICAgICkKCiAgICByZXR1cm4gTWVzc2FnZUNhbGxPdXRwdXQoCiAgICAgICAgZ2FzX2xlZnQ9ZXZtLmdhc19sZWZ0LAogICAgICAgIHJlZnVuZF9jb3VudGVyPXJlZnVuZF9jb3VudGVyLAogICAgICAgIGxvZ3M9ZXZtLmxvZ3MgaWYgbm90IGV2bS5oYXNfZXJyZWQgZWxzZSAoKSwKICAgICAgICBhY2NvdW50c190b19kZWxldGU9YWNjb3VudHNfdG9fZGVsZXRlLAogICAgICAgIHRvdWNoZWRfYWNjb3VudHM9Y29sbGVjdF90b3VjaGVkX2FjY291bnRzKGV2bSksCiAgICAgICAgaGFzX2VycmVkPWV2bS5oYXNfZXJyZWQsCiAgICApCpRoB12UaB9YyAMAAGRlZiBwcm9jZXNzX21lc3NhZ2VfY2FsbCgKICAgIG1lc3NhZ2U6IE1lc3NhZ2UsIGVudjogRW52aXJvbm1lbnQKKSAtPiBNZXNzYWdlQ2FsbE91dHB1dDoKICAgIGlmIG1lc3NhZ2UudGFyZ2V0ID09IEJ5dGVzMChiIiIpOgogICAgICAgIGlzX2NvbGxpc2lvbiA9IGFjY291bnRfaGFzX2NvZGVfb3Jfbm9uY2UoCiAgICAgICAgICAgIGVudi5zdGF0ZSwgbWVzc2FnZS5jdXJyZW50X3RhcmdldAogICAgICAgICkKICAgICAgICBpZiBpc19jb2xsaXNpb246CiAgICAgICAgICAgIHJldHVybiBNZXNzYWdlQ2FsbE91dHB1dCgKICAgICAgICAgICAgICAgIFUyNTYoMCksIFUyNTYoMCksIHR1cGxlKCksIHNldCgpLCBzZXQoKSwgVHJ1ZQogICAgICAgICAgICApCiAgICAgICAgZWxzZToKICAgICAgICAgICAgZXZtID0gcHJvY2Vzc19jcmVhdGVfbWVzc2FnZShtZXNzYWdlLCBlbnYpCiAgICBlbHNlOgogICAgICAgIGV2bSA9IHByb2Nlc3NfbWVzc2FnZShtZXNzYWdlLCBlbnYpCgogICAgYWNjb3VudHNfdG9fZGVsZXRlID0gY29sbGVjdF9hY2NvdW50c190b19kZWxldGUoZXZtKQogICAgcmVmdW5kX2NvdW50ZXIgPSAoCiAgICAgICAgY2FsY3VsYXRlX2dhc19yZWZ1bmQoZXZtKQogICAgICAgICsgbGVuKGFjY291bnRzX3RvX2RlbGV0ZSkgKiBSRUZVTkRfU0VMRl9ERVNUUlVDVAogICAgKQoKICAgIHJldHVybiBNZXNzYWdlQ2FsbE91dHB1dCgKICAgICAgICBnYXNfbGVmdD1ldm0uZ2FzX2xlZnQsCiAgICAgICAgcmVmdW5kX2NvdW50ZXI9cmVmdW5kX2NvdW50ZXIsCiAgICAgICAgbG9ncz1ldm0ubG9ncyBpZiBub3QgZXZtLmhhc19lcnJlZCBlbHNlICgpLAogICAgICAgIGFjY291bnRzX3RvX2RlbGV0ZT1hY2NvdW50c190b19kZWxldGUsCiAgICAgICAgdG91Y2hl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ZXNzYWdlOiBNZXNzYWdlLCBlbnY6IEVudmlyb25tZW50KSAtPiBFdm06CiAgICAjIHRha2Ugc25hcHNob3Qgb2Ygc3RhdGUgYmVmb3JlIHByb2Nlc3NpbmcgdGhlIG1lc3NhZ2UKICAgIGJlZ2luX3RyYW5zYWN0aW9uKGVudi5zdGF0ZSkKCiAgICBpbmNyZW1lbnRfbm9uY2UoZW52LnN0YXRlLCBtZXNzYWdlLmN1cnJlbnRfdGFyZ2V0KQogICAgZXZtID0gcHJvY2Vzc19tZXNzYWdlKG1lc3NhZ2UsIGVudikKICAgIGlmIG5vdCBldm0uaGFzX2VycmVkOgogICAgICAgIGNvbnRyYWN0X2NvZGUgPSBldm0ub3V0cHV0CiAgICAgICAgY29udHJhY3RfY29kZV9nYXMgPSBsZW4oY29udHJhY3RfY29kZSkgKiBHQVNfQ09ERV9ERVBPU0lUCiAgICAgICAgdHJ5OgogICAgICAgICAgICBldm0uZ2FzX2xlZnQgPSBzdWJ0cmFjdF9nYXMoZXZtLmdhc19sZWZ0LCBjb250cmFjdF9jb2RlX2dhcykKICAgICAgICAgICAgZW5zdXJlKGxlbihjb250cmFjdF9jb2RlKSA8PSBNQVhfQ09ERV9TSVpFLCBPdXRPZkdhc0Vycm9yKQogICAgICAgIGV4Y2VwdCBFeGNlcHRpb25hbEhhbHQ6CiAgICAgICAgICAgIHJvbGxiYWNrX3RyYW5zYWN0aW9uKGVudi5zdGF0ZSkKICAgICAgICAgICAgZXZtLmdhc19sZWZ0ID0gVTI1NigwKQogICAgICAgICAgICBldm0ub3V0cHV0ID0gYiIiCiAgICAgICAgICAgIGV2bS5oYXNfZXJyZWQgPSBUcnVlCiAgICAgICAgZWxzZToKICAgICAgICAgICAgc2V0X2NvZGUoZW52LnN0YXRlLCBtZXNzYWdlLmN1cnJlbnRfdGFyZ2V0LCBjb250cmFjdF9jb2RlKQogICAgICAgICAgICBjb21taXRfdHJhbnNhY3Rpb24oZW52LnN0YXRlKQogICAgZWxzZToKICAgICAgICByb2xsYmFja190cmFuc2FjdGlvbihlbnYuc3RhdGUpCiAgICByZXR1cm4gZXZtCpRoB12UaB9YjAMAAGRlZiBwcm9jZXNzX2NyZWF0ZV9tZXNzYWdlKG1lc3NhZ2U6IE1lc3NhZ2UsIGVudjogRW52aXJvbm1lbnQpIC0+IEV2bToKICAgICMgdGFrZSBzbmFwc2hvdCBvZiBzdGF0ZSBiZWZvcmUgcHJvY2Vzc2luZyB0aGUgbWVzc2FnZQogICAgYmVnaW5fdHJhbnNhY3Rpb24oZW52LnN0YXRlKQoKICAgIGluY3JlbWVudF9ub25jZShlbnYuc3RhdGUsIG1lc3NhZ2UuY3VycmVudF90YXJnZXQpCiAgICBldm0gPSBwcm9jZXNzX21lc3NhZ2UobWVzc2FnZSwgZW52KQogICAgaWYgbm90IGV2bS5oYXNfZXJyZWQ6CiAgICAgICAgY29udHJhY3RfY29kZSA9IGV2bS5vdXRwdXQKICAgICAgICBjb250cmFjdF9jb2RlX2dhcyA9IGxlbihjb250cmFjdF9jb2RlKSAqIEdBU19DT0RFX0RFUE9TSVQKICAgICAgICB0cnk6CiAgICAgICAgICAgIGV2bS5nYXNfbGVmdCA9IHN1YnRyYWN0X2dhcyhldm0uZ2FzX2xlZnQsIGNvbnRyYWN0X2NvZGVfZ2FzKQogICAgICAgICAgICBlbnN1cmUobGVuKGNvbnRyYWN0X2NvZGUpIDw9IE1BWF9DT0RFX1NJWkUsIE91dE9mR2FzRXJyb3IpCiAgICAgICAgZXhjZXB0IEV4Y2VwdGlvbmFsSGFsdDoKICAgICAgICAgICAgcm9sbGJhY2tfdHJhbnNhY3Rpb24oZW52LnN0YXRlKQogICAgICAgICAgICBldm0uZ2FzX2xlZnQgPSBVMjU2KDApCiAgICAgICAgICAgIGV2bS5vdXRwdXQgPSBiIiIKICAgICAgICAgICAgZXZtLmhhc19lcnJlZCA9IFRydWUKICAgICAgICBlbHNlOgogICAgICAgICAgICBzZXRfY29kZShlbnYuc3RhdGUsIG1lc3NhZ2UuY3VycmVudF90YXJnZXQsIGNvbnRyYWN0X2NvZGUpCiAgICAgICAgICAgIGNvbW1pdF90cmFuc2FjdGlvbihlbnYuc3RhdGUpCiAgICBlbHNlOgogICAgICAgIHJvbGxiYWNrX3RyYW5zYWN0aW9uKGVudi5zdGF0ZSkKICAgIHJldHVybiBldm0K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JGrFEQAAdWJlaCl9lChoK12UaC1dlChqHhIAAIwIZnVuY3Rpb26UZWgyXZRoNF2UaDZdlIwGZG9tYWlulGoeEgAAjAdvYmp0eXBllGpGEwAAjAhkZXNjdHlwZZRqRhMAAIwHbm9pbmRleJSJdWg4at4IAABoJk5oKE5oJGqoEQAAdWJqIwkAACmBlH2UKGgFWI4EAABkZWYgcHJvY2Vzc19jcmVhdGUyX21lc3NhZ2UobWVzc2FnZTogTWVzc2FnZSwgZW52OiBFbnZpcm9ubWVudCkgLT4gRXZtOgogICAgIyB0YWtlIHNuYXBzaG90IG9mIHN0YXRlIGJlZm9yZSBwcm9jZXNzaW5nIHRoZSBtZXNzYWdlCiAgICBiZWdpbl90cmFuc2FjdGlvbihlbnYuc3RhdGUpCgogICAgIyBJdCdzIGV4cGVjdGVkIHRoYXQgdGhlIGNyZWF0aW9uIG9wZXJhdGlvbiB3b3JrcyBvbiBlbXB0eSBzdG9yYWdlLiBIZW5jZQogICAgIyB3ZSBkZWxldGUgdGhlIHN0b3JhZ2UgYW5kIHJlc3RvcmUgdGhlIGFjY291bnQncyBzdGF0ZSBpZiB0aGVyZSBpcyBhbgogICAgIyBlcnJvciBpbiB0aGUgaW5pdGlhbGl6YXRpb24gY29kZSBleGVjdXRpb24uCiAgICBkZXN0cm95X3N0b3JhZ2UoZW52LnN0YXRlLCBtZXNzYWdlLmN1cnJlbnRfdGFyZ2V0KQoKICAgIGluY3JlbWVudF9ub25jZShlbnYuc3RhdGUsIG1lc3NhZ2UuY3VycmVudF90YXJnZXQpCiAgICBldm0gPSBwcm9jZXNzX21lc3NhZ2UobWVzc2FnZSwgZW52KQogICAgaWYgbm90IGV2bS5oYXNfZXJyZWQ6CiAgICAgICAgY29udHJhY3RfY29kZSA9IGV2bS5vdXRwdXQKICAgICAgICBjb250cmFjdF9jb2RlX2dhcyA9IGxlbihjb250cmFjdF9jb2RlKSAqIEdBU19DT0RFX0RFUE9TSVQKICAgICAgICB0cnk6CiAgICAgICAgICAgIGV2bS5nYXNfbGVmdCA9IHN1YnRyYWN0X2dhcyhldm0uZ2FzX2xlZnQsIGNvbnRyYWN0X2NvZGVfZ2FzKQogICAgICAgICAgICBlbnN1cmUobGVuKGNvbnRyYWN0X2NvZGUpIDw9IE1BWF9DT0RFX1NJWkUsIE91dE9mR2FzRXJyb3IpCiAgICAgICAgZXhjZXB0IE91dE9mR2FzRXJyb3I6CiAgICAgICAgICAgIHJvbGxiYWNrX3RyYW5zYWN0aW9uKGVudi5zdGF0ZSkKICAgICAgICAgICAgZXZtLmdhc19sZWZ0ID0gVTI1NigwKQogICAgICAgICAgICBldm0ub3V0cHV0ID0gYiIiCiAgICAgICAgICAgIGV2bS5oYXNfZXJyZWQgPSBUcnVlCiAgICAgICAgZWxzZToKICAgICAgICAgICAgc2V0X2NvZGUoZW52LnN0YXRlLCBtZXNzYWdlLmN1cnJlbnRfdGFyZ2V0LCBjb250cmFjdF9jb2RlKQogICAgICAgICAgICBjb21taXRfdHJhbnNhY3Rpb24oZW52LnN0YXRlKQogICAgZWxzZToKICAgICAgICByb2xsYmFja190cmFuc2FjdGlvbihlbnYuc3RhdGUpCiAgICByZXR1cm4gZXZtCpRoB12UaB9YjgQAAGRlZiBwcm9jZXNzX2NyZWF0ZTJfbWVzc2FnZShtZXNzYWdlOiBNZXNzYWdlLCBlbnY6IEVudmlyb25tZW50KSAtPiBFdm06CiAgICAjIHRha2Ugc25hcHNob3Qgb2Ygc3RhdGUgYmVmb3JlIHByb2Nlc3NpbmcgdGhlIG1lc3NhZ2UKICAgIGJlZ2luX3RyYW5zYWN0aW9uKGVudi5zdGF0ZSkKCiAgICAjIEl0J3MgZXhwZWN0ZWQgdGhhdCB0aGUgY3JlYXRpb24gb3BlcmF0aW9uIHdvcmtzIG9uIGVtcHR5IHN0b3JhZ2UuIEhlbmNlCiAgICAjIHdlIGRlbGV0ZSB0aGUgc3RvcmFnZSBhbmQgcmVzdG9yZSB0aGUgYWNjb3VudCdzIHN0YXRlIGlmIHRoZXJlIGlzIGFuCiAgICAjIGVycm9yIGluIHRoZSBpbml0aWFsaXphdGlvbiBjb2RlIGV4ZWN1dGlvbi4KICAgIGRlc3Ryb3lfc3RvcmFnZShlbnYuc3RhdGUsIG1lc3NhZ2UuY3VycmVudF90YXJnZXQpCgogICAgaW5jcmVtZW50X25vbmNlKGVudi5zdGF0ZSwgbWVzc2FnZS5jdXJyZW50X3RhcmdldCkKICAgIGV2bSA9IHByb2Nlc3NfbWVzc2FnZShtZXNzYWdlLCBlbnYpCiAgICBpZiBub3QgZXZtLmhhc19lcnJlZDoKICAgICAgICBjb250cmFjdF9jb2RlID0gZXZtLm91dHB1dAogICAgICAgIGNvbnRyYWN0X2NvZGVfZ2FzID0gbGVuKGNvbnRyYWN0X2NvZGUpICogR0FTX0NPREVfREVQT1NJVAogICAgICAgIHRyeToKICAgICAgICAgICAgZXZtLmdhc19sZWZ0ID0gc3VidHJhY3RfZ2FzKGV2bS5nYXNfbGVmdCwgY29udHJhY3RfY29kZV9nYXMpCiAgICAgICAgICAgIGVuc3VyZShsZW4oY29udHJhY3RfY29kZSkgPD0gTUFYX0NPREVfU0laRSwgT3V0T2ZHYXNFcnJvcikKICAgICAgICBleGNlcHQgT3V0T2ZHYXNFcnJvcjoKICAgICAgICAgICAgcm9sbGJhY2tfdHJhbnNhY3Rpb24oZW52LnN0YXRlKQogICAgICAgICAgICBldm0uZ2FzX2xlZnQgPSBVMjU2KDApCiAgICAgICAgICAgIGV2bS5vdXRwdXQgPSBiIiIKICAgICAgICAgICAgZXZtLmhhc19lcnJlZCA9IFRydWUKICAgICAgICBlbHNlOgogICAgICAgICAgICBzZXRfY29kZShlbnYuc3RhdGUsIG1lc3NhZ2UuY3VycmVudF90YXJnZXQsIGNvbnRyYWN0X2NvZGUpCiAgICAgICAgICAgIGNvbW1pdF90cmFuc2FjdGlvbihlbnYuc3RhdGUpCiAgICBlbHNlOgogICAgICAgIHJvbGxiYWNrX3RyYW5zYWN0aW9uKGVudi5zdGF0ZSkKICAgIHJldHVybiBldm0KlIWUgZR9lChoBWgGaCRqThMAAGglaANoJmgnaChLAHViYWgpfZQoaCtdlGgtXZRoMl2UaDRdlGg2XZSMBnNvdXJjZZSMXy9ob21lL3J1bm5lci93b3JrL2V4ZWN1dGlvbi1zcGVjcy9leGVjdXRpb24tc3BlY3Mvc3JjL2V0aGVyZXVtL2NvbnN0YW50aW5vcGxlL3ZtL2ludGVycHJldGVyLnB5lIwJeG1sOnNwYWNllGooBAAAjAVmb3JjZZSJjAhsYW5ndWFnZZSMBnB5dGhvbpSMDmhpZ2hsaWdodF9hcmdzlH2UjAtsaW5lbm9zdGFydJRLAXOMB2xpbmVub3OUiXVoOGoiCQAAaCZquREAAGgoS+RoJGqoEQAAdWJlaCl9lChoK12Ual4CAABhaC1dlIwMY2hhbmdlLWFkZGVklGFoMl2UjBdwcm9jZXNzX2NyZWF0ZTJfbWVzc2FnZZRhaDRdlGg2XZR1aDhoCWgmarkRAABoKEvTaCRqrQgAAGglaAN1YmgKKYGUfZQoaAVoBmgHXZQoaA8pgZR9lChoBYwPcHJvY2Vzc19tZXNzYWdllGgHXZRoH4wPcHJvY2Vzc19tZXNzYWdllIWUgZR9lChoBWgGaCRqcRMAAGglaANoJmgnaChLAHViYWgpfZQoaCtdlGgtXZRoMl2UaDRdlGg2XZR1aDhoDmgmaGtoKEvSaCRqbhMAAHViaG4pgZR9lChoBWgGaAddlGgpfZQoaCtdlGgtXZRoMl2UaDRdlGg2XZSMB2VudHJpZXOUXZR1aDhobWgmTmgoTmgkam4TAAB1YmrfCAAAKYGUfZQoaAVoBmgHXZQoauQIAAApgZR9lChoBYwdcHJvY2Vzc19tZXNzYWdlKG1lc3NhZ2UsIGVudimUaAddlChq6ggAACmBlH2UKGgFjA9wcm9jZXNzX21lc3NhZ2WUaAddlGgfjA9wcm9jZXNzX21lc3NhZ2WUhZSBlH2UKGgFaAZoJGqREwAAaCVoA2gmaCdoKEsAdWJhaCl9lChoK12UaC1dlChq9QgAAGr2CAAAavcIAABq+AgAAGVoMl2UaDRdlGg2XZSMCXhtbDpzcGFjZZRqKAQAAHVoOGrpCAAAaCZoa2goTmgkao0TAAB1YmooDgAAKYGUfZQoaAWMDG1lc3NhZ2UsIGVudpRoB12UKGouDgAAKYGUfZQoaAWMB21lc3NhZ2WUaAddlGprDAAAKYGUfZQoaAVoBmgHXZRoH4wHbWVzc2FnZZSFlIGUfZQoaAVoBmgkaqgTAABoJWgDaCZoJ2goSwB1YmFoKX2UKGgrXZRoLV2Uaj0OAABhaDJdlGg0XZRoNl2UdWg4amoMAABoJk5oKE5oJGqkEwAAdWJhaCl9lChoK12UaC1dlGgyXZRoNF2UaDZdlIwJeG1sOnNwYWNllGooBAAAdWg4ai0OAABoJk5oKE5oJGqgEwAAdWJqLg4AACmBlH2UKGgFjANlbnaUaAddlGprDAAAKYGUfZQoaAVoBmgHXZRoH4wDZW52lIWUgZR9lChoBWgGaCRqwBMAAGglaANoJmgnaChLAHViYWgpfZQoaCtdlGgtXZRqPQ4AAGFoMl2UaDRdlGg2XZR1aDhqagwAAGgmTmgoTmgkarwTAAB1YmFoKX2UKGgrXZRoLV2UaDJdlGg0XZRoNl2UjAl4bWw6c3BhY2WUaigEAAB1aDhqLQ4AAGgmTmgoTmgkaqATAAB1YmVoKX2UKGgrXZRoLV2UaDJdlGg0XZRoNl2UjAl4bWw6c3BhY2WUaigEAAB1aDhqJw4AAGgmaGtoKE5oJGqNEwAAdWJlaCl9lChoK12UjDFldGhlcmV1bS5ieXphbnRpdW0udm0uaW50ZXJwcmV0ZXIucHJvY2Vzc19tZXNzYWdllGFoLV2UKGoACQAAagEJAACMAnB5lGoDCQAAagQJAABlaDJdlGg0XZRoNl2UjAZtb2R1bGWUagkJAACMBWNsYXNzlGgGjAhmdWxsbmFtZZRqkxMAAHVoOGrjCAAAaCZoa2goS9VoJGqKEwAAdWJqDQkAACmBlH2UKGgFaAZoB12UKGitKYGUfZQoaAWMK0V4ZWN1dGVzIGEgY2FsbCB0byBjcmVhdGUgYSBzbWFydCBjb250cmFjdC6UaAddlGgfjCtFeGVjdXRlcyBhIGNhbGwgdG8gY3JlYXRlIGEgc21hcnQgY29udHJhY3QulIWUgZR9lChoBWgGaCRq6RMAAGglaANoJmgnaChLAHViYWgpfZQoaCtdlGgtXZRoMl2UaDRdlGg2XZR1aDhorGgmaGtoKEvYaCRq5hMAAHViaroOAAApgZR9lChoBWgGaAddlChqvw4AACmBlH2UKGgFaAZoB12UKGrEDgAAKYGUfZQoaAWMClBhcmFtZXRlcnOUaAddlGgfjApQYXJhbWV0ZXJzlIWUgZR9lChoBWgGaCRq/RMAAGglaANoJmgnaChLAHViYWgpfZQoaCtdlGgtXZRoMl2UaDRdlGg2XZR1aDhqww4AAGgmaGtoKEsAaCRq+hMAAHViatQOAAApgZR9lChoBWgGaAddlGijKYGUfZQoaAVoBmgHXZQoaKgpgZR9lChoBWgGaAddlGitKYGUfZQoaAWMJm1lc3NhZ2UgLS0gVHJhbnNhY3Rpb24gc3BlY2lmaWMgaXRlbXMulGgHXZQoauMOAAApgZR9lChoBYwHbWVzc2FnZZRoB12UaB+MB21lc3NhZ2WUhZSBlH2UKGgFaAZoJGoYFAAAaCVoA2gmaCdoKEsAdWJhaCl9lChoK12UaC1dlGgyXZRoNF2UaDZdlIwLcmVmc3BlY2lmaWOUiIwJcHk6bW9kdWxllGoJCQAAjAhweTpjbGFzc5ROdWg4auIOAABoJk5oKE5oJGoUFAAAdWJoH4wgIOKAkyBUcmFuc2FjdGlvbiBzcGVjaWZpYyBpdGVtcy6UhZSBlH2UKGgFaAZoJGoUFAAAaCVoA2gmaCdoKEsAdWJlaCl9lChoK12UaC1dlGgyXZRoNF2UaDZdlHVoOGisaCZOaChOaCRqERQAAHViYWgpfZQoaCtdlGgtXZRoMl2UaDRdlGg2XZR1aDhop2gmTmgoTmgkag4UAAB1YmioKYGUfZQoaAVoBmgHXZRorSmBlH2UKGgFjDFlbnYgLS0gRXh0ZXJuYWwgaXRlbXMgcmVxdWlyZWQgZm9yIEVWTSBleGVjdXRpb24ulGgHXZQoauMOAAApgZR9lChoBYwDZW52lGgHXZRoH4wDZW52lIWUgZR9lChoBWgGaCRqQBQAAGglaANoJmgnaChLAHViYWgpfZQoaCtdlGgtXZRoMl2UaDRdlGg2XZSMC3JlZnNwZWNpZmljlIiMCXB5Om1vZHVsZZRqCQkAAIwIcHk6Y2xhc3OUTnVoOGriDgAAaCZOaChOaCRqPBQAAHViaB+MLyDigJMgRXh0ZXJuYWwgaXRlbXMgcmVxdWlyZWQgZm9yIEVWTSBleGVjdXRpb24ulIWUgZR9lChoBWgGaCRqPBQAAGglaANoJmgnaChLAHViZWgpfZQoaCtdlGgtXZRoMl2UaDRdlGg2XZR1aDhorGgmTmgoTmgkajkUAAB1YmFoKX2UKGgrXZRoLV2UaDJdlGg0XZRoNl2UdWg4aKdoJk5oKE5oJGoOFAAAdWJlaCl9lChoK12UaC1dlGgyXZRoNF2UaDZdlHVoOGiiaCZOaChOaCRqCxQAAHViYWgpfZQoaCtdlGgtXZRoMl2UaDRdlGg2XZR1aDhq0w4AAGgmTmgoTmgkavoTAAB1YmVoKX2UKGgrXZRoLV2UaDJdlGg0XZRoNl2UdWg4ar4OAABoJk5oKE5oJGr3EwAAdWJqvw4AACmBlH2UKGgFaAZoB12UKGrEDgAAKYGUfZQoaAWMB1JldHVybnOUaAddlGgfjAdSZXR1cm5zlIWUgZR9lChoBWgGaCRqdhQAAGglaANoJmgnaChLAHViYWgpfZQoaCtdlGgtXZRoMl2UaDRdlGg2XZR1aDhqww4AAGgmaGtoKEsAaCRqcxQAAHViatQOAAApgZR9lChoBWgGaAddlGitKYGUfZQoaAWMMmV2bSAtLSBJdGVtcyBjb250YWluaW5nIGV4ZWN1dGlvbiBzcGVjaWZpYyBvYmplY3RzlGgHXZQoalgPAAApgZR9lChoBYwHKipldm0qKpRoB12UaB+MA2V2bZSFlIGUfZQoaAVoBmgkaosUAABoJWgDaCZoJ2goSwB1YmFoKX2UKGgrXZRoLV2UaDJdlGg0XZRoNl2UdWg4alcPAABoJk5oKE5oJGqHFAAAdWJoH4wwIOKAkyBJdGVtcyBjb250YWluaW5nIGV4ZWN1dGlvbiBzcGVjaWZpYyBvYmplY3RzlIWUgZR9lChoBWgGaCRqhxQAAGglaANoJmgnaChLAHViZWgpfZQoaCtdlGgtXZRoMl2UaDRdlGg2XZR1aDhorGgmTmgoTmgkaoQUAAB1YmFoKX2UKGgrXZRoLV2UaDJdlGg0XZRoNl2UdWg4atMOAABoJk5oKE5oJGpzFAAAdWJlaCl9lChoK12UaC1dlGgyXZRoNF2UaDZdlHVoOGq+DgAAaCZOaChOaCRq9xMAAHViar8OAAApgZR9lChoBWgGaAddlChqxA4AACmBlH2UKGgFjAtSZXR1cm4gdHlwZZRoB12UaB+MC1JldHVybiB0eXBllIWUgZR9lChoBWgGaCRqshQAAGglaANoJmgnaChLAHViYWgpfZQoaCtdlGgtXZRoMl2UaDRdlGg2XZR1aDhqww4AAGgmaGtoKEsAaCRqrxQAAHViatQOAAApgZR9lChoBWgGaAddlGitKYGUfZQoaAWMA0V2bZRoB12UaBUpgZR9lChoBWgGaAddlGgaKYGUfZQoaAWMJjpweTpjbGFzczpgfmV0aGVyZXVtLmJ5emFudGl1bS52bS5Fdm1glGgHXZRoH4wDRXZtlIWUgZR9lChoBWgGaCRqyhQAAGglaANoJmgnaChLAHViYWgpfZQoaCtdlGgtXZQoaC+MAnB5lIwIcHktY2xhc3OUZWgyXZRoNF2UaDZdlHVoOGgZaCZOaChOaCRqxxQAAHViYWgpfZQoaCtdlGgtXZRoMl2UaDRdlGg2XZSMCGludGVybmFslIiMBnJlZnVyaZSMKS4uL2luZGV4LnBpY2tsZSNldGhlcmV1bS5ieXphbnRpdW0udm0uRXZtlIwIcmVmdGl0bGWUjBlldGhlcmV1bS5ieXphbnRpdW0udm0uRXZtlHVoOGgUaCZOaChOaCRqwxQAAHViYWgpfZQoaCtdlGgtXZRoMl2UaDRdlGg2XZR1aDhorGgmTmgoTmgkasAUAAB1YmFoKX2UKGgrXZRoLV2UaDJdlGg0XZRoNl2UdWg4atMOAABoJk5oKE5oJGqvFAAAdWJlaCl9lChoK12UaC1dlGgyXZRoNF2UaDZdlHVoOGq+DgAAaCZOaChOaCRq9xMAAHViZWgpfZQoaCtdlGgtXZRoMl2UaDRdlGg2XZR1aDhquQ4AAGgmTmgoTmgkauYTAAB1YmVoKX2UKGgrXZRoLV2UaDJdlGg0XZRoNl2UdWg4agwJAABoJmhraChOaCRqihMAAHViZWgpfZQoaCtdlGgtXZQoat8TAACMCGZ1bmN0aW9ulGVoMl2UaDRdlGg2XZSMBmRvbWFpbpRq3xMAAIwHb2JqdHlwZZRqBhUAAIwIZGVzY3R5cGWUagYVAACMB25vaW5kZXiUiXVoOGreCAAAaCZOaChOaCRqbhMAAHViaiMJAAApgZR9lChoBVgMBAAAZGVmIHByb2Nlc3NfbWVzc2FnZShtZXNzYWdlOiBNZXNzYWdlLCBlbnY6IEVudmlyb25tZW50KSAtPiBFdm06CiAgICBpZiBtZXNzYWdlLmRlcHRoID4gU1RBQ0tfREVQVEhfTElNSVQ6CiAgICAgICAgcmFpc2UgU3RhY2tEZXB0aExpbWl0RXJyb3IoIlN0YWNrIGRlcHRoIGxpbWl0IHJlYWNoZWQiKQoKICAgICMgdGFrZSBzbmFwc2hvdCBvZiBzdGF0ZSBiZWZvcmUgcHJvY2Vzc2luZyB0aGUgbWVzc2FnZQogICAgYmVnaW5fdHJhbnNhY3Rpb24oZW52LnN0YXRlKQoKICAgIHRvdWNoX2FjY291bnQoZW52LnN0YXRlLCBtZXNzYWdlLmN1cnJlbnRfdGFyZ2V0KQoKICAgIHNlbmRlcl9iYWxhbmNlID0gZ2V0X2FjY291bnQoZW52LnN0YXRlLCBtZXNzYWdlLmNhbGxlcikuYmFsYW5jZQoKICAgIGlmIG1lc3NhZ2Uuc2hvdWxkX3RyYW5zZmVyX3ZhbHVlIGFuZCBtZXNzYWdlLnZhbHVlICE9IDA6CiAgICAgICAgaWYgc2VuZGVyX2JhbGFuY2UgPCBtZXNzYWdlLnZhbHVlOgogICAgICAgICAgICByb2xsYmFja190cmFuc2FjdGlvbihlbnYuc3RhdGUpCiAgICAgICAgICAgIHJhaXNlIEluc3VmZmljaWVudEZ1bmRzKAogICAgICAgICAgICAgICAgZiJJbnN1ZmZpY2llbnQgZnVuZHM6IHtzZW5kZXJfYmFsYW5jZX0gPCB7bWVzc2FnZS52YWx1ZX0iCiAgICAgICAgICAgICkKICAgICAgICBtb3ZlX2V0aGVyKAogICAgICAgICAgICBlbnYuc3RhdGUsIG1lc3NhZ2UuY2FsbGVyLCBtZXNzYWdlLmN1cnJlbnRfdGFyZ2V0LCBtZXNzYWdlLnZhbHVlCiAgICAgICAgKQoKICAgIGV2bSA9IGV4ZWN1dGVfY29kZShtZXNzYWdlLCBlbnYpCiAgICBpZiBldm0uaGFzX2VycmVkOgogICAgICAgICMgcmV2ZXJ0IHN0YXRlIHRvIHRoZSBsYXN0IHNhdmVkIGNoZWNrcG9pbnQKICAgICAgICAjIHNpbmNlIHRoZSBtZXNzYWdlIGNhbGwgcmVzdWx0ZWQgaW4gYW4gZXJyb3IKICAgICAgICByb2xsYmFja190cmFuc2FjdGlvbihlbnYuc3RhdGUpCiAgICBlbHNlOgogICAgICAgIGNvbW1pdF90cmFuc2FjdGlvbihlbnYuc3RhdGUpCiAgICByZXR1cm4gZXZtCpRoB12UaB9YDAQAAGRlZiBwcm9jZXNzX21lc3NhZ2UobWVzc2FnZTogTWVzc2FnZSwgZW52OiBFbnZpcm9ubWVudCkgLT4gRXZtOgogICAgaWYgbWVzc2FnZS5kZXB0aCA+IFNUQUNLX0RFUFRIX0xJTUlUOgogICAgICAgIHJhaXNlIFN0YWNrRGVwdGhMaW1pdEVycm9yKCJTdGFjayBkZXB0aCBsaW1pdCByZWFjaGVkIikKCiAgICAjIHRha2Ugc25hcHNob3Qgb2Ygc3RhdGUgYmVmb3JlIHByb2Nlc3NpbmcgdGhlIG1lc3NhZ2UKICAgIGJlZ2luX3RyYW5zYWN0aW9uKGVudi5zdGF0ZSkKCiAgICB0b3VjaF9hY2NvdW50KGVudi5zdGF0ZSwgbWVzc2FnZS5jdXJyZW50X3RhcmdldCkKCiAgICBzZW5kZXJfYmFsYW5jZSA9IGdldF9hY2NvdW50KGVudi5zdGF0ZSwgbWVzc2FnZS5jYWxsZXIpLmJhbGFuY2UKCiAgICBpZiBtZXNzYWdlLnNob3VsZF90cmFuc2Zlcl92YWx1ZSBhbmQgbWVzc2FnZS52YWx1ZSAhPSAwOgogICAgICAgIGlmIHNlbmRlcl9iYWxhbmNlIDwgbWVzc2FnZS52YWx1ZToKICAgICAgICAgICAgcm9sbGJhY2tfdHJhbnNhY3Rpb24oZW52LnN0YXRlKQogICAgICAgICAgICByYWlzZSBJbnN1ZmZpY2llbnRGdW5kcygKICAgICAgICAgICAgICAgIGYiSW5zdWZmaWNpZW50IGZ1bmRzOiB7c2VuZGVyX2JhbGFuY2V9IDwge21lc3NhZ2UudmFsdWV9IgogICAgICAgICAgICApCiAgICAgICAgbW92ZV9ldGhlcigKICAgICAgICAgICAgZW52LnN0YXRlLCBtZXNzYWdlLmNhbGxlciwgbWVzc2FnZS5jdXJyZW50X3RhcmdldCwgbWVzc2FnZS52YWx1ZQogICAgICAgICkKCiAgICBldm0gPSBleGVjdXRlX2NvZGUobWVzc2FnZSwgZW52KQogICAgaWYgZXZtLmhhc19lcnJlZDoKICAgICAgICAjIHJldmVydCBzdGF0ZSB0byB0aGUgbGFzdCBzYXZlZCBjaGVja3BvaW50CiAgICAgICAgIyBzaW5jZSB0aGUgbWVzc2FnZSBjYWxsIHJlc3VsdGVkIGluIGFuIGVycm9yCiAgICAgICAgcm9sbGJhY2tfdHJhbnNhY3Rpb24oZW52LnN0YXRlKQogICAgZWxzZToKICAgICAgICBjb21taXRfdHJhbnNhY3Rpb24oZW52LnN0YXRlKQogICAgcmV0dXJuIGV2bQqUhZSBlJXwaQAAAAAAAH2UKGgFaAZoJGoOFQAAaCVoA2gmaCdo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ICAgICAgICBjb2RlPWNvZGUsCiAgICAgICAgZ2FzX2xlZnQ9bWVzc2FnZS5nYXMsCiAgICAgICAgZW52PWVudiwKICAgICAgICB2YWxpZF9qdW1wX2Rlc3RpbmF0aW9ucz12YWxpZF9qdW1wX2Rlc3RpbmF0aW9ucywKICAgICAgICBsb2dzPSgpLAogICAgICAgIHJlZnVuZF9jb3VudGVyPVUyNTYoMCksCiAgICAgICAgcnVubmluZz1UcnVlLAogICAgICAgIG1lc3NhZ2U9bWVzc2FnZSwKICAgICAgICBvdXRwdXQ9YiIiLAogICAgICAgIGFjY291bnRzX3RvX2RlbGV0ZT1kaWN0KCksCiAgICAgICAgaGFzX2VycmVkPUZhbHNlLAogICAgICAgIGNoaWxkcmVuPVtdLAogICAgICAgIHJldHVybl9kYXRhPWIiIiwKICAgICAgICBlcnJvcj1Ob25lLAogICAgKQogICAgdHJ5OgoKICAgICAgICBpZiBldm0ubWVzc2FnZS5jb2RlX2FkZHJlc3MgaW4gUFJFX0NPTVBJTEVEX0NPTlRSQUNUUzoKICAgICAgICAgICAgZXZtX3RyYWNlKGV2bSwgZXZtLm1lc3NhZ2UuY29kZV9hZGRyZXNzKQogICAgICAgICAgICBQUkVfQ09NUElMRURfQ09OVFJBQ1RTW2V2bS5tZXNzYWdlLmNvZGVfYWRkcmVzc10oZXZtKQogICAgICAgICAgICByZXR1cm4gZXZtCgogICAgICAgIHdoaWxlIGV2bS5ydW5uaW5nIGFuZCBldm0ucGMgPCBsZW4oZXZtLmNvZGUpOgogICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICBvcCA9IE9wcyhldm0uY29kZVtldm0ucGNdKQogICAgICAgICAgICBleGNlcHQgVmFsdWVFcnJvcjoKICAgICAgICAgICAgICAgIHJhaXNlIEludmFsaWRPcGNvZGUoZXZtLmNvZGVbZXZtLnBjXSkKCiAgICAgICAgICAgIGV2bV90cmFjZShldm0sIG9wKQogICAgICAgICAgICBvcF9pbXBsZW1lbnRhdGlvbltvcF0oZXZtKQoKICAgIGV4Y2VwdCBFeGNlcHRpb25hbEhhbHQ6CiAgICAgICAgZXZtLmdhc19sZWZ0ID0gVTI1NigwKQogICAgICAgIGV2bS5vdXRwdXQgPSBiIiIKICAgICAgICBldm0uaGFzX2VycmVkID0gVHJ1ZQogICAgZXhjZXB0IFJldmVydCBhcyBlOgogICAgICAgIGV2bS5lcnJvciA9IGUKICAgICAgICBldm0uaGFzX2VycmVkID0gVHJ1ZQogICAgcmV0dXJuIGV2bQqUaAddlGgfWAsFAABkZWYgZXhlY3V0ZV9jb2RlKG1lc3NhZ2U6IE1lc3NhZ2UsIGVudjogRW52aXJvbm1lbnQpIC0+IEV2bToKICAgIGNvZGUgPSBtZXNzYWdlLmNvZGUKICAgIHZhbGlkX2p1bXBfZGVzdGluYXRpb25zID0gZ2V0X3ZhbGlkX2p1bXBfZGVzdGluYXRpb25zKGNvZGUpCiAgICBldm0gPSBFdm0oCiAgICAgICAgcGM9VWludCgwKSwKICAgICAgICBzdGFjaz1bXSwKICAgICAgICBtZW1vcnk9Ynl0ZWFycmF5KCksCiAgICAgICAgY29kZT1jb2RlLAogICAgICAgIGdhc19sZWZ0PW1lc3NhZ2UuZ2FzLAogICAgICAgIGVudj1lbnYsCiAgICAgICAgdmFsaWRfanVtcF9kZXN0aW5hdGlvbnM9dmFsaWRfanVtcF9kZXN0aW5hdGlvbnMsCiAgICAgICAgbG9ncz0oKSwKICAgICAgICByZWZ1bmRfY291bnRlcj1VMjU2KDApLAogICAgICAgIHJ1bm5pbmc9VHJ1ZSwKICAgICAgICBtZXNzYWdlPW1lc3NhZ2UsCiAgICAgICAgb3V0cHV0PWIiIiwKICAgICAgICBhY2NvdW50c190b19kZWxldGU9ZGljdCgpLAogICAgICAgIGhhc19lcnJlZD1GYWxzZSwKICAgICAgICBjaGlsZHJlbj1bXSwKICAgICAgICByZXR1cm5fZGF0YT1iIiIsCiAgICAgICAgZXJyb3I9Tm9uZSwKICAgICkKICAgIHRyeToKCiAgICAgICAgaWYgZXZtLm1lc3NhZ2UuY29kZV9hZGRyZXNzIGluIFBSRV9DT01QSUxFRF9DT05UUkFDVFM6CiAgICAgICAgICAgIGV2bV90cmFjZShldm0sIGV2bS5tZXNzYWdlLmNvZGVfYWRkcmVzcykK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XZRoNl2UdWg4agwJAABoJmhraChOaCRqCBcAAHViZWgpfZQoaCtdlGgtXZQoansXAACMCGZ1bmN0aW9ulGVoMl2UaDRdlGg2XZSMBmRvbWFpbpRqexcAAIwHb2JqdHlwZZRq6hgAAIwIZGVzY3R5cGWUauoYAACMB25vaW5kZXiUiXVoOGreCAAAaCZOaChOaCRq7BYAAHViaiMJAAApgZR9lChoBViuBQAAZGVmIGNvbGxlY3RfdG91Y2hlZF9hY2NvdW50cygKICAgIGV2bTogRXZtLCBhbmNlc3Rvcl9oYWRfZXJyb3I6IGJvb2wgPSBGYWxzZQopIC0+IEl0ZXJhYmxlW0FkZHJlc3NdOgogICAgIyBjb2xsZWN0IHRoZSBjb2luYmFzZSBhY2NvdW50IGlmIGl0IHdhcyB0b3VjaGVkIHZpYSB6ZXJvLWZlZSB0cmFuc2ZlcgogICAgaWYgKGV2bS5tZXNzYWdlLmNhbGxlciA9PSBldm0uZW52Lm9yaWdpbikgYW5kIGV2bS5lbnYuZ2FzX3ByaWNlID09IDA6CiAgICAgICAgeWllbGQgZXZtLmVudi5jb2luYmFzZQoKICAgICMgY29sbGVjdCB0aG9zZSBleHBsaWNpdGx5IG1hcmtlZCBmb3IgZGVsZXRpb24KICAgICMgKCJiZW5lZmljaWFyeSIgaXMgb2YgU0VMRkRFU1RSVUNUKQogICAgZm9yIGJlbmVmaWNpYXJ5IGluIHNvcnRlZChzZXQoZXZtLmFjY291bnRzX3RvX2RlbGV0ZS52YWx1ZXMoKSkpOgogICAgICAgIGlmIGV2bS5oYXNfZXJyZWQgb3IgYW5jZXN0b3JfaGFkX2Vycm9yOgogICAgICAgICAgICAjIFNwZWNpYWwgY2FzZSB0byBhY2NvdW50IGZvciBnZXRoK3Bhcml0eSBidWcKICAgICAgICAgICAgIyBodHRwczovL2dpdGh1Yi5jb20vZXRoZXJldW0vRUlQcy9pc3N1ZXMvNzE2CiAgICAgICAgICAgIGlmIGJlbmVmaWNpYXJ5ID09IFJJUEVNRDE2MF9BRERSRVNTOgogICAgICAgICAgICAgICAgeWllbGQgYmVuZWZpY2lhcnkKICAgICAgICAgICAgY29udGludWUKICAgICAgICBlbHNlOgogICAgICAgICAgICB5aWVsZCBiZW5lZmljaWFyeQoKICAgICMgY29sbGVjdCBhY2NvdW50IGRpcmVjdGx5IGFkZHJlc3NlZAogICAgaWYgbm90IGlzaW5zdGFuY2UoZXZtLm1lc3NhZ2UudGFyZ2V0LCBCeXRlczApOgogICAgICAgIGlmIGV2bS5oYXNfZXJyZWQgb3IgYW5jZXN0b3JfaGFkX2Vycm9yOgogICAgICAgICAgICAjIGNvbGxlY3QgUklQRU1EMTYwIHByZWNvbXBpbGUgZXZlbiBpZiBhbmNlc3RvciBldm0gaGFkIGVycm9yLgogICAgICAgICAgICAjIG90aGVyd2lzZSwgc2tpcCBjb2xsZWN0aW9uIGZyb20gY2hpbGRyZW4gb2YgZXJyZWQtb3V0IGV2bSBvYmplY3RzCiAgICAgICAgICAgIGlmIGV2bS5tZXNzYWdlLnRhcmdldCA9PSBSSVBFTUQxNjBfQUREUkVTUzoKICAgICAgICAgICAgICAgIHlpZWxkIGV2bS5tZXNzYWdlLnRhcmdldAogICAgICAgIGVsc2U6CiAgICAgICAgICAgIHlpZWxkIGV2bS5tZXNzYWdlLnRhcmdldAoKICAgICMgcmVjdXJzZSBpbnRvIG5lc3RlZCBjb21wdXRhdGlvbnMKICAgICMgKGV2ZW4gZXJyZWQgb25lcywgc2luY2UgbG9va2luZyBmb3IgUklQRU1EMTYwKQogICAgZm9yIGNoaWxkIGluIGV2bS5jaGlsZHJlbjoKICAgICAgICB5aWVsZCBmcm9tIGNvbGxlY3RfdG91Y2hlZF9hY2NvdW50cygKICAgICAgICAgICAgY2hpbGQsIGFuY2VzdG9yX2hhZF9lcnJvcj0oZXZtLmhhc19lcnJlZCBvciBhbmNlc3Rvcl9oYWRfZXJyb3IpCiAgICAgICAgKQqUaAddlGgfWK4FAABkZWYgY29sbGVjdF90b3VjaGVkX2FjY291bnRzKAogICAgZXZtOiBFdm0sIGFuY2VzdG9yX2hhZF9lcnJvcjogYm9vbCA9IEZhbHNlCikgLT4gSXRlcmFibGVbQWRkcmVzc106CiAgICAjIGNvbGxlY3QgdGhlIGNvaW5iYXNlIGFjY291bnQgaWYgaXQgd2FzIHRvdWNoZWQgdmlhIHplcm8tZmVlIHRyYW5zZmVyCiAgICBpZiAoZXZtLm1lc3NhZ2UuY2FsbGVyID09IGV2bS5lbnYub3JpZ2luKSBhbmQgZXZtLmVudi5nYXNfcHJpY2UgPT0gMDoKICAgICAgICB5aWVsZCBldm0uZW52LmNvaW5iYXNlCgogICAgIyBjb2xsZWN0IHRob3NlIGV4cGxpY2l0bHkgbWFya2VkIGZvciBkZWxldGlvbgogICAgIyAoImJlbmVmaWNpYXJ5IiBpcyBvZiBTRUxGREVTVFJVQ1QpCiAgICBmb3IgYmVuZWZpY2lhcnkgaW4gc29ydGVkKHNldChldm0uYWNjb3VudHNfdG9fZGVsZXRlLnZhbHVlcygpKSk6CiAgICAgICAgaWYgZXZtLmhhc19lcnJlZCBvciBhbmNlc3Rvcl9oYWRfZXJyb3I6CiAgICAgICAgICAgICMgU3BlY2lhbCBjYXNlIHRvIGFjY291bnQgZm9yIGdldGgrcGFyaXR5IGJ1ZwogICAgICAgICAgICAjIGh0dHBzOi8vZ2l0aHViLmNvbS9ldGhlcmV1bS9FSVBzL2lzc3Vlcy83MTYKICAgICAgICAgICAgaWYgYmVuZWZpY2lhcnkgPT0gUklQRU1EMTYwX0FERFJFU1M6CiAgICAgICAgICAgICAgICB5aWVsZCBiZW5lZmljaWFyeQogICAgICAgICAgICBjb250aW51ZQogICAgICAgIGVsc2U6CiAgICAgICAgICAgIHlpZWxkIGJlbmVmaWNpYXJ5CgogICAgIyBjb2xsZWN0IGFjY291bnQgZGlyZWN0bHkgYWRkcmVzc2VkCiAgICBpZiBub3QgaXNpbnN0YW5jZShldm0ubWVzc2FnZS50YXJnZXQsIEJ5dGVzMCk6CiAgICAgICAgaWYgZXZtLmhhc19lcnJlZCBvciBhbmNlc3Rvcl9oYWRfZXJyb3I6CiAgICAgICAgICAgICMgY29sbGVjdCBSSVBFTUQxNjAgcHJlY29tcGlsZSBldmVuIGlmIGFuY2VzdG9yIGV2bSBoYWQgZXJyb3IuCiAgICAgICAgICAgICMgb3RoZXJ3aXNlLCBza2lwIGNvbGxlY3Rpb24gZnJvbSBjaGlsZHJlbiBvZiBlcnJlZC1vdXQgZXZtIG9iamVjdHMKICAgICAgICAgICAgaWYgZXZtLm1lc3NhZ2UudGFyZ2V0ID09IFJJUEVNRDE2MF9BRERSRVNTOgogICAgICAgICAgICAgICAgeWllbGQgZXZtLm1lc3NhZ2UudGFyZ2V0CiAgICAgICAgZWxzZToKICAgICAgICAgICAgeWllbGQgZXZtLm1lc3NhZ2UudGFyZ2V0CgogICAgIyByZWN1cnNlIGludG8gbmVzdGVkIGNvbXB1dGF0aW9ucwogICAgIyAoZXZlbiBlcnJlZCBvbmVzLCBzaW5jZSBsb29raW5nIGZvciBSSVBFTUQxNjApCiAgICBmb3IgY2hpbGQgaW4gZXZtLmNoaWxkcmVuOgogICAgICAgIHlpZWxkIGZyb20gY29sbGVjdF90b3VjaGVkX2FjY291bnRzKAogICAgICAgICAgICBjaGlsZCwgYW5jZXN0b3JfaGFkX2Vycm9yPShldm0uaGFzX2VycmVkIG9yIGFuY2VzdG9yX2hhZF9lcnJvcikKICAgICAgICApCpSFlIGUfZQoaAVoBmgkavIYAABoJWgDaCZoJ2goSwB1YmFoKX2UKGgrXZRoLV2UaDJdlGg0XZRoNl2UjAZzb3VyY2WUjFovaG9tZS9ydW5uZXIvd29yay9leGVjdXRpb24tc3BlY3MvZXhlY3V0aW9uLXNwZWNzL3NyYy9ldGhlcmV1bS9ieXphbnRpdW0vdm0vaW50ZXJwcmV0ZXIucHmUjAl4bWw6c3BhY2WUaigEAACMBWZvcmNllImMCGxhbmd1YWdllIwGcHl0aG9ulIwOaGlnaGxpZ2h0X2FyZ3OUfZRqOgkAAEsBc4wHbGluZW5vc5SJdWg4aiIJAABoJmhraChNEgFoJGrsFgAAdWJlaCl9lChoK12UasUCAABhaC1dlGgyXZSMGGNvbGxlY3RfdG91Y2hlZF9hY2NvdW50c5RhaDRdlGg2XZR1aDhoCWgmaGtoKEv+aCRqrQgAAGglaAN1YmgKKYGUfZQoaAVoBmgHXZQoaA8pgZR9lChoBYwaY29sbGVjdF9hY2NvdW50c190b19kZWxldGWUaAddlGgfjBpjb2xsZWN0X2FjY291bnRzX3RvX2RlbGV0ZZSFlIGUfZQoaAVoBmgkahMZAABoJWgDaCZoJ2goSwB1YmFoKX2UKGgrXZRoLV2UaDJdlGg0XZRoNl2UdWg4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ICAgICkKlIWUgZR9lChoBWgGaCRqzhsAAGglaANoJmgnaChLAHViYWgpfZQoaCtdlGgtXZRoMl2UaDRdlGg2XZSMBnNvdXJjZZSMWi9ob21lL3J1bm5lci93b3JrL2V4ZWN1dGlvbi1zcGVjcy9leGVjdXRpb24tc3BlY3Mvc3JjL2V0aGVyZXVtL2J5emFudGl1bS92bS9pbnRlcnByZXRlci5weZSMCXhtbDpzcGFjZZRqKAQAAIwFZm9yY2WUiYwIbGFuZ3VhZ2WUjAZweXRob26UjA5oaWdobGlnaHRfYXJnc5R9lGo6CQAASwFzjAdsaW5lbm9zlIl1aDhqIgkAAGgmaGtoKE1AAWgkapAaAAB1YmVoKX2UKGgrXZRqCQMAAGFoLV2UaDJdlIwUY2FsY3VsYXRlX2dhc19yZWZ1bmSUYWg0XZRoNl2UdWg4aAloJmhraChNLgFoJGqtCAAAaCVoA3ViZWgpfZQoaCtdlGpzAQAAYWgtXZRoMl2UjA5tb2R1bGUgZGV0YWlsc5RhaDRdlGg2XZR1aDhoCWgmaGtoKEs6aCRofmglaAN1YmVoKX2UKGgrXZSMKGV0aGVyZXVtLXZpcnR1YWwtbWFjaGluZS1ldm0taW50ZXJwcmV0ZXKUYWgtXZRoMl2UjCpldGhlcmV1bSB2aXJ0dWFsIG1hY2hpbmUgKGV2bSkgaW50ZXJwcmV0ZXKUYWg0XZRoNl2UdWg4aAloJmhraChLB2gkaAtoJWgDdWJlaCl9lChoK12UKGh8jCFldGhlcmV1bS1ieXphbnRpdW0tdm0taW50ZXJwcmV0ZXKUZWgtXZRoMl2UjCFldGhlcmV1bS5ieXphbnRpdW0udm0uaW50ZXJwcmV0ZXKUYWg0XZRoNl2UdWg4aAloJmhraChLAmgkaANoJWgDdWJhaCl9lChoK12UaC1dlGgyXZRoNF2UaDZdlIwGc291cmNllGgndWg4aAGMDmN1cnJlbnRfc291cmNllGgnjAxjdXJyZW50X2xpbmWUSwCMCHNldHRpbmdzlIwRZG9jdXRpbHMuZnJvbnRlbmSUjAZWYWx1ZXOUk5QpgZR9lCiMDHJlcG9ydF9sZXZlbJRLAowKaGFsdF9sZXZlbJRLBIwRZXhpdF9zdGF0dXNfbGV2ZWyUSwWMBWRlYnVnlE6MDndhcm5pbmdfc3RyZWFtlE6MCXRyYWNlYmFja5ROjA9vdXRwdXRfZW5jb2RpbmeUjAV1dGYtOJSMHW91dHB1dF9lbmNvZGluZ19lcnJvcl9oYW5kbGVylIwReG1sY2hhcnJlZnJlcGxhY2WUjA5lcnJvcl9lbmNvZGluZ5SMBXV0Zi04lIwcZXJyb3JfZW5jb2RpbmdfZXJyb3JfaGFuZGxlcpSMEGJhY2tzbGFzaHJlcGxhY2WUjBNyZWNvcmRfZGVwZW5kZW5jaWVzlIwOZG9jdXRpbHMudXRpbHOUjA5EZXBlbmRlbmN5TGlzdJSTlCmBlH2UKIwEbGlzdJRdlIwEZmlsZZROdWKMBmNvbmZpZ5ROjA1kdW1wX3NldHRpbmdzlE6MDmR1bXBfaW50ZXJuYWxzlE6MD2R1bXBfdHJhbnNmb3Jtc5ROjA9kdW1wX3BzZXVkb194bWyUTowQZXhwb3NlX2ludGVybmFsc5ROjA5zdHJpY3RfdmlzaXRvcpROjA9fZGlzYWJsZV9jb25maWeUTowHX3NvdXJjZZROjAxfZGVzdGluYXRpb26UjEBkb2MvZGlmZnMvYnl6YW50aXVtX2NvbnN0YW50aW5vcGxlL3ZtL2ludGVycHJldGVyL2luZGV4LnBpY2tsZTY0lIwNX2NvbmZpZ19maWxlc5RdlIwRbGluZV9sZW5ndGhfbGltaXSUTRAnjAl0YWJfd2lkdGiUSwiMEHN5bnRheF9oaWdobGlnaHSUjARsb25nlIwMc21hcnRfcXVvdGVzlImME3NtYXJ0cXVvdGVzX2xvY2FsZXOUTowdY2hhcmFjdGVyX2xldmVsX2lubGluZV9tYXJrdXCUiYwGd3JpdGVylIwDeG1slIwZY29tcGFyZV9zZWN0aW9uc19ieV9uYW1lc5SJjAxkdW1wX3JzdGRpZmaUTowFX2JvdGiUfZQoaA5OjAlnZW5lcmF0b3KUTowJZGF0ZXN0YW1wlE6MC3NvdXJjZV9saW5rlE6MCnNvdXJjZV91cmyUTowNdG9jX2JhY2tsaW5rc5RquQMAAIwSZm9vdG5vdGVfYmFja2xpbmtzlEsBjA1zZWN0bnVtX3hmb3JtlEsBjA5kb2N0aXRsZV94Zm9ybZRLAYwNZG9jaW5mb194Zm9ybZRLAYwSc2VjdHN1YnRpdGxlX3hmb3JtlEsAjA5zdHJpcF9jb21tZW50c5ROjA5pbnB1dF9lbmNvZGluZ5ROjBxpbnB1dF9lbmNvZGluZ19lcnJvcl9oYW5kbGVylIwGc3RyaWN0lIwNbGFuZ3VhZ2VfY29kZZSMAmVulIwOcGVwX3JlZmVyZW5jZXOUTowMcGVwX2Jhc2VfdXJslIwfaHR0cDovL3d3dy5weXRob24ub3JnL2Rldi9wZXBzL5SMFXBlcF9maWxlX3VybF90ZW1wbGF0ZZSMCHBlcC0lMDRklIwOcmZjX3JlZmVyZW5jZXOUTowMcmZjX2Jhc2VfdXJslIwbaHR0cDovL3Rvb2xzLmlldGYub3JnL2h0bWwvlIwddHJpbV9mb290bm90ZV9yZWZlcmVuY2Vfc3BhY2WUTowWZmlsZV9pbnNlcnRpb25fZW5hYmxlZJRLAYwLcmF3X2VuYWJsZWSUSwGMDmF1dG9faWRfcHJlZml4lIwCaWSUjAlpZF9wcmVmaXiUaAaMG3N0cmlwX2VsZW1lbnRzX3dpdGhfY2xhc3Nlc5ROjA1zdHJpcF9jbGFzc2VzlE51jARib3RolH2UjApfb3B0aW9uc1RvlIwFX2JvdGiUjAtfb2xkX3NvdXJjZZSMHC50b3gvZG9jcy9zdGFnZTBfb3V0L2F1dG9hcGmUjAtfbmV3X3NvdXJjZZSMCWRvYy9kaWZmc5RqURwAAGpSHAAAdWKMCHJlcG9ydGVylE6MEGluZGlyZWN0X3RhcmdldHOUXZSMEXN1YnN0aXR1dGlvbl9kZWZzlH2UjBJzdWJzdGl0dXRpb25fbmFtZXOUfZSMCHJlZm5hbWVzlH2UjAZyZWZpZHOUfZSMB25hbWVpZHOUfZSMCW5hbWV0eXBlc5R9lGgrfZSMDWZvb3Rub3RlX3JlZnOUfZSMDWNpdGF0aW9uX3JlZnOUfZSMDWF1dG9mb290bm90ZXOUXZSMEWF1dG9mb290bm90ZV9yZWZzlF2UjBBzeW1ib2xfZm9vdG5vdGVzlF2UjBRzeW1ib2xfZm9vdG5vdGVfcmVmc5RdlIwJZm9vdG5vdGVzlF2UjAljaXRhdGlvbnOUXZSMEmF1dG9mb290bm90ZV9zdGFydJRLAYwVc3ltYm9sX2Zvb3Rub3RlX3N0YXJ0lEsAjAppZF9jb3VudGVylIwLY29sbGVjdGlvbnOUjAdDb3VudGVylJOUfZSFlFKUjA5wYXJzZV9tZXNzYWdlc5RdlIwSdHJhbnNmb3JtX21lc3NhZ2VzlF2UjAt0cmFuc2Zvcm1lcpROjAtpbmNsdWRlX2xvZ5RdlIwKZGVjb3JhdGlvbpROaCVoA3ViLg==