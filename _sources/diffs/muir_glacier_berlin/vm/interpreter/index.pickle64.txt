gASVyAABAAAAAACMDmRvY3V0aWxzLm5vZGVzlIwIZG9jdW1lbnSUk5QpgZR9lCiMCXJhd3NvdXJjZZSMAJSMCGNoaWxkcmVulF2UKGgAjAZ0YXJnZXSUk5QpgZR9lChoBWgGaAddlIwKYXR0cmlidXRlc5R9lCiMA2lkc5RdlIwrbW9kdWxlLWV0aGVyZXVtLm11aXJfZ2xhY2llci52bS5pbnRlcnByZXRlcpRhjAdjbGFzc2VzlF2UjAVuYW1lc5RdlIwIZHVwbmFtZXOUXZSMCGJhY2tyZWZzlF2UjAVpc21vZJSIdYwHdGFnbmFtZZRoCYwGc291cmNllIxsL2hvbWUvcnVubmVyL3dvcmsvZXhlY3V0aW9uLXNwZWNzL2V4ZWN1dGlvbi1zcGVjcy9kb2MvYXV0b2FwaS9ldGhlcmV1bS9tdWlyX2dsYWNpZXIvdm0vaW50ZXJwcmV0ZXIvaW5kZXgucnN0lIwEbGluZZRLAYwGcGFyZW50lGgDjAlfZG9jdW1lbnSUaAN1YowPc3BoaW54LmFkZG5vZGVzlIwFaW5kZXiUk5QpgZR9lChoBWgGaAddlGgOfZQoaBBdlGgTXZRoFV2UaBddlGgZXZSMB2VudHJpZXOUXZQojARwYWlylIwsbW9kdWxlOyBldGhlcmV1bS5tdWlyX2dsYWNpZXIudm0uaW50ZXJwcmV0ZXKUaBJoBk50lGF1aBxoI2gdaB5oH0sCaCBoA2ghaAN1YmgAjAdzZWN0aW9ulJOUKYGUfZQoaAVoBmgHXZQoaACMBXRpdGxllJOUKYGUfZQoaAWMKkV0aGVyZXVtIFZpcnR1YWwgTWFjaGluZSAoRVZNKSBJbnRlcnByZXRlcpRoB12UaACMBFRleHSUk5SMKkV0aGVyZXVtIFZpcnR1YWwgTWFjaGluZSAoRVZNKSBJbnRlcnByZXRlcpSFlIGUfZQoaAVoBmggaDpoIWgDaB2MKS50b3gvZG9jcy9zdGFnZTBfb3V0L2F1dG9hcGkgPT4gZG9jL2RpZmZzlGgfSwB1YmFoDn2UKGgQXZRoE12UaBVdlGgXXZRoGV2UdWgcaDhoHWgeaB9LBGggaDVoIWgDdWJoAIwFdG9waWOUk5QpgZR9lChoBWgGaAddlChoOSmBlH2UKGgFjBFUYWJsZSBvZiBDb250ZW50c5RoB12UaD+MEVRhYmxlIG9mIENvbnRlbnRzlIWUgZR9lChoBWgGaCBoUGghaANoHWhEaB9LAHViYWgOfZQoaBBdlGgTXZRoFV2UaBddlGgZXZR1aBxoOGgdaB5oH0sIaCBoTXViaACMC2J1bGxldF9saXN0lJOUKYGUfZQoaAVoBmgHXZQoaACMCWxpc3RfaXRlbZSTlCmBlH2UKGgFaAZoB12UaACMCXBhcmFncmFwaJSTlCmBlH2UKGgFaAZoB12UaACMCXJlZmVyZW5jZZSTlCmBlH2UKGgFaAZoB12UaD+MDEludHJvZHVjdGlvbpSFlIGUfZQoaAVoBmggaG9oIWgDaB1oRGgfSwB1YmFoDn2UKGgQXZSMA2lkMZRhaBNdlGgVXZRoF12UaBldlIwFcmVmaWSUjAxpbnRyb2R1Y3Rpb26UdWgcaG1oHU5oH05oIGhqdWJhaA59lChoEF2UaBNdlGgVXZRoF12UaBldlHVoHGhoaB1OaB9OaCBoZXViYWgOfZQoaBBdlGgTXZRoFV2UaBddlGgZXZR1aBxoY2gdTmgfTmggaGB1YmhkKYGUfZQoaAVoBmgHXZQoaGkpgZR9lChoBWgGaAddlGhuKYGUfZQoaAVoBmgHXZRoP4wPTW9kdWxlIENvbnRlbnRzlIWUgZR9lChoBWgGaCBokWghaANoHWhEaB9LAHViYWgOfZQoaBBdlIwDaWQylGFoE12UaBVdlGgXXZRoGV2UjAVyZWZpZJSMD21vZHVsZS1jb250ZW50c5R1aBxobWgdTmgfTmggaI51YmFoDn2UKGgQXZRoE12UaBVdlGgXXZRoGV2UdWgcaGhoHU5oH05oIGiLdWJoXymBlH2UKGgFaAZoB12UKGhkKYGUfZQoaAVoBmgHXZRoaSmBlH2UKGgFaAZoB12UaG4pgZR9lChoBWgGaAddlGg/jAdDbGFzc2VzlIWUgZR9lChoBWgGaCBosGghaANoHWhEaB9LAHViYWgOfZQoaBBdlIwDaWQzlGFoE12UaBVdlGgXXZRoGV2UjAVyZWZpZJSMB2NsYXNzZXOUdWgcaG1oHU5oH05oIGitdWJhaA59lChoEF2UaBNdlGgVXZRoF12UaBldlHVoHGhoaB1OaB9OaCBoqnViYWgOfZQoaBBdlGgTXZRoFV2UaBddlGgZXZR1aBxoY2gdTmgfTmggaKd1YmhkKYGUfZQoaAVoBmgHXZRoaSmBlH2UKGgFaAZoB12UaG4pgZR9lChoBWgGaAddlGg/jAlGdW5jdGlvbnOUhZSBlH2UKGgFaAZoIGjSaCFoA2gdaERoH0sAdWJhaA59lChoEF2UjANpZDSUYWgTXZRoFV2UaBddlGgZXZSMBXJlZmlklIwJZnVuY3Rpb25zlHVoHGhtaB1OaB9OaCBoz3ViYWgOfZQoaBBdlGgTXZRoFV2UaBddlGgZXZR1aBxoaGgdTmgfTmggaMx1YmFoDn2UKGgQXZRoE12UaBVdlGgXXZRoGV2UdWgcaGNoHU5oH05oIGindWJoZCmBlH2UKGgFaAZoB12UaGkpgZR9lChoBWgGaAddlGhuKYGUfZQoaAVoBmgHXZRoP4wKQXR0cmlidXRlc5SFlIGUfZQoaAVoBmggaPRoIWgDaB1oRGgfSwB1YmFoDn2UKGgQXZSMA2lkNZRhaBNdlGgVXZRoF12UaBldlIwFcmVmaWSUjAphdHRyaWJ1dGVzlHVoHGhtaB1OaB9OaCBo8XViYWgOfZQoaBBdlGgTXZRoFV2UaBddlGgZXZR1aBxoaGgdTmgfTmggaO51YmFoDn2UKGgQXZRoE12UaBVdlGgXXZRoGV2UdWgcaGNoHU5oH05oIGindWJlaA59lChoEF2UaBNdlGgVXZRoF12UaBldlHVoHGheaB1OaB9OaCBoi3ViZWgOfZQoaBBdlGgTXZRoFV2UaBddlGgZXZR1aBxoY2gdTmgfTmggaGB1YmhkKYGUfZQoaAVoBmgHXZQoaGkpgZR9lChoBWgGaAddlGhuKYGUfZQoaAVoBmgHXZRoP4wOTW9kdWxlIERldGFpbHOUhZSBlH2UKGgFaAZoIGoiAQAAaCFoA2gdaERoH0sAdWJhaA59lChoEF2UjANpZDaUYWgTXZRoFV2UaBddlGgZXZSMBXJlZmlklIwObW9kdWxlLWRldGFpbHOUdWgcaG1oHU5oH05oIGofAQAAdWJhaA59lChoEF2UaBNdlGgVXZRoF12UaBldlHVoHGhoaB1OaB9OaCBqHAEAAHViaF8pgZR9lChoBWgGaAddlChoZCmBlH2UKGgFaAZoB12UaGkpgZR9lChoBWgGaAddlGhuKYGUfZQoaAVoBmgHXZRoP4wRU1RBQ0tfREVQVEhfTElNSVSUhZSBlH2UKGgFaAZoIGpBAQAAaCFoA2gdaERoH0sAdWJhaA59lChoEF2UjANpZDeUYWgTXZRoFV2UaBddlGgZXZSMBXJlZmlklIwRc3RhY2stZGVwdGgtbGltaXSUdWgcaG1oHU5oH05oIGo+AQAAdWJhaA59lChoEF2UaBNdlGgVXZRoF12UaBldlHVoHGhoaB1OaB9OaCBqOwEAAHViYWgOfZQoaBBdlGgTXZRoFV2UaBddlGgZXZR1aBxoY2gdTmgfTmggajgBAAB1YmhkKYGUfZQoaAVoBmgHXZRoaSmBlH2UKGgFaAZoB12UaG4pgZR9lChoBWgGaAddlGg/jA1NQVhfQ09ERV9TSVpFlIWUgZR9lChoBWgGaCBqYwEAAGghaANoHWhEaB9LAHViYWgOfZQoaBBdlIwDaWQ4lGFoE12UaBVdlGgXXZRoGV2UjAVyZWZpZJSMDW1heC1jb2RlLXNpemWUdWgcaG1oHU5oH05oIGpgAQAAdWJhaA59lChoEF2UaBNdlGgVXZRoF12UaBldlHVoHGhoaB1OaB9OaCBqXQEAAHViYWgOfZQoaBBdlGgTXZRoFV2UaBddlGgZXZR1aBxoY2gdTmgfTmggajgBAAB1YmhkKYGUfZQoaAVoBmgHXZRoaSmBlH2UKGgFaAZoB12UaG4pgZR9lChoBWgGaAddlGg/jBFSSVBFTUQxNjBfQUREUkVTU5SFlIGUfZQoaAVoBmggaoUBAABoIWgDaB1oRGgfSwB1YmFoDn2UKGgQXZSMA2lkOZRhaBNdlGgVXZRoF12UaBldlIwFcmVmaWSUjBFyaXBlbWQxNjAtYWRkcmVzc5R1aBxobWgdTmgfTmggaoIBAAB1YmFoDn2UKGgQXZRoE12UaBVdlGgXXZRoGV2UdWgcaGhoHU5oH05oIGp/AQAAdWJhaA59lChoEF2UaBNdlGgVXZRoF12UaBldlHVoHGhjaB1OaB9OaCBqOAEAAHViaGQpgZR9lChoBWgGaAddlGhpKYGUfZQoaAVoBmgHXZRobimBlH2UKGgFaAZoB12UaD+MEU1lc3NhZ2VDYWxsT3V0cHV0lIWUgZR9lChoBWgGaCBqpwEAAGghaANoHWhEaB9LAHViYWgOfZQoaBBdlIwEaWQxMJRhaBNdlGgVXZRoF12UaBldlIwFcmVmaWSUjBFtZXNzYWdlY2FsbG91dHB1dJR1aBxobWgdTmgfTmggaqQBAAB1YmFoDn2UKGgQXZRoE12UaBVdlGgXXZRoGV2UdWgcaGhoHU5oH05oIGqhAQAAdWJhaA59lChoEF2UaBNdlGgVXZRoF12UaBldlHVoHGhjaB1OaB9OaCBqOAEAAHViaGQpgZR9lChoBWgGaAddlGhpKYGUfZQoaAVoBmgHXZRobimBlH2UKGgFaAZoB12UaD+MFHByb2Nlc3NfbWVzc2FnZV9jYWxslIWUgZR9lChoBWgGaCBqyQEAAGghaANoHWhEaB9LAHViYWgOfZQoaBBdlIwEaWQxMZRhaBNdlGgVXZRoF12UaBldlIwFcmVmaWSUjBRwcm9jZXNzLW1lc3NhZ2UtY2FsbJR1aBxobWgdTmgfTmggasYBAAB1YmFoDn2UKGgQXZRoE12UaBVdlGgXXZRoGV2UdWgcaGhoHU5oH05oIGrDAQAAdWJhaA59lChoEF2UaBNdlGgVXZRoF12UaBldlHVoHGhjaB1OaB9OaCBqOAEAAHViaGQpgZR9lChoBWgGaAddlGhpKYGUfZQoaAVoBmgHXZRobimBlH2UKGgFaAZoB12UaD+MFnByb2Nlc3NfY3JlYXRlX21lc3NhZ2WUhZSBlH2UKGgFaAZoIGrrAQAAaCFoA2gdaERoH0sAdWJhaA59lChoEF2UjARpZDEylGFoE12UaBVdlGgXXZRoGV2UjAVyZWZpZJSMFnByb2Nlc3MtY3JlYXRlLW1lc3NhZ2WUdWgcaG1oHU5oH05oIGroAQAAdWJhaA59lChoEF2UaBNdlGgVXZRoF12UaBldlHVoHGhoaB1OaB9OaCBq5QEAAHViYWgOfZQoaBBdlGgTXZRoFV2UaBddlGgZXZR1aBxoY2gdTmgfTmggajgBAAB1YmhkKYGUfZQoaAVoBmgHXZRoaSmBlH2UKGgFaAZoB12UaG4pgZR9lChoBWgGaAddlGg/jBdwcm9jZXNzX2NyZWF0ZTJfbWVzc2FnZZSFlIGUfZQoaAVoBmggag0CAABoIWgDaB1oRGgfSwB1YmFoDn2UKGgQXZSMBGlkMTOUYWgTXZRoFV2UaBddlGgZXZSMBXJlZmlklIwXcHJvY2Vzcy1jcmVhdGUyLW1lc3NhZ2WUdWgcaG1oHU5oH05oIGoKAgAAdWJhaA59lChoEF2UaBNdlGgVXZRoF12UaBldlHVoHGhoaB1OaB9OaCBqBwIAAHViYWgOfZQoaBBdlGgTXZRoFV2UaBddlGgZXZR1aBxoY2gdTmgfTmggajgBAAB1YmhkKYGUfZQoaAVoBmgHXZRoaSmBlH2UKGgFaAZoB12UaG4pgZR9lChoBWgGaAddlGg/jA9wcm9jZXNzX21lc3NhZ2WUhZSBlH2UKGgFaAZoIGovAgAAaCFoA2gdaERoH0sAdWJhaA59lChoEF2UjARpZDE0lGFoE12UaBVdlGgXXZRoGV2UjAVyZWZpZJSMD3Byb2Nlc3MtbWVzc2FnZZR1aBxobWgdTmgfTmggaiwCAAB1YmFoDn2UKGgQXZRoE12UaBVdlGgXXZRoGV2UdWgcaGhoHU5oH05oIGopAgAAdWJhaA59lChoEF2UaBNdlGgVXZRoF12UaBldlHVoHGhjaB1OaB9OaCBqOAEAAHViaGQpgZR9lChoBWgGaAddlGhpKYGUfZQoaAVoBmgHXZRobimBlH2UKGgFaAZoB12UaD+MDGV4ZWN1dGVfY29kZZSFlIGUfZQoaAVoBmggalECAABoIWgDaB1oRGgfSwB1YmFoDn2UKGgQXZSMBGlkMTWUYWgTXZRoFV2UaBddlGgZXZSMBXJlZmlklIwMZXhlY3V0ZS1jb2RllHVoHGhtaB1OaB9OaCBqTgIAAHViYWgOfZQoaBBdlGgTXZRoFV2UaBddlGgZXZR1aBxoaGgdTmgfTmggaksCAAB1YmFoDn2UKGgQXZRoE12UaBVdlGgXXZRoGV2UdWgcaGNoHU5oH05oIGo4AQAAdWJoZCmBlH2UKGgFaAZoB12UaGkpgZR9lChoBWgGaAddlGhuKYGUfZQoaAVoBmgHXZRoP4wYY29sbGVjdF90b3VjaGVkX2FjY291bnRzlIWUgZR9lChoBWgGaCBqcwIAAGghaANoHWhEaB9LAHViYWgOfZQoaBBdlIwEaWQxNpRhaBNdlGgVXZRoF12UaBldlIwFcmVmaWSUjBhjb2xsZWN0LXRvdWNoZWQtYWNjb3VudHOUdWgcaG1oHU5oH05oIGpwAgAAdWJhaA59lChoEF2UaBNdlGgVXZRoF12UaBldlHVoHGhoaB1OaB9OaCBqbQIAAHViYWgOfZQoaBBdlGgTXZRoFV2UaBddlGgZXZR1aBxoY2gdTmgfTmggajgBAAB1YmhkKYGUfZQoaAVoBmgHXZRoaSmBlH2UKGgFaAZoB12UaG4pgZR9lChoBWgGaAddlGg/jBpjb2xsZWN0X2FjY291bnRzX3RvX2RlbGV0ZZSFlIGUfZQoaAVoBmggapUCAABoIWgDaB1oRGgfSwB1YmFoDn2UKGgQXZSMBGlkMTeUYWgTXZRoFV2UaBddlGgZXZSMBXJlZmlklIwaY29sbGVjdC1hY2NvdW50cy10by1kZWxldGWUdWgcaG1oHU5oH05oIGqSAgAAdWJhaA59lChoEF2UaBNdlGgVXZRoF12UaBldlHVoHGhoaB1OaB9OaCBqjwIAAHViYWgOfZQoaBBdlGgTXZRoFV2UaBddlGgZXZR1aBxoY2gdTmgfTmggajgBAAB1YmhkKYGUfZQoaAVoBmgHXZRoaSmBlH2UKGgFaAZoB12UaG4pgZR9lChoBWgGaAddlGg/jBRjYWxjdWxhdGVfZ2FzX3JlZnVuZJSFlIGUfZQoaAVoBmggarcCAABoIWgDaB1oRGgfSwB1YmFoDn2UKGgQXZSMBGlkMTiUYWgTXZRoFV2UaBddlGgZXZSMBXJlZmlklIwUY2FsY3VsYXRlLWdhcy1yZWZ1bmSUdWgcaG1oHU5oH05oIGq0AgAAdWJhaA59lChoEF2UaBNdlGgVXZRoF12UaBldlHVoHGhoaB1OaB9OaCBqsQIAAHViYWgOfZQoaBBdlGgTXZRoFV2UaBddlGgZXZR1aBxoY2gdTmgfTmggajgBAAB1YmVoDn2UKGgQXZRoE12UaBVdlGgXXZRoGV2UdWgcaF5oHU5oH05oIGocAQAAdWJlaA59lChoEF2UaBNdlGgVXZRoF12UaBldlHVoHGhjaB1OaB9OaCBoYHViZWgOfZQoaBBdlGgTXZRoFV2UaBddlGgZXZR1aBxoXmgdTmgfTmggaE11YmVoDn2UKGgQXZSMEXRhYmxlLW9mLWNvbnRlbnRzlGFoE12UKIwIY29udGVudHOUjAVsb2NhbJRlaBVdlIwRdGFibGUgb2YgY29udGVudHOUYWgXXZRoGV2UdWgcaEtoHWgeaB9LCGggaDVoIWgDdWJoNCmBlH2UKGgFaAZoB12UKGg5KYGUfZQoaAWMDEludHJvZHVjdGlvbpRoB12UaD+MDEludHJvZHVjdGlvbpSFlIGUfZQoaAVoBmggavICAABoIWgDaB1oRGgfSwB1YmFoDn2UKGgQXZRoE12UaBVdlGgXXZRoGV2UdWgcaDhoHWgeaB9LC2ggau8CAAB1YmhpKYGUfZQoaAWMNUEgc3RyYWlnaHRmb3J3YXJkIGludGVycHJldGVyIHRoYXQgZXhlY3V0ZXMgRVZNIGNvZGUulGgHXZRoP4w1QSBzdHJhaWdodGZvcndhcmQgaW50ZXJwcmV0ZXIgdGhhdCBleGVjdXRlcyBFVk0gY29kZS6UhZSBlH2UKGgFaAZoIGoAAwAAaCFoA2gdaERoH0sAdWJhaA59lChoEF2UaBNdlGgVXZRoF12UaBldlHVoHGhoaB1oHmgfSw1oIGrvAgAAdWJlaA59lChoEF2UaH5haBNdlGgVXZSMDGludHJvZHVjdGlvbpRhaBddlGgZXZR1aBxoM2gdaB5oH0sLaCBoNWghaAN1Ymg0KYGUfZQoaAVoBmgHXZQoaDkpgZR9lChoBYwPTW9kdWxlIENvbnRlbnRzlGgHXZRoP4wPTW9kdWxlIENvbnRlbnRzlIWUgZR9lChoBWgGaCBqGAMAAGghaANoHWhEaB9LAHViYWgOfZQoaBBdlGgTXZRoFV2UaBddlGgZXZR1aBxoOGgdaB5oH0sRaCBqFQMAAHViaDQpgZR9lChoBWgGaAddlChoOSmBlH2UKGgFjAdDbGFzc2VzlGgHXZRoP4wHQ2xhc3Nlc5SFlIGUfZQoaAVoBmggaikDAABoIWgDaB1oRGgfSwB1YmFoDn2UKGgQXZRoE12UaBVdlGgXXZRoGV2UdWgcaDhoHWgeaB9LFGggaiYDAAB1YmgijBB0YWJ1bGFyX2NvbF9zcGVjlJOUKYGUfZQoaAVoBmgHXZRoDn2UKGgQXZRoE12UaBVdlGgXXZRoGV2UjARzcGVjlIwQXFh7MX17Mn1cWHsxfXsyfZR1aBxqNwMAAGgdjH0vaG9tZS9ydW5uZXIvd29yay9leGVjdXRpb24tc3BlY3MvZXhlY3V0aW9uLXNwZWNzL2RvYy9hdXRvYXBpL2V0aGVyZXVtL211aXJfZ2xhY2llci92bS9pbnRlcnByZXRlci9pbmRleC5yc3Q6Mjc6PGF1dG9zdW1tYXJ5PpRoH05oIGomAwAAdWKMFnNwaGlueC5leHQuYXV0b3N1bW1hcnmUjBFhdXRvc3VtbWFyeV90YWJsZZSTlCmBlH2UKGgFjDoKCgoKTWVzc2FnZUNhbGxPdXRwdXQKCk91dHB1dCBvZiBhIHBhcnRpY3VsYXIgbWVzc2FnZSBjYWxslGgHXZRoAIwFdGFibGWUk5QpgZR9lChoBWgGaAddlGgAjAZ0Z3JvdXCUk5QpgZR9lChoBWgGaAddlChoAIwHY29sc3BlY5STlCmBlH2UKGgFaAZoB12UaA59lChoEF2UaBNdlGgVXZRoF12UaBldlIwIY29sd2lkdGiUSwp1aBxqVgMAAGgdTmgfTmggalMDAAB1YmpXAwAAKYGUfZQoaAVoBmgHXZRoDn2UKGgQXZRoE12UaBVdlGgXXZRoGV2UjAhjb2x3aWR0aJRLWnVoHGpWAwAAaB1OaB9OaCBqUwMAAHViaACMBXRib2R5lJOUKYGUfZQoaAVoBmgHXZRoAIwDcm93lJOUKYGUfZQoaAVoBmgHXZQoaACMBWVudHJ5lJOUKYGUfZQoaAVoBmgHXZRoaSmBlH2UKGgFjFI6b2JqOmBNZXNzYWdlQ2FsbE91dHB1dCA8ZXRoZXJldW0ubXVpcl9nbGFjaWVyLnZtLmludGVycHJldGVyLk1lc3NhZ2VDYWxsT3V0cHV0PmBclGgHXZQoaG4pgZR9lChoBWgGaAddlGgAjAdsaXRlcmFslJOUKYGUfZQoaAWMUTpvYmo6YE1lc3NhZ2VDYWxsT3V0cHV0IDxldGhlcmV1bS5tdWlyX2dsYWNpZXIudm0uaW50ZXJwcmV0ZXIuTWVzc2FnZUNhbGxPdXRwdXQ+YJRoB12UaD+MEU1lc3NhZ2VDYWxsT3V0cHV0lIWUgZR9lChoBWgGaCBqhAMAAGghaANoHWhEaB9LAHViYWgOfZQoaBBdlGgTXZQojAR4cmVmlIwCcHmUjAZweS1vYmqUZWgVXZRoF12UaBldlHVoHGqCAwAAaB1OaB9OaCBqfwMAAHViYWgOfZQoaBBdlGgTXZRoFV2UaBddlGgZXZSMCGludGVybmFslIiMBXJlZmlklIw2ZXRoZXJldW0ubXVpcl9nbGFjaWVyLnZtLmludGVycHJldGVyLk1lc3NhZ2VDYWxsT3V0cHV0lIwIcmVmdGl0bGWUjDZldGhlcmV1bS5tdWlyX2dsYWNpZXIudm0uaW50ZXJwcmV0ZXIuTWVzc2FnZUNhbGxPdXRwdXSUdWgcaG1oHU5oH05oIGp7AwAAdWJoP2gGhZSBlH2UKGgFaAZoIGp7AwAAaCFoA2gdaERoH0sAdWJlaA59lChoEF2UaBNdlGgVXZRoF12UaBldlHVoHGhoaB2MfS9ob21lL3J1bm5lci93b3JrL2V4ZWN1dGlvbi1zcGVjcy9leGVjdXRpb24tc3BlY3MvZG9jL2F1dG9hcGkvZXRoZXJldW0vbXVpcl9nbGFjaWVyL3ZtL2ludGVycHJldGVyL2luZGV4LnJzdDoyNzo8YXV0b3N1bW1hcnk+lGgfSwFoIGp4AwAAdWJhaA59lChoEF2UaBNdlGgVXZRoF12UaBldlHVoHGp2AwAAaB1OaB9OaCBqcwMAAHViancDAAApgZR9lChoBWgGaAddlGhpKYGUfZQoaAWMI091dHB1dCBvZiBhIHBhcnRpY3VsYXIgbWVzc2FnZSBjYWxslGgHXZRoP4wjT3V0cHV0IG9mIGEgcGFydGljdWxhciBtZXNzYWdlIGNhbGyUhZSBlH2UKGgFaAZoIGqzAwAAaCFoA2gdaERoH0sAdWJhaA59lChoEF2UaBNdlGgVXZRoF12UaBldlHVoHGhoaB1qRAMAAGgfSwFoIGqwAwAAdWJhaA59lChoEF2UaBNdlGgVXZRoF12UaBldlHVoHGp2AwAAaB1OaB9OaCBqcwMAAHViZWgOfZQoaBBdlGgTXZRoFV2UaBddlGgZXZR1aBxqcQMAAGgdTmgfTmggam4DAAB1YmFoDn2UKGgQXZRoE12UaBVdlGgXXZRoGV2UdWgcamwDAABoHU5oH05oIGpTAwAAdWJlaA59lChoEF2UaBNdlGgVXZRoF12UaBldlIwEY29sc5RLAnVoHGpRAwAAaB1OaB9OaCBqTgMAAHViYWgOfZQoaBBdlGgTXZSMCWxvbmd0YWJsZZRhaBVdlGgXXZRoGV2UdWgcakwDAABoHU5oH05oIGpIAwAAdWJhaA59lChoEF2UaBNdlGgVXZRoF12UaBldlIwJeG1sOnNwYWNllIwIcHJlc2VydmWUdWgcakYDAABoHWpEAwAAaB9OaCBqJgMAAHViZWgOfZQoaBBdlGi/YWgTXZRoFV2UjAdjbGFzc2VzlGFoF12UaBldlHVoHGgzaB1oHmgfSxRoIGoVAwAAdWJoNCmBlH2UKGgFaAZoB12UKGg5KYGUfZQoaAWMCUZ1bmN0aW9uc5RoB12UaD+MCUZ1bmN0aW9uc5SFlIGUfZQoaAVoBmggavMDAABoIWgDaB1oRGgfSwB1YmFoDn2UKGgQXZRoE12UaBVdlGgXXZRoGV2UdWgcaDhoHWgeaB9LHWggavADAAB1Ymo4AwAAKYGUfZQoaAVoBmgHXZRoDn2UKGgQXZRoE12UaBVdlGgXXZRoGV2UjARzcGVjlGpDAwAAdWgcajcDAABoHYx9L2hvbWUvcnVubmVyL3dvcmsvZXhlY3V0aW9uLXNwZWNzL2V4ZWN1dGlvbi1zcGVjcy9kb2MvYXV0b2FwaS9ldGhlcmV1bS9tdWlyX2dsYWNpZXIvdm0vaW50ZXJwcmV0ZXIvaW5kZXgucnN0OjQ0OjxhdXRvc3VtbWFyeT6UaB9OaCBq8AMAAHViakcDAAApgZR9lChoBVh/AgAACgoKCnByb2Nlc3NfbWVzc2FnZV9jYWxsCgpJZiBtZXNzYWdlLmN1cnJlbnQgaXMgZW1wdHkgdGhlbiBpdCBjcmVhdGVzIGEgc21hcnQgY29udHJhY3QKCnByb2Nlc3NfY3JlYXRlX21lc3NhZ2UKCkV4ZWN1dGVzIGEgY2FsbCB0byBjcmVhdGUgYSBzbWFydCBjb250cmFjdC4KCnByb2Nlc3NfY3JlYXRlMl9tZXNzYWdlCgpFeGVjdXRlcyBhIGNhbGwgdG8gY3JlYXRlIGEgc21hcnQgY29udHJhY3QgdmlhIENSRUFURTIgb3Bjb2RlLgoKcHJvY2Vzc19tZXNzYWdlCgpFeGVjdXRlcyBhIGNhbGwgdG8gY3JlYXRlIGEgc21hcnQgY29udHJhY3QuCgpleGVjdXRlX2NvZGUKCkV4ZWN1dGVzIGJ5dGVjb2RlIHByZXNlbnQgaW4gdGhlIG1lc3NhZ2UuCgpjb2xsZWN0X3RvdWNoZWRfYWNjb3VudHMKCkNvbGxlY3QgYWxsIG9mIHRoZSBhY2NvdW50cyB0aGF0IG1heSBuZWVkIHRvIGJlIGRlbGV0ZWQgYmFzZWQgb24KCmNvbGxlY3RfYWNjb3VudHNfdG9fZGVsZXRlCgpDb2xsZWN0cyBhbGwgdGhlIGFjY291bnRzIHRoYXQgd2VyZSBtYXJrZWQgZm9yIGRlbGV0aW9uIGJ5IHRoZQoKY2FsY3VsYXRl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ZXNzX2NyZWF0ZV9tZXNzYWdlPmCUaAddlGhuKYGUfZQoaAVoBmgHXZRqgwMAACmBlH2UKGgFapsEAABoB12UaD+MFnByb2Nlc3NfY3JlYXRlX21lc3NhZ2WUhZSBlH2UKGgFaAZoIGqgBAAAaCFoA2gdaERoH0sAdWJhaA59lChoEF2UaBNdlChqjwMAAIwCcHmUjAZweS1vYmqUZWgVXZRoF12UaBldlHVoHGqCAwAAaB1OaB9OaCBqnQQAAHViYWgOfZQoaBBdlGgTXZRoFV2UaBddlGgZXZSMCGludGVybmFslIiMBXJlZmlklIw7ZXRoZXJldW0ubXVpcl9nbGFjaWVyLnZtLmludGVycHJldGVyLnByb2Nlc3NfY3JlYXRlX21lc3NhZ2WUjAhyZWZ0aXRsZZSMO2V0aGVyZXVtLm11aXJfZ2xhY2llci52bS5pbnRlcnByZXRlci5wcm9jZXNzX2NyZWF0ZV9tZXNzYWdllHVoHGhtaB1OaB9OaCBqmQQAAHViYWgOfZQoaBBdlGgTXZRoFV2UaBddlGgZXZR1aBxoaGgdjH0vaG9tZS9ydW5uZXIvd29yay9leGVjdXRpb24tc3BlY3MvZXhlY3V0aW9uLXNwZWNzL2RvYy9hdXRvYXBpL2V0aGVyZXVtL211aXJfZ2xhY2llci92bS9pbnRlcnByZXRlci9pbmRleC5yc3Q6NDQ6PGF1dG9zdW1tYXJ5PpRoH0sBaCBqlgQAAHViYWgOfZQoaBBdlGgTXZRoFV2UaBddlGgZXZR1aBxqdgMAAGgdTmgfTmggapMEAAB1Ymp3AwAAKYGUfZQoaAVoBmgHXZRoaSmBlH2UKGgFjCtFeGVjdXRlcyBhIGNhbGwgdG8gY3JlYXRlIGEgc21hcnQgY29udHJhY3QulGgHXZRoP4wrRXhlY3V0ZXMgYSBjYWxsIHRvIGNyZWF0ZSBhIHNtYXJ0IGNvbnRyYWN0LpSFlIGUfZQoaAVoBmggasoEAABoIWgDaB1oRGgfSwB1YmFoDn2UKGgQXZRoE12UaBVdlGgXXZRoGV2UdWgcaGhoHYx9L2hvbWUvcnVubmVyL3dvcmsvZXhlY3V0aW9uLXNwZWNzL2V4ZWN1dGlvbi1zcGVjcy9kb2MvYXV0b2FwaS9ldGhlcmV1bS9tdWlyX2dsYWNpZXIvdm0vaW50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YmFoDn2UKGgQXZRoE12UKGqPAwAAjAJweZSMBnB5LW9iapRlaBVdlGgXXZRoGV2UdWgcaoIDAABoHU5oH05oIGpdBgAAdWJhaA59lChoEF2UaBNdlGgVXZRoF12UaBldlIwIaW50ZXJuYWyUiIwFcmVmaWSUjD9ldGhlcmV1bS5tdWlyX2dsYWNpZXIudm0uaW50ZXJwcmV0ZXIuY29sbGVjdF9hY2NvdW50c190b19kZWxldGWUjAhyZWZ0aXRsZZSMP2V0aGVyZXVtLm11aXJfZ2xhY2llci52bS5pbnRlcnByZXRlci5jb2xsZWN0X2FjY291bnRzX3RvX2RlbGV0ZZR1aBxobWgdTmgfTmggalkGAAB1YmFoDn2UKGgQXZRoE12UaBVdlGgXXZRoGV2UdWgcaGhoHYx9L2hvbWUvcnVubmVyL3dvcmsvZXhlY3V0aW9uLXNwZWNzL2V4ZWN1dGlvbi1zcGVjcy9kb2MvYXV0b2FwaS9ldGhlcmV1bS9tdWlyX2dsYWNpZXIvdm0vaW50ZXJwcmV0ZXIvaW5kZXgucnN0OjQ0OjxhdXRvc3VtbWFyeT6UaB9LAWggalYGAAB1YmFoDn2UKGgQXZRoE12UaBVdlGgXXZRoGV2UdWgcanYDAABoHU5oH05oIGpTBgAAdWJqdwMAACmBlH2UKGgFaAZoB12UaGkpgZR9lChoBYw+Q29sbGVjdHMgYWxsIHRoZSBhY2NvdW50cyB0aGF0IHdlcmUgbWFya2VkIGZvciBkZWxldGlvbiBieSB0aGWUaAddlGg/jD5Db2xsZWN0cyBhbGwgdGhlIGFjY291bnRzIHRoYXQgd2VyZSBtYXJrZWQgZm9yIGRlbGV0aW9uIGJ5IHRoZZSFlIGUfZQoaAVoBmggaooGAABoIWgDaB1oRGgfSwB1YmFoDn2UKGgQXZRoE12UaBVdlGgXXZRoGV2UdWgcaGhoHYx9L2hvbWUvcnVubmVyL3dvcmsvZXhlY3V0aW9uLXNwZWNzL2V4ZWN1dGlvbi1zcGVjcy9kb2MvYXV0b2FwaS9ldGhlcmV1bS9tdWlyX2dsYWNpZXIvdm0vaW50ZXJwcmV0ZXIvaW5kZXgucnN0OjQ0OjxhdXRvc3VtbWFyeT6UaB9LAWggaocGAAB1YmFoDn2UKGgQXZRoE12UaBVdlGgXXZRoGV2UdWgcanYDAABoHU5oH05oIGpTBgAAdWJlaA59lChoEF2UaBNdlGgVXZRoF12UaBldlHVoHGpxAwAAaB1OaB9OaCBqKgQAAHVianIDAAApgZR9lChoBWgGaAddlChqdwMAACmBlH2UKGgFaAZoB12UaGkpgZR9lChoBYxXOm9iajpgY2FsY3VsYXRlX2dhc19yZWZ1bmQgPGV0aGVyZXVtLm11aXJfZ2xhY2llci52bS5pbnRlcnByZXRlci5jYWxjdWxhdGVfZ2FzX3JlZnVuZD5glGgHXZRobimBlH2UKGgFaAZoB12UaoMDAAApgZR9lChoBWqtBgAAaAddlGg/jBRjYWxjdWxhdGVfZ2FzX3JlZnVuZJSFlIGUfZQoaAVoBmggarIGAABoIWgDaB1oRGgfSwB1YmFoDn2UKGgQXZRoE12UKGqPAwAAjAJweZSMBnB5LW9iapRlaBVdlGgXXZRoGV2UdWgcaoIDAABoHU5oH05oIGqvBgAAdWJhaA59lChoEF2UaBNdlGgVXZRoF12UaBldlIwIaW50ZXJuYWyUiIwFcmVmaWSUjDlldGhlcmV1bS5tdWlyX2dsYWNpZXIudm0uaW50ZXJwcmV0ZXIuY2FsY3VsYXRlX2dhc19yZWZ1bmSUjAhyZWZ0aXRsZZSMOWV0aGVyZXVtLm11aXJfZ2xhY2llci52bS5pbnRlcnByZXRlci5jYWxjdWxhdGVfZ2FzX3JlZnVuZJR1aBxobWgdTmgfTmggaqsGAAB1YmFoDn2UKGgQXZRoE12UaBVdlGgXXZRoGV2UdWgcaGhoHYx9L2hvbWUvcnVubmVyL3dvcmsvZXhlY3V0aW9uLXNwZWNzL2V4ZWN1dGlvbi1zcGVjcy9kb2MvYXV0b2FwaS9ldGhlcmV1bS9tdWlyX2dsYWNpZXIvdm0vaW50ZXJwcmV0ZXIvaW5kZXgucnN0OjQ0OjxhdXRvc3VtbWFyeT6UaB9LAWggaqgGAAB1YmFoDn2UKGgQXZRoE12UaBVdlGgXXZRoGV2UdWgcanYDAABoHU5oH05oIGqlBgAAdWJqdwMAACmBlH2UKGgFaAZoB12UaGkpgZR9lChoBYxEQWRkcyB1cCB0aGUgZ2FzIHRoYXQgd2FzIHJlZnVuZGVkIGluIGVhY2ggZXhlY3V0aW9uIGZyYW1lIGR1cmluZyB0aGWUaAddlGg/jERBZGRzIHVwIHRoZSBnYXMgdGhhdCB3YXMgcmVmdW5kZWQgaW4gZWFjaCBleGVjdXRpb24gZnJhbWUgZHVyaW5nIHRoZZSFlIGUfZQoaAVoBmggatwGAABoIWgDaB1oRGgfSwB1YmFoDn2UKGgQXZRoE12UaBVdlGgXXZRoGV2UdWgcaGhoHWoLBAAAaB9LAWggatkGAAB1YmFoDn2UKGgQXZRoE12UaBVdlGgXXZRoGV2UdWgcanYDAABoHU5oH05oIGqlBgAAdWJlaA59lChoEF2UaBNdlGgVXZRoF12UaBldlHVoHGpxAwAAaB1OaB9OaCBqKgQAAHViZWgOfZQoaBBdlGgTXZRoFV2UaBddlGgZXZR1aBxqbAMAAGgdTmgfTmggahMEAAB1YmVoDn2UKGgQXZRoE12UaBVdlGgXXZRoGV2UjARjb2xzlEsCdWgcalEDAABoHU5oH05oIGoQBAAAdWJhaA59lChoEF2UaBNdlGrdAwAAYWgVXZRoF12UaBldlHVoHGpMAwAAaB1OaB9OaCBqDAQAAHViYWgOfZQoaBBdlGgTXZRoFV2UaBddlGgZXZSMCXhtbDpzcGFjZZRq6AMAAHVoHGpGAwAAaB1qCwQAAGgfTmggavADAAB1YmVoDn2UKGgQXZRo4WFoE12UaBVdlIwJZnVuY3Rpb25zlGFoF12UaBldlHVoHGgzaB1oHmgfSx1oIGoVAwAAdWJoNCmBlH2UKGgFaAZoB12UKGg5KYGUfZQoaAWMCkF0dHJpYnV0ZXOUaAddlGg/jApBdHRyaWJ1dGVzlIWUgZR9lChoBWgGaCBqGgcAAGghaANoHWhEaB9LAHViYWgOfZQoaBBdlGgTXZRoFV2UaBddlGgZXZR1aBxoOGgdaB5oH0suaCBqFwcAAHViajgDAAApgZR9lChoBWgGaAddlGgOfZQoaBBdlGgTXZRoFV2UaBddlGgZXZSMBHNwZWOUakMDAAB1aBxqNwMAAGgdjH0vaG9tZS9ydW5uZXIvd29yay9leGVjdXRpb24tc3BlY3MvZXhlY3V0aW9uLXNwZWNzL2RvYy9hdXRvYXBpL2V0aGVyZXVtL211aXJfZ2xhY2llci92bS9pbnRlcnByZXRlci9pbmRleC5yc3Q6NTQ6PGF1dG9zdW1tYXJ5PpRoH05oIGoXBwAAdWJqRwMAACmBlH2UKGgFjD0KCgoKU1RBQ0tfREVQVEhfTElNSVQKCgoKTUFYX0NPREVfU0laRQoKCgpSSVBFTUQxNjBfQUREUkVTUwoKlGgHXZRqTQMAACmBlH2UKGgFaAZoB12UalIDAAApgZR9lChoBWgGaAddlChqVwMAACmBlH2UKGgFaAZoB12UaA59lChoEF2UaBNdlGgVXZRoF12UaBldlIwIY29sd2lkdGiUSwp1aBxqVgMAAGgdTmgfTmggajoHAAB1YmpXAwAAKYGUfZQoaAVoBmgHXZRoDn2UKGgQXZRoE12UaBVdlGgXXZRoGV2UjAhjb2x3aWR0aJRLWnVoHGpWAwAAaB1OaB9OaCBqOgcAAHViam0DAAApgZR9lChoBWgGaAddlChqcgMAACmBlH2UKGgFaAZoB12UKGp3AwAAKYGUfZQoaAVoBmgHXZRoaSmBlH2UKGgFjFI6b2JqOmBTVEFDS19ERVBUSF9MSU1JVCA8ZXRoZXJldW0ubXVpcl9nbGFjaWVyLnZtLmludGVycHJldGVyLlNUQUNLX0RFUFRIX0xJTUlUPmBclGgHXZQoaG4pgZR9lChoBWgGaAddlGqDAwAAKYGUfZQoaAWMUTpvYmo6YFNUQUNLX0RFUFRIX0xJTUlUIDxldGhlcmV1bS5tdWlyX2dsYWNpZXIudm0uaW50ZXJwcmV0ZXIuU1RBQ0tfREVQVEhfTElNSVQ+YJRoB12UaD+MEVNUQUNLX0RFUFRIX0xJTUlUlIWUgZR9lChoBWgGaCBqYQcAAGghaANoHWhEaB9LAHViYWgOfZQoaBBdlGgTXZQoao8DAACMAnB5lIwGcHktb2JqlGVoFV2UaBddlGgZXZR1aBxqggMAAGgdTmgfTmggal4HAAB1YmFoDn2UKGgQXZRoE12UaBVdlGgXXZRoGV2UjAhpbnRlcm5hbJSIjAVyZWZpZJSMNmV0aGVyZXVtLm11aXJfZ2xhY2llci52bS5pbnRlcnByZXRlci5TVEFDS19ERVBUSF9MSU1JVJSMCHJlZnRpdGxllIw2ZXRoZXJldW0ubXVpcl9nbGFjaWVyLnZtLmludGVycHJldGVyLlNUQUNLX0RFUFRIX0xJTUlUlHVoHGhtaB1OaB9OaCBqWgcAAHViaD9oBoWUgZR9lChoBWgGaCBqWgcAAGghaANoHWhEaB9LAHViZWgOfZQoaBBdlGgTXZRoFV2UaBddlGgZXZR1aBxoaGgdjH0vaG9tZS9ydW5uZXIvd29yay9leGVjdXRpb24tc3BlY3MvZXhlY3V0aW9uLXNwZWNzL2RvYy9hdXRvYXBpL2V0aGVyZXVtL211aXJfZ2xhY2llci92bS9pbnRlcnByZXRlci9pbmRleC5yc3Q6NTQ6PGF1dG9zdW1tYXJ5PpRoH0sBaCBqVwcAAHViYWgOfZQoaBBdlGgTXZRoFV2UaBddlGgZXZR1aBxqdgMAAGgdTmgfTmggalQHAAB1Ymp3AwAAKYGUfZQoaAVoBmgHXZRoaSmBlH2UKGgFaAZoB12UaA59lChoEF2UaBNdlGgVXZRoF12UaBldlHVoHGhoaB1OaB9OaCBqjAcAAHViYWgOfZQoaBBdlGgTXZRoFV2UaBddlGgZXZR1aBxqdgMAAGgdTmgfTmggalQHAAB1YmVoDn2UKGgQXZRoE12UaBVdlGgXXZRoGV2UdWgcanEDAABoHU5oH05oIGpRBwAAdWJqcgMAACmBlH2UKGgFaAZoB12UKGp3AwAAKYGUfZQoaAVoBmgHXZRoaSmBlH2UKGgFjEo6b2JqOmBNQVhfQ09ERV9TSVpFIDxldGhlcmV1bS5tdWlyX2dsYWNpZXIudm0uaW50ZXJwcmV0ZXIuTUFYX0NPREVfU0laRT5gXJRoB12UKGhuKYGUfZQoaAVoBmgHXZRqgwMAACmBlH2UKGgFjEk6b2JqOmBNQVhfQ09ERV9TSVpFIDxldGhlcmV1bS5tdWlyX2dsYWNpZXIudm0uaW50ZXJwcmV0ZXIuTUFYX0NPREVfU0laRT5glGgHXZRoP4wNTUFYX0NPREVfU0laRZSFlIGUfZQoaAVoBmggarEHAABoIWgDaB1oRGgfSwB1YmFoDn2UKGgQXZRoE12UKGqPAwAAjAJweZSMBnB5LW9iapRlaBVdlGgXXZRoGV2UdWgcaoIDAABoHU5oH05oIGquBwAAdWJhaA59lChoEF2UaBNdlGgVXZRoF12UaBldlIwIaW50ZXJuYWyUiIwFcmVmaWSUjDJldGhlcmV1bS5tdWlyX2dsYWNpZXIudm0uaW50ZXJwcmV0ZXIuTUFYX0NPREVfU0laRZSMCHJlZnRpdGxllIwyZXRoZXJldW0ubXVpcl9nbGFjaWVyLnZtLmludGVycHJldGVyLk1BWF9DT0RFX1NJWkWUdWgcaG1oHU5oH05oIGqqBwAAdWJoP2gGhZSBlH2UKGgFaAZoIGqqBwAAaCFoA2gdaERoH0sAdWJlaA59lChoEF2UaBNdlGgVXZRoF12UaBldlHVoHGhoaB2MfS9ob21lL3J1bm5lci93b3JrL2V4ZWN1dGlvbi1zcGVjcy9leGVjdXRpb24tc3BlY3MvZG9jL2F1dG9hcGkvZXRoZXJldW0vbXVpcl9nbGFjaWVyL3ZtL2ludGVycHJldGVyL2luZGV4LnJzdDo1NDo8YXV0b3N1bW1hcnk+lGgfSwFoIGqnBwAAdWJhaA59lChoEF2UaBNdlGgVXZRoF12UaBldlHVoHGp2AwAAaB1OaB9OaCBqpAcAAHViancDAAApgZR9lChoBWgGaAddlGhpKYGUfZQoaAVoBmgHXZRoDn2UKGgQXZRoE12UaBVdlGgXXZRoGV2UdWgcaGhoHU5oH05oIGrcBwAAdWJhaA59lChoEF2UaBNdlGgVXZRoF12UaBldlHVoHGp2AwAAaB1OaB9OaCBqpAcAAHViZWgOfZQoaBBdlGgTXZRoFV2UaBddlGgZXZR1aBxqcQMAAGgdTmgfTmggalEHAAB1YmpyAwAAKYGUfZQoaAVoBmgHXZQoancDAAApgZR9lChoBWgGaAddlGhpKYGUfZQoaAWMUjpvYmo6YFJJUEVNRDE2MF9BRERSRVNTIDxldGhlcmV1bS5tdWlyX2dsYWNpZXIudm0uaW50ZXJwcmV0ZXIuUklQRU1EMTYwX0FERFJFU1M+YFyUaAddlChobimBlH2UKGgFaAZoB12UaoMDAAApgZR9lChoBYxROm9iajpgUklQRU1EMTYwX0FERFJFU1MgPGV0aGVyZXVtLm11aXJfZ2xhY2llci52bS5pbnRlcnByZXRlci5SSVBFTUQxNjBfQUREUkVTUz5glGgHXZRoP4wRUklQRU1EMTYwX0FERFJFU1OUhZSBlH2UKGgFaAZoIGoBCAAAaCFoA2gdaERoH0sAdWJhaA59lChoEF2UaBNdlChqjwMAAIwCcHmUjAZweS1vYmqUZWgVXZRoF12UaBldlHVoHGqCAwAAaB1OaB9OaCBq/gcAAHViYWgOfZQoaBBdlGgTXZRoFV2UaBddlGgZXZSMCGludGVybmFslIiMBXJlZmlklIw2ZXRoZXJldW0ubXVpcl9nbGFjaWVyLnZtLmludGVycHJldGVyLlJJUEVNRDE2MF9BRERSRVNTlIwIcmVmdGl0bGWUjDZldGhlcmV1bS5tdWlyX2dsYWNpZXIudm0uaW50ZXJwcmV0ZXIuUklQRU1EMTYwX0FERFJFU1OUdWgcaG1oHU5oH05oIGr6BwAAdWJoP2gGhZSBlH2UKGgFaAZoIGr6BwAAaCFoA2gdaERoH0sAdWJlaA59lChoEF2UaBNdlGgVXZRoF12UaBldlHVoHGhoaB2MfS9ob21lL3J1bm5lci93b3JrL2V4ZWN1dGlvbi1zcGVjcy9leGVjdXRpb24tc3BlY3MvZG9jL2F1dG9hcGkvZXRoZXJldW0vbXVpcl9nbGFjaWVyL3ZtL2ludGVycHJldGVyL2luZGV4LnJzdDo1NDo8YXV0b3N1bW1hcnk+lGgfSwFoIGr3BwAAdWJhaA59lChoEF2UaBNdlGgVXZRoF12UaBldlHVoHGp2AwAAaB1OaB9OaCBq9AcAAHViancDAAApgZR9lChoBWgGaAddlGhpKYGUfZQoaAVoBmgHXZRoDn2UKGgQXZRoE12UaBVdlGgXXZRoGV2UdWgcaGhoHU5oH05oIGosCAAAdWJhaA59lChoEF2UaBNdlGgVXZRoF12UaBldlHVoHGp2AwAAaB1OaB9OaCBq9AcAAHViZWgOfZQoaBBdlGgTXZRoFV2UaBddlGgZXZR1aBxqcQMAAGgdTmgfTmggalEHAAB1YmVoDn2UKGgQXZRoE12UaBVdlGgXXZRoGV2UdWgcamwDAABoHU5oH05oIGo6BwAAdWJlaA59lChoEF2UaBNdlGgVXZRoF12UaBldlIwEY29sc5RLAnVoHGpRAwAAaB1OaB9OaCBqNwcAAHViYWgOfZQoaBBdlGgTXZRq3QMAAGFoFV2UaBddlGgZXZR1aBxqTAMAAGgdTmgfTmggajMHAAB1YmFoDn2UKGgQXZRoE12UaBVdlGgXXZRoGV2UjAl4bWw6c3BhY2WUaugDAAB1aBxqRgMAAGgdajIHAABoH05oIGoXBwAAdWJlaA59lChoEF2UagMBAABhaBNdlGgVXZSMCmF0dHJpYnV0ZXOUYWgXXZRoGV2UdWgcaDNoHWgeaB9LLmggahUDAAB1YmVoDn2UKGgQXZRooGFoE12UaBVdlIwPbW9kdWxlIGNvbnRlbnRzlGFoF12UaBldlHVoHGgzaB1oHmgfSxFoIGg1aCFoA3ViaDQpgZR9lChoBWgGaAddlChoOSmBlH2UKGgFjA5Nb2R1bGUgRGV0YWlsc5RoB12UaD+MDk1vZHVsZSBEZXRhaWxzlIWUgZR9lChoBWgGaCBqbwgAAGghaANoHWhEaB9LAHViYWgOfZQoaBBdlGgTXZRoFV2UaBddlGgZXZR1aBxoOGgdaB5oH0s4aCBqbAgAAGghaAN1Ymg0KYGUfZQoaAVoBmgHXZQoaDkpgZR9lChoBYwRU1RBQ0tfREVQVEhfTElNSVSUaAddlGg/jBFTVEFDS19ERVBUSF9MSU1JVJSFlIGUfZQoaAVoBmggaoAIAABoIWgDaB1oRGgfSwB1YmFoDn2UKGgQXZRoE12UaBVdlGgXXZRoGV2UdWgcaDhoHWgeaB9LO2ggan0IAAB1YmgkKYGUfZQoaAVoBmgHXZRoDn2UKGgQXZRoE12UaBVdlGgXXZRoGV2UjAdlbnRyaWVzlF2UKIwGc2luZ2xllIxCU1RBQ0tfREVQVEhfTElNSVQgKGluIG1vZHVsZSBldGhlcmV1bS5tdWlyX2dsYWNpZXIudm0uaW50ZXJwcmV0ZXIplIw2ZXRoZXJldW0ubXVpcl9nbGFjaWVyLnZtLmludGVycHJldGVyLlNUQUNLX0RFUFRIX0xJTUlUlGgGTnSUYXVoHGgjaB1OaB9OaCBqfQgAAHViaCKMBGRlc2OUk5QpgZR9lChoBWgGaAddlChoIowOZGVzY19zaWduYXR1cmWUk5QpgZR9lChoBYwRU1RBQ0tfREVQVEhfTElNSVSUaAddlGgijAlkZXNjX25hbWWUk5QpgZR9lChoBWqmCAAAaAddlGg/jBFTVEFDS19ERVBUSF9MSU1JVJSFlIGUfZQoaAVoBmggaqoIAABoIWgDaB1oRGgfSwB1YmFoDn2UKGgQXZRoE12UKIwIc2lnLW5hbWWUjAhkZXNjbmFtZZSMCHNpZy1uYW1llIwIZGVzY25hbWWUZWgVXZRoF12UaBldlIwJeG1sOnNwYWNllGroAwAAdWgcaqgIAABoHWgeaB9LQmggaqQIAAB1YmFoDn2UKGgQXZRqmwgAAGFoE12UKIwDc2lnlIwKc2lnLW9iamVjdJSMAnB5lIwDc2lnlIwKc2lnLW9iamVjdJRlaBVdlGgXXZRoGV2UjAZtb2R1bGWUjCRldGhlcmV1bS5tdWlyX2dsYWNpZXIudm0uaW50ZXJwcmV0ZXKUjAVjbGFzc5RoBowIZnVsbG5hbWWUaqYIAAB1aBxqoggAAGgdaB5oH0s/aCBqnwgAAHViaCKMDGRlc2NfY29udGVudJSTlCmBlH2UKGgFaAZoB12UaA59lChoEF2UaBNdlGgVXZRoF12UaBldlHVoHGrLCAAAaB1oHmgfS0JoIGqfCAAAdWJlaA59lChoEF2UaBNdlChqwQgAAIwEZGF0YZRlaBVdlGgXXZRoGV2UjAZkb21haW6UasEIAACMB29ianR5cGWUatkIAACMCGRlc2N0eXBllGrZCAAAjAdub2luZGV4lIl1aBxqnQgAAGgdTmgfTmggan0IAAB1YmgAjA1saXRlcmFsX2Jsb2NrlJOUKYGUfZQoaAWMH1NUQUNLX0RFUFRIX0xJTUlUID0gVTI1NigxMDI0KQqUaAddlGg/jB9TVEFDS19ERVBUSF9MSU1JVCA9IFUyNTYoMTAyNCkKlIWUgZR9lChoBWgGaCBq4wgAAGghaANoHWhEaB9LAHViYWgOfZQoaBBdlGgTXZRoFV2UaBddlGgZXZSMBnNvdXJjZZSMXS9ob21lL3J1bm5lci93b3JrL2V4ZWN1dGlvbi1zcGVjcy9leGVjdXRpb24tc3BlY3Mvc3JjL2V0aGVyZXVtL211aXJfZ2xhY2llci92bS9pbnRlcnByZXRlci5weZSMCXhtbDpzcGFjZZRq6AMAAIwFZm9yY2WUiYwIbGFuZ3VhZ2WUjAZweXRob26UjA5oaWdobGlnaHRfYXJnc5R9lIwLbGluZW5vc3RhcnSUSwFzjAdsaW5lbm9zlIl1aBxq4QgAAGgdaB5oH0tDaCBqfQgAAHViZWgOfZQoaBBdlGpQAQAAYWgTXZRoFV2UjBFzdGFja19kZXB0aF9saW1pdJRhaBddlGgZXZR1aBxoM2gdaB5oH0s7aCBqbAgAAGghaAN1Ymg0KYGUfZQoaAVoBmgHXZQoaDkpgZR9lChoBYwNTUFYX0NPREVfU0laRZRoB12UaD+MDU1BWF9DT0RFX1NJWkWUhZSBlH2UKGgFaAZoIGoFCQAAaCFoA2gdaERoH0sAdWJhaA59lChoEF2UaBNdlGgVXZRoF12UaBldlHVoHGg4aB1oHmgfS0loIGoCCQAAdWJoJCmBlH2UKGgFaAZoB12UaA59lChoEF2UaBNdlGgVXZRoF12UaBldlIwHZW50cmllc5RdlChqmQgAAIw+TUFYX0NPREVfU0laRSAoaW4gbW9kdWxlIGV0aGVyZXVtLm11aXJfZ2xhY2llci52bS5pbnRlcnByZXRlcimUjDJldGhlcmV1bS5tdWlyX2dsYWNpZXIudm0uaW50ZXJwcmV0ZXIuTUFYX0NPREVfU0laRZRoBk50lGF1aBxoI2gdTmgfTmggagIJAAB1YmqeCAAAKYGUfZQoaAVoBmgHXZQoaqMIAAApgZR9lChoBYwNTUFYX0NPREVfU0laRZRoB12UaqkIAAApgZR9lChoBWomCQAAaAddlGg/jA1NQVhfQ09ERV9TSVpFlIWUgZR9lChoBWgGaCBqKAkAAGghaANoHWhEaB9LAHViYWgOfZQoaBBdlGgTXZQoarQIAABqtQgAAGq2CAAAarcIAABlaBVdlGgXXZRoGV2UjAl4bWw6c3BhY2WUaugDAAB1aBxqqAgAAGgdaB5oH0tQaCBqJAkAAHViYWgOfZQoaBBdlGofCQAAYWgTXZQoar8IAABqwAgAAIwCcHmUasIIAABqwwgAAGVoFV2UaBddlGgZXZSMBm1vZHVsZZRqyAgAAIwFY2xhc3OUaAaMCGZ1bGxuYW1llGomCQAAdWgcaqIIAABoHWgeaB9LTWggaiEJAAB1YmrMCAAAKYGUfZQoaAVoBmgHXZRoDn2UKGgQXZRoE12UaBVdlGgXXZRoGV2UdWgcassIAABoHWgeaB9LUGggaiEJAAB1YmVoDn2UKGgQXZRoE12UKGo5CQAAjARkYXRhlGVoFV2UaBddlGgZXZSMBmRvbWFpbpRqOQkAAIwHb2JqdHlwZZRqTAkAAIwIZGVzY3R5cGWUakwJAACMB25vaW5kZXiUiXVoHGqdCAAAaB1OaB9OaCBqAgkAAHViauIIAAApgZR9lChoBYwXTUFYX0NPREVfU0laRSA9IDB4NjAwMAqUaAddlGg/jBdNQVhfQ09ERV9TSVpFID0gMHg2MDAwCpSFlIGUfZQoaAVoBmggalQJAABoIWgDaB1oRGgfSwB1YmFoDn2UKGgQXZRoE12UaBVdlGgXXZRoGV2UjAZzb3VyY2WUjF0vaG9tZS9ydW5uZXIvd29yay9leGVjdXRpb24tc3BlY3MvZXhlY3V0aW9uLXNwZWNzL3NyYy9ldGhlcmV1bS9tdWlyX2dsYWNpZXIvdm0vaW50ZXJwcmV0ZXIucHmUjAl4bWw6c3BhY2WUaugDAACMBWZvcmNllImMCGxhbmd1YWdllIwGcHl0aG9ulIwOaGlnaGxpZ2h0X2FyZ3OUfZRq+QgAAEsBc4wHbGluZW5vc5SJdWgcauEIAABoHWgeaB9LUWggagIJAAB1YmVoDn2UKGgQXZRqcgEAAGFoE12UaBVdlIwNbWF4X2NvZGVfc2l6ZZRhaBddlGgZXZR1aBxoM2gdaB5oH0tJaCBqbAgAAGghaAN1Ymg0KYGUfZQoaAVoBmgHXZQoaDkpgZR9lChoBYwRUklQRU1EMTYwX0FERFJFU1OUaAddlGg/jBFSSVBFTUQxNjBfQUREUkVTU5SFlIGUfZQoaAVoBmgganUJAABoIWgDaB1oRGgfSwB1YmFoDn2UKGgQXZRoE12UaBVdlGgXXZRoGV2UdWgcaDhoHWgeaB9LV2gganIJAAB1YmgkKYGUfZQoaAVoBmgHXZRoDn2UKGgQXZRoE12UaBVdlGgXXZRoGV2UjAdlbnRyaWVzlF2UKGqZCAAAjEJSSVBFTUQxNjBfQUREUkVTUyAoaW4gbW9kdWxlIGV0aGVyZXVtLm11aXJfZ2xhY2llci52bS5pbnRlcnByZXRlcimUjDZldGhlcmV1bS5tdWlyX2dsYWNpZXIudm0uaW50ZXJwcmV0ZXIuUklQRU1EMTYwX0FERFJFU1OUaAZOdJRhdWgcaCNoHU5oH05oIGpyCQAAdWJqnggAACmBlH2UKGgFaAZoB12UKGqjCAAAKYGUfZQoaAWMEVJJUEVNRDE2MF9BRERSRVNTlGgHXZRqqQgAACmBlH2UKGgFapYJAABoB12UaD+MEVJJUEVNRDE2MF9BRERSRVNTlIWUgZR9lChoBWgGaCBqmAkAAGghaANoHWhEaB9LAHViYWgOfZQoaBBdlGgTXZQoarQIAABqtQgAAGq2CAAAarcIAABlaBVdlGgXXZRoGV2UjAl4bWw6c3BhY2WUaugDAAB1aBxqqAgAAGgdaB5oH0teaCBqlAkAAHViYWgOfZQoaBBdlGqPCQAAYWgTXZQoar8IAABqwAgAAIwCcHmUasIIAABqwwgAAGVoFV2UaBddlGgZXZSMBm1vZHVsZZRqyAgAAIwFY2xhc3OUaAaMCGZ1bGxuYW1llGqWCQAAdWgcaqIIAABoHWgeaB9LW2ggapEJAAB1YmrMCAAAKYGUfZQoaAVoBmgHXZRoDn2UKGgQXZRoE12UaBVdlGgXXZRoGV2UdWgcassIAABoHWgeaB9LXmggapEJAAB1YmVoDn2UKGgQXZRoE12UKGqpCQAAjARkYXRhlGVoFV2UaBddlGgZXZSMBmRvbWFpbpRqqQkAAIwHb2JqdHlwZZRqvAkAAIwIZGVzY3R5cGWUarwJAACMB25vaW5kZXiUiXVoHGqdCAAAaB1OaB9OaCBqcgkAAHViauIIAAApgZR9lChoBYwoUklQRU1EMTYwX0FERFJFU1MgPSB0b19hZGRyZXNzKFVpbnQoMykpCpRoB12UaD+MKFJJUEVNRDE2MF9BRERSRVNTID0gdG9fYWRkcmVzcyhVaW50KDMpKQqUhZSBlH2UKGgFaAZoIGrECQAAaCFoA2gdaERoH0sAdWJhaA59lChoEF2UaBNdlGgVXZRoF12UaBldlIwGc291cmNllIxdL2hvbWUvcnVubmVyL3dvcmsvZXhlY3V0aW9uLXNwZWNzL2V4ZWN1dGlvbi1zcGVjcy9zcmMvZXRoZXJldW0vbXVpcl9nbGFjaWVyL3ZtL2ludGVycHJldGVyLnB5lIwJeG1sOnNwYWNllGroAwAAjAVmb3JjZZSJjAhsYW5ndWFnZZSMBnB5dGhvbpSMDmhpZ2hsaWdodF9hcmdzlH2UavkIAABLAXOMB2xpbmVub3OUiXVoHGrhCAAAaB1oHmgfS19oIGpyCQAAdWJlaA59lChoEF2UapQBAABhaBNdlGgVXZSMEXJpcGVtZDE2MF9hZGRyZXNzlGFoF12UaBldlHVoHGgzaB1oHmgfS1doIGpsCAAAaCFoA3ViaDQpgZR9lChoBWgGaAddlChoOSmBlH2UKGgFjBFNZXNzYWdlQ2FsbE91dHB1dJRoB12UaD+MEU1lc3NhZ2VDYWxsT3V0cHV0lIWUgZR9lChoBWgGaCBq5QkAAGghaANoHWhEaB9LAHViYWgOfZQoaBBdlGgTXZRoFV2UaBddlGgZXZR1aBxoOGgdaB5oH0tlaCBq4gkAAGghaAN1YmhpKYGUfZQoaAWMI091dHB1dCBvZiBhIHBhcnRpY3VsYXIgbWVzc2FnZSBjYWxslGgHXZRoP4wjT3V0cHV0IG9mIGEgcGFydGljdWxhciBtZXNzYWdlIGNhbGyUhZSBlH2UKGgFaAZoIGrzCQAAaCFoA2gdaERoH0sAdWJhaA59lChoEF2UaBNdlGgVXZRoF12UaBldlHVoHGhoaB1oHmgfS2hoIGriCQAAaCFoA3ViaGkpgZR9lChoBYwXQ29udGFpbnMgdGhlIGZvbGxvd2luZzqUaAddlGg/jBdDb250YWlucyB0aGUgZm9sbG93aW5nOpSFlIGUfZQoaAVoBmggagEKAABoIWgDaB1oRGgfSwB1YmFoDn2UKGgQXZRoE12UaBVdlGgXXZRoGV2UdWgcaGhoHWgeaB9LamggauIJAABoIWgDdWJoAIwLYmxvY2tfcXVvdGWUk5QpgZR9lChoBWgGaAddlGgAjA9lbnVtZXJhdGVkX2xpc3SUk5QpgZR9lChoBWgGaAddlChoZCmBlH2UKGgFjCpgZ2FzX2xlZnRgOiByZW1haW5pbmcgZ2FzIGFmdGVyIGV4ZWN1dGlvbi6UaAddlGhpKYGUfZQoaAVqGwoAAGgHXZQoam0EAAApgZR9lChoBYwKYGdhc19sZWZ0YJRoB12UaD+MCGdhc19sZWZ0lIWUgZR9lChoBWgGaCBqIAoAAGghaANoHWhEaB9LAHViYWgOfZQoaBBdlGgTXZRoFV2UaBddlGgZXZR1aBxqbAQAAGgdTmgfTmggah0KAAB1Ymg/jCA6IHJlbWFpbmluZyBnYXMgYWZ0ZXIgZXhlY3V0aW9uLpSFlIGUfZQoaAVoBmggah0KAABoIWgDaB1oRGgfSwB1YmVoDn2UKGgQXZRoE12UaBVdlGgXXZRoGV2UdWgcaGhoHWgeaB9LbGggahkKAAB1YmFoDn2UKGgQXZRoE12UaBVdlGgXXZRoGV2UdWgcaGNoHU5oH05oIGoWCgAAdWJoZCmBlH2UKGgFjDBgcmVmdW5kX2NvdW50ZXJgOiBnYXMgdG8gcmVmdW5kIGFmdGVyIGV4ZWN1dGlvbi6UaAddlGhpKYGUfZQoaAVqQAoAAGgHXZQoam0EAAApgZR9lChoBYwQYHJlZnVuZF9jb3VudGVyYJRoB12UaD+MDnJlZnVuZF9jb3VudGVylIWUgZR9lChoBWgGaCBqRQoAAGghaANoHWhEaB9LAHViYWgOfZQoaBBdlGgTXZRoFV2UaBddlGgZXZR1aBxqbAQAAGgdTmgfTmggakIKAAB1Ymg/jCA6IGdhcyB0byByZWZ1bmQgYWZ0ZXIgZXhlY3V0aW9uLpSFlIGUfZQoaAVoBmggakIKAABoIWgDaB1oRGgfSwB1YmVoDn2UKGgQXZRoE12UaBVdlGgXXZRoGV2UdWgcaGhoHWgeaB9LbWggaj4KAAB1YmFoDn2UKGgQXZRoE12UaBVdlGgXXZRoGV2UdWgcaGNoHU5oH05oIGoWCgAAdWJoZCmBlH2UKGgFjDFgbG9nc2A6IGxpc3Qgb2YgYExvZ2AgZ2VuZXJhdGVkIGR1cmluZyBleGVjdXRpb24ulGgHXZRoaSmBlH2UKGgFamUKAABoB12UKGptBAAAKYGUfZQoaAWMBmBsb2dzYJRoB12UaD+MBGxvZ3OUhZSBlH2UKGgFaAZoIGpqCgAAaCFoA2gdaERoH0sAdWJhaA59lChoEF2UaBNdlGgVXZRoF12UaBldlHVoHGpsBAAAaB1OaB9OaCBqZwoAAHViaD+MCjogbGlzdCBvZiCUhZSBlH2UKGgFaAZoIGpnCgAAaCFoA2gdaERoH0sAdWJqbQQAACmBlH2UKGgFjAVgTG9nYJRoB12UaD+MA0xvZ5SFlIGUfZQoaAVoBmgganwKAABoIWgDaB1oRGgfSwB1YmFoDn2UKGgQXZRoE12UaBVdlGgXXZRoGV2UdWgcamwEAABoHU5oH05oIGpnCgAAdWJoP4wcIGdlbmVyYXRlZCBkdXJpbmcgZXhlY3V0aW9uLpSFlIGUfZQoaAVoBmggamcKAABoIWgDaB1oRGgfSwB1YmVoDn2UKGgQXZRoE12UaBVdlGgXXZRoGV2UdWgcaGhoHWgeaB9LbmggamMKAAB1YmFoDn2UKGgQXZRoE12UaBVdlGgXXZRoGV2UdWgcaGNoHU5oH05oIGoWCgAAdWJoZCmBlH2UKGgFjDtgYWNjb3VudHNfdG9fZGVsZXRlYDogQ29udHJhY3RzIHdoaWNoIGhhdmUgc2VsZi1kZXN0cnVjdGVkLpRoB12UaGkpgZR9lChoBWqcCgAAaAddlChqbQQAACmBlH2UKGgFjBRgYWNjb3VudHNfdG9fZGVsZXRlYJRoB12UaD+MEmFjY291bnRzX3RvX2RlbGV0ZZSFlIGUfZQoaAVoBmggaqEKAABoIWgDaB1oRGgfSwB1YmFoDn2UKGgQXZRoE12UaBVdlGgXXZRoGV2UdWgcamwEAABoHU5oH05oIGqeCgAAdWJoP4wnOiBDb250cmFjdHMgd2hpY2ggaGF2ZSBzZWxmLWRlc3RydWN0ZWQulIWUgZR9lChoBWgGaCBqngoAAGghaANoHWhEaB9LAHViZWgOfZQoaBBdlGgTXZRoFV2UaBddlGgZXZR1aBxoaGgdaB5oH0tvaCBqmgoAAHViYWgOfZQoaBBdlGgTXZRoFV2UaBddlGgZXZR1aBxoY2gdTmgfTmggahYKAAB1YmhkKYGUfZQoaAWMNGB0b3VjaGVkX2FjY291bnRzYDogQWNjb3VudHMgdGhhdCBoYXZlIGJlZW4gdG91Y2hlZC6UaAddlGhpKYGUfZQoaAVqwQoAAGgHXZQoam0EAAApgZR9lChoBYwSYHRvdWNoZWRfYWNjb3VudHNglGgHXZRoP4wQdG91Y2hlZF9hY2NvdW50c5SFlIGUfZQoaAVoBmggasYKAABoIWgDaB1oRGgfSwB1YmFoDn2UKGgQXZRoE12UaBVdlGgXXZRoGV2UdWgcamwEAABoHU5oH05oIGrDCgAAdWJoP4wiOiBBY2NvdW50cyB0aGF0IGhhdmUgYmVlbiB0b3VjaGVkLpSFlIGUfZQoaAVoBmggasMKAABoIWgDaB1oRGgfSwB1YmVoDn2UKGgQXZRoE12UaBVdlGgXXZRoGV2UdWgcaGhoHWgeaB9LcGggar8KAAB1YmFoDn2UKGgQXZRoE12UaBVdlGgXXZRoGV2UdWgcaGNoHU5oH05oIGoWCgAAdWJoZCmBlH2UKGgFjDVgaGFzX2VycmVkYDogVHJ1ZSBpZiBleGVjdXRpb24gaGFzIGNhdXNlZCBhbiBlcnJvci4KCpRoB12UaGkpgZR9lChoBYwzYGhhc19lcnJlZGA6IFRydWUgaWYgZXhlY3V0aW9uIGhhcyBjYXVzZWQgYW4gZXJyb3IulGgHXZQoam0EAAApgZR9lChoBYwLYGhhc19lcnJlZGCUaAddlGg/jAloYXNfZXJyZWSUhZSBlH2UKGgFaAZoIGrsCgAAaCFoA2gdaERoH0sAdWJhaA59lChoEF2UaBNdlGgVXZRoF12UaBldlHVoHGpsBAAAaB1OaB9OaCBq6AoAAHViaD+MKDogVHJ1ZSBpZiBleGVjdXRpb24gaGFzIGNhdXNlZCBhbiBlcnJvci6UhZSBlH2UKGgFaAZoIGroCgAAaCFoA2gdaERoH0sAdWJlaA59lChoEF2UaBNdlGgVXZRoF12UaBldlHVoHGhoaB1oHmgfS3FoIGrkCgAAdWJhaA59lChoEF2UaBNdlGgVXZRoF12UaBldlHVoHGhjaB1OaB9OaCBqFgoAAHViZWgOfZQoaBBdlGgTXZRoFV2UaBddlGgZXZSMCGVudW10eXBllIwGYXJhYmljlIwGcHJlZml4lGgGjAZzdWZmaXiUjAEulHVoHGoUCgAAaB1OaB9OaCBqEQoAAHViYWgOfZQoaBBdlGgTXZRoFV2UaBddlGgZXZR1aBxqDwoAAGgdaERoH0sAaCBq4gkAAGghaAN1YmgkKYGUfZQoaAVoBmgHXZRoDn2UKGgQXZRoE12UaBVdlGgXXZRoGV2UjAdlbnRyaWVzlF2UKGqZCAAAjEFNZXNzYWdlQ2FsbE91dHB1dCAoY2xhc3MgaW4gZXRoZXJldW0ubXVpcl9nbGFjaWVyLnZtLmludGVycHJldGVyKZSMNmV0aGVyZXVtLm11aXJfZ2xhY2llci52bS5pbnRlcnByZXRlci5NZXNzYWdlQ2FsbE91dHB1dJRoBk50lGF1aBxoI2gdaERoH0sAaCBq4gkAAGghaAN1YmqeCAAAKYGUfZQoaAVoBmgHXZQoaqMIAAApgZR9lChoBYwRTWVzc2FnZUNhbGxPdXRwdXSUaAddlChoIowPZGVzY19hbm5vdGF0aW9ulJOUKYGUfZQoaAWMBmNsYXNzIJRoB12UaD+MBmNsYXNzIJSFlIGUfZQoaAVoBmggajILAABoIWgDaB1oRGgfSwB1YmFoDn2UKGgQXZRoE12UaBVdlGgXXZRoGV2UjAl4bWw6c3BhY2WUaugDAAB1aBxqMAsAAGgdaB5oH0uhaCBqLAsAAHViaqkIAAApgZR9lChoBWouCwAAaAddlGg/jBFNZXNzYWdlQ2FsbE91dHB1dJSFlIGUfZQoaAVoBmggakELAABoIWgDaB1oRGgfSwB1YmFoDn2UKGgQXZRoE12UKGq0CAAAarUIAABqtggAAGq3CAAAZWgVXZRoF12UaBldlIwJeG1sOnNwYWNllGroAwAAdWgcaqgIAABoHWgeaB9LoWggaiwLAAB1YmVoDn2UKGgQXZRqJwsAAGFoE12UKGq/CAAAasAIAACMAnB5lGrCCAAAasMIAABlaBVdlGgXXZRoGV2UjAZtb2R1bGWUasgIAACMBWNsYXNzlGgGjAhmdWxsbmFtZZRqLgsAAHVoHGqiCAAAaB1oHmgfS3RoIGopCwAAaCFoA3ViaswIAAApgZR9lChoBWgGaAddlChoJCmBlH2UKGgFaAZoB12UaA59lChoEF2UaBNdlGgVXZRoF12UaBldlIwHZW50cmllc5RdlChqmQgAAIwmZ2FzX2xlZnQgKE1lc3NhZ2VDYWxsT3V0cHV0IGF0dHJpYnV0ZSmUjD9ldGhlcmV1bS5tdWlyX2dsYWNpZXIudm0uaW50ZXJwcmV0ZXIuTWVzc2FnZUNhbGxPdXRwdXQuZ2FzX2xlZnSUaAZOdJRhdWgcaCNoHWhEaB9LAGggalkLAABoIWgDdWJqnggAACmBlH2UKGgFaAZoB12UKGqjCAAAKYGUfZQoaAWMCGdhc19sZWZ0lGgHXZQoaqkIAAApgZR9lChoBWpvCwAAaAddlGg/jAhnYXNfbGVmdJSFlIGUfZQoaAVoBmgganELAABoIWgDaB1oRGgfSwB1YmFoDn2UKGgQXZRoE12UKGq0CAAAarUIAABqtggAAGq3CAAAZWgVXZRoF12UaBldlIwJeG1sOnNwYWNllGroAwAAdWgcaqgIAABoHWgeaB9OaCBqbQsAAHViajELAAApgZR9lChoBYwaIDpldGhlcmV1bS5iYXNlX3R5cGVzLlUyNTaUaAddlGg/jBogOmV0aGVyZXVtLmJhc2VfdHlwZXMuVTI1NpSFlIGUfZQoaAVoBmggan8LAABoIWgDaB1oRGgfSwB1YmFoDn2UKGgQXZRoE12UaBVdlGgXXZRoGV2UjAl4bWw6c3BhY2WUaugDAAB1aBxqMAsAAGgdaB5oH05oIGptCwAAdWJlaA59lChoEF2UamgLAABhaBNdlChqvwgAAGrACAAAjAJweZRqwggAAGrDCAAAZWgVXZRoF12UaBldlIwGbW9kdWxllGrICAAAjAVjbGFzc5RqLgsAAIwIZnVsbG5hbWWUjBpNZXNzYWdlQ2FsbE91dHB1dC5nYXNfbGVmdJR1aBxqoggAAGgdaB5oH0t4aCBqagsAAHViaswIAAApgZR9lChoBWgGaAddlGgOfZQoaBBdlGgTXZRoFV2UaBddlGgZXZR1aBxqywgAAGgdaB5oH05oIGpqCwAAdWJlaA59lChoEF2UaBNdlChqkQsAAIwJYXR0cmlidXRllGVoFV2UaBddlGgZXZSMBmRvbWFpbpRqkQsAAIwHb2JqdHlwZZRqpQsAAIwIZGVzY3R5cGWUaqULAACMB25vaW5kZXiUiXVoHGqdCAAAaB1oRGgfSwBoIGpZCwAAaCFoA3ViaCQpgZR9lChoBWgGaAddlGgOfZQoaBBdlGgTXZRoFV2UaBddlGgZXZSMB2VudHJpZXOUXZQoapkIAACMLHJlZnVuZF9jb3VudGVyIChNZXNzYWdlQ2FsbE91dHB1dCBhdHRyaWJ1dGUplIxFZXRoZXJldW0ubXVpcl9nbGFjaWVyLnZtLmludGVycHJldGVyLk1lc3NhZ2VDYWxsT3V0cHV0LnJlZnVuZF9jb3VudGVylGgGTnSUYXVoHGgjaB1oRGgfSwBoIGpZCwAAaCFoA3Viap4IAAApgZR9lChoBWgGaAddlChqowgAACmBlH2UKGgFjA5yZWZ1bmRfY291bnRlcpRoB12UKGqpCAAAKYGUfZQoaAVqwAsAAGgHXZRoP4wOcmVmdW5kX2NvdW50ZXKUhZSBlH2UKGgFaAZoIGrCCwAAaCFoA2gdaERoH0sAdWJhaA59lChoEF2UaBNdlChqtAgAAGq1CAAAarYIAABqtwgAAGVoFV2UaBddlGgZXZSMCXhtbDpzcGFjZZRq6AMAAHVoHGqoCAAAaB1oHmgfTmggar4LAAB1YmoxCwAAKYGUfZQoaAWMGiA6ZXRoZXJldW0uYmFzZV90eXBlcy5VMjU2lGgHXZRoP4waIDpldGhlcmV1bS5iYXNlX3R5cGVzLlUyNTaUhZSBlH2UKGgFaAZoIGrQCwAAaCFoA2gdaERoH0sAdWJhaA59lChoEF2UaBNdlGgVXZRoF12UaBldlIwJeG1sOnNwYWNllGroAwAAdWgcajALAABoHWgeaB9OaCBqvgsAAHViZWgOfZQoaBBdlGq5CwAAYWgTXZQoar8IAABqwAgAAIwCcHmUasIIAABqwwgAAGVoFV2UaBddlGgZXZSMBm1vZHVsZZRqyAgAAIwFY2xhc3OUai4LAACMCGZ1bGxuYW1llIwgTWVzc2FnZUNhbGxPdXRwdXQucmVmdW5kX2NvdW50ZXKUdWgcaqIIAABoHWgeaB9Lf2ggarsLAAB1YmrMCAAAKYGUfZQoaAVoBmgHXZRoDn2UKGgQXZRoE12UaBVdlGgXXZRoGV2UdWgcassIAABoHWgeaB9OaCBquwsAAHViZWgOfZQoaBBdlGgTXZQoauILAACMCWF0dHJpYnV0ZZRlaBVdlGgXXZRoGV2UjAZkb21haW6UauILAACMB29ianR5cGWUavYLAACMCGRlc2N0eXBllGr2CwAAjAdub2luZGV4lIl1aBxqnQgAAGgdaERoH0sAaCBqWQsAAGghaAN1YmgkKYGUfZQoaAVoBmgHXZRoDn2UKGgQXZRoE12UaBVdlGgXXZRoGV2UjAdlbnRyaWVzlF2UKGqZCAAAjCJsb2dzIChNZXNzYWdlQ2FsbE91dHB1dCBhdHRyaWJ1dGUplIw7ZXRoZXJldW0ubXVpcl9nbGFjaWVyLnZtLmludGVycHJldGVyLk1lc3NhZ2VDYWxsT3V0cHV0LmxvZ3OUaAZOdJRhdWgcaCNoHWhEaB9LAGggalkLAABoIWgDdWJqnggAACmBlH2UKGgFaAZoB12UKGqjCAAAKYGUfZQoaAWMBGxvZ3OUaAddlChqqQgAACmBlH2UKGgFahEMAABoB12UaD+MBGxvZ3OUhZSBlH2UKGgFaAZoIGoTDAAAaCFoA2gdaERoH0sAdWJhaA59lChoEF2UaBNdlChqtAgAAGq1CAAAarYIAABqtwgAAGVoFV2UaBddlGgZXZSMCXhtbDpzcGFjZZRq6AMAAHVoHGqoCAAAaB1oHmgfSwBoIGoPDAAAaCFoA3ViajELAAApgZR9lChoBYxGIDpVbmlvbltUdXBsZVtdLCBUdXBsZVtldGhlcmV1bS5tdWlyX2dsYWNpZXIuZXRoX3R5cGVzLkxvZywgRWxsaXBzaXNdXZRoB12UKGg/jBEgOlVuaW9uW1R1cGxlW10sIJSFlIGUfZQoaAVoBmggaiEMAABoIWgDaB1oRGgfSwB1YmgAjAZpbmxpbmWUk5QpgZR9lChoBWgGaAddlGg/jCpUdXBsZVtldGhlcmV1bS5tdWlyX2dsYWNpZXIuZXRoX3R5cGVzLkxvZyyUhZSBlH2UKGgFaAZoIGorDAAAaCFoA2gdaERoH0sAdWJhaA59lChoEF2UaBNdlIwPY2hhbmdlLXJlcGxhY2VklGFoFV2UaBddlGgZXZR1aBxqKQwAAGggaiEMAABoIWgDaB1oRGgfSwB1YmoqDAAAKYGUfZQoaAVoBmgHXZRoP4wkVHVwbGVbZXRoZXJldW0uYmVybGluLmV0aF90eXBlcy5Mb2cslIWUgZR9lChoBWgGaCBqOQwAAGghaANoHWhEaB9LAHViYWgOfZQoaBBdlGgTXZSMEmNoYW5nZS1yZXBsYWNlbWVudJRhaBVdlGgXXZRoGV2UdWgcaikMAABoIGohDAAAaCFoA2gdaERoH0sAdWJoP4wLIEVsbGlwc2lzXV2UhZSBlH2UKGgFaAZoIGohDAAAaCFoA2gdaERoH0sAdWJlaA59lChoEF2UaBNdlGgVXZRoF12UaBldlIwJeG1sOnNwYWNllGroAwAAdWgcajALAABoHWgeaB9LAGggag8MAABoIWgDdWJlaA59lChoEF2UagoMAABhaBNdlChqvwgAAGrACAAAjAJweZRqwggAAGrDCAAAZWgVXZRoF12UaBldlIwGbW9kdWxllGrICAAAjAVjbGFzc5RqLgsAAIwIZnVsbG5hbWWUjBZNZXNzYWdlQ2FsbE91dHB1dC5sb2dzlHVoHGqiCAAAaB1oHmgfS4ZoIGoMDAAAaCFoA3ViaswIAAApgZR9lChoBWgGaAddlGgOfZQoaBBdlGgTXZRoFV2UaBddlGgZXZR1aBxqywgAAGgdaB5oH0sAaCBqDAwAAGghaAN1YmVoDn2UKGgQXZRoE12UKGpVDAAAjAlhdHRyaWJ1dGWUZWgVXZRoF12UaBldlIwGZG9tYWlulGpVDAAAjAdvYmp0eXBllGppDAAAjAhkZXNjdHlwZZRqaQwAAIwHbm9pbmRleJSJdWgcap0IAABoHWhEaB9LAGggalkLAABoIWgDdWJoJCmBlH2UKGgFaAZoB12UaA59lChoEF2UaBNdlGgVXZRoF12UaBldlIwHZW50cmllc5RdlChqmQgAAIwwYWNjb3VudHNfdG9fZGVsZXRlIChNZXNzYWdlQ2FsbE91dHB1dCBhdHRyaWJ1dGUplIxJZXRoZXJldW0ubXVpcl9nbGFjaWVyLnZtLmludGVycHJldGVyLk1lc3NhZ2VDYWxsT3V0cHV0LmFjY291bnRzX3RvX2RlbGV0ZZRoBk50lGF1aBxoI2gdaERoH0sAaCBqWQsAAGghaAN1YmqeCAAAKYGUfZQoaAVoBmgHXZQoaqMIAAApgZR9lChoBYwSYWNjb3VudHNfdG9fZGVsZXRllGgHXZQoaqkIAAApgZR9lChoBWqEDAAAaAddlGg/jBJhY2NvdW50c190b19kZWxldGWUhZSBlH2UKGgFaAZoIGqGDAAAaCFoA2gdaERoH0sAdWJhaA59lChoEF2UaBNdlChqtAgAAGq1CAAAarYIAABqtwgAAGVoFV2UaBddlGgZXZSMCXhtbDpzcGFjZZRq6AMAAHVoHGqoCAAAaB1oHmgfSwBoIGqCDAAAaCFoA3ViajELAAApgZR9lChoBYwuIDpTZXRbZXRoZXJldW0ubXVpcl9nbGFjaWVyLmV0aF90eXBlcy5BZGRyZXNzXZRoB12UKGg/jAEglIWUgZR9lChoBWgGaCBqlAwAAGghaANoHWhEaB9LAHViaioMAAApgZR9lChoBWgGaAddlGg/jC06U2V0W2V0aGVyZXVtLm11aXJfZ2xhY2llci5ldGhfdHlwZXMuQWRkcmVzc12UhZSBlH2UKGgFaAZoIGqcDAAAaCFoA2gdaERoH0sAdWJhaA59lChoEF2UaBNdlIwPY2hhbmdlLXJlcGxhY2VklGFoFV2UaBddlGgZXZR1aBxqKQwAAGggapQMAABoIWgDaB1oRGgfSwB1YmoqDAAAKYGUfZQoaAVoBmgHXZRoP4wnOlNldFtldGhlcmV1bS5iZXJsaW4uZXRoX3R5cGVzLkFkZHJlc3NdlIWUgZR9lChoBWgGaCBqqgwAAGghaANoHWhEaB9LAHViYWgOfZQoaBBdlGgTXZSMEmNoYW5nZS1yZXBsYWNlbWVudJRhaBVdlGgXXZRoGV2UdWgcaikMAABoIGqUDAAAaCFoA2gdaERoH0sAdWJlaA59lChoEF2UaBNdlGgVXZRoF12UaBldlIwJeG1sOnNwYWNllGroAwAAdWgcajALAABoHWgeaB9LAGggaoIMAABoIWgDdWJlaA59lChoEF2Uan0MAABhaBNdlChqvwgAAGrACAAAjAJweZRqwggAAGrDCAAAZWgVXZRoF12UaBldlIwGbW9kdWxllGrICAAAjAVjbGFzc5RqLgsAAIwIZnVsbG5hbWWUjCRNZXNzYWdlQ2FsbE91dHB1dC5hY2NvdW50c190b19kZWxldGWUdWgcaqIIAABoHWgeaB9LjWggan8MAABoIWgDdWJqzAgAACmBlH2UKGgFaAZoB12UaA59lChoEF2UaBNdlGgVXZRoF12UaBldlHVoHGrLCAAAaB1oHmgfSwBoIGp/DAAAaCFoA3ViZWgOfZQoaBBdlGgTXZQoasIMAACMCWF0dHJpYnV0ZZRlaBVdlGgXXZRoGV2UjAZkb21haW6UasIMAACMB29ianR5cGWUatYMAACMCGRlc2N0eXBllGrWDAAAjAdub2luZGV4lIl1aBxqnQgAAGgdaERoH0sAaCBqWQsAAGghaAN1YmgkKYGUfZQoaAVoBmgHXZRoDn2UKGgQXZRoE12UaBVdlGgXXZRoGV2UjAdlbnRyaWVzlF2UKGqZCAAAjC50b3VjaGVkX2FjY291bnRzIChNZXNzYWdlQ2FsbE91dHB1dCBhdHRyaWJ1dGUplIxHZXRoZXJldW0ubXVpcl9nbGFjaWVyLnZtLmludGVycHJldGVyLk1lc3NhZ2VDYWxsT3V0cHV0LnRvdWNoZWRfYWNjb3VudHOUaAZOdJRhdWgcaCNoHWhEaB9LAGggalkLAABoIWgDdWJqnggAACmBlH2UKGgFaAZoB12UKGqjCAAAKYGUfZQoaAWMEHRvdWNoZWRfYWNjb3VudHOUaAddlChqqQgAACmBlH2UKGgFavEMAABoB12UaD+MEHRvdWNoZWRfYWNjb3VudHOUhZSBlH2UKGgFaAZoIGrzDAAAaCFoA2gdaERoH0sAdWJhaA59lChoEF2UaBNdlChqtAgAAGq1CAAAarYIAABqtwgAAGVoFV2UaBddlGgZXZSMCXhtbDpzcGFjZZRq6AMAAHVoHGqoCAAAaB1oHmgfSwBoIGrvDAAAaCFoA3ViajELAAApgZR9lChoBYwzIDpJdGVyYWJsZVtldGhlcmV1bS5tdWlyX2dsYWNpZXIuZXRoX3R5cGVzLkFkZHJlc3NdlGgHXZQoaD+MASCUhZSBlH2UKGgFaAZoIGoBDQAAaCFoA2gdaERoH0sAdWJqKgwAACmBlH2UKGgFaAZoB12UaD+MMjpJdGVyYWJsZVtldGhlcmV1bS5tdWlyX2dsYWNpZXIuZXRoX3R5cGVzLkFkZHJlc3NdlIWUgZR9lChoBWgGaCBqCQ0AAGghaANoHWhEaB9LAHViYWgOfZQoaBBdlGgTXZSMD2NoYW5nZS1yZXBsYWNlZJRhaBVdlGgXXZRoGV2UdWgcaikMAABoIGoBDQAAaCFoA2gdaERoH0sAdWJqKgwAACmBlH2UKGgFaAZoB12UaD+MLDpJdGVyYWJsZVtldGhlcmV1bS5iZXJsaW4uZXRoX3R5cGVzLkFkZHJlc3NdlIWUgZR9lChoBWgGaCBqFw0AAGghaANoHWhEaB9LAHViYWgOfZQoaBBdlGgTXZSMEmNoYW5nZS1yZXBsYWNlbWVudJRhaBVdlGgXXZRoGV2UdWgcaikMAABoIGoBDQAAaCFoA2gdaERoH0sAdWJlaA59lChoEF2UaBNdlGgVXZRoF12UaBldlIwJeG1sOnNwYWNllGroAwAAdWgcajALAABoHWgeaB9LAGggau8MAABoIWgDdWJlaA59lChoEF2UauoMAABhaBNdlChqvwgAAGrACAAAjAJweZRqwggAAGrDCAAAZWgVXZRoF12UaBldlIwGbW9kdWxllGrICAAAjAVjbGFzc5RqLgsAAIwIZnVsbG5hbWWUjCJNZXNzYWdlQ2FsbE91dHB1dC50b3VjaGVkX2FjY291bnRzlHVoHGqiCAAAaB1oHmgfS5RoIGrsDAAAaCFoA3ViaswIAAApgZR9lChoBWgGaAddlGgOfZQoaBBdlGgTXZRoFV2UaBddlGgZXZR1aBxqywgAAGgdaB5oH0sAaCBq7AwAAGghaAN1YmVoDn2UKGgQXZRoE12UKGovDQAAjAlhdHRyaWJ1dGWUZWgVXZRoF12UaBldlIwGZG9tYWlulGovDQAAjAdvYmp0eXBllGpDDQAAjAhkZXNjdHlwZZRqQw0AAIwHbm9pbmRleJSJdWgcap0IAABoHWhEaB9LAGggalkLAABoIWgDdWJoJCmBlH2UKGgFaAZoB12UaA59lChoEF2UaBNdlGgVXZRoF12UaBldlIwHZW50cmllc5RdlChqmQgAAIwnaGFzX2VycmVkIChNZXNzYWdlQ2FsbE91dHB1dCBhdHRyaWJ1dGUplIxAZXRoZXJldW0ubXVpcl9nbGFjaWVyLnZtLmludGVycHJldGVyLk1lc3NhZ2VDYWxsT3V0cHV0Lmhhc19lcnJlZJRoBk50lGF1aBxoI2gdaERoH0sAaCBqWQsAAGghaAN1YmqeCAAAKYGUfZQoaAVoBmgHXZQoaqMIAAApgZR9lChoBYwJaGFzX2VycmVklGgHXZQoaqkIAAApgZR9lChoBWpeDQAAaAddlGg/jAloYXNfZXJyZWSUhZSBlH2UKGgFaAZoIGpgDQAAaCFoA2gdaERoH0sAdWJhaA59lChoEF2UaBNdlChqtAgAAGq1CAAAarYIAABqtwgAAGVoFV2UaBddlGgZXZSMCXhtbDpzcGFjZZRq6AMAAHVoHGqoCAAAaB1oHmgfTmggalwNAAB1YmoxCwAAKYGUfZQoaAWMBiA6Ym9vbJRoB12UaD+MBiA6Ym9vbJSFlIGUfZQoaAVoBmggam4NAABoIWgDaB1oRGgfSwB1YmFoDn2UKGgQXZRoE12UaBVdlGgXXZRoGV2UjAl4bWw6c3BhY2WUaugDAAB1aBxqMAsAAGgdaB5oH05oIGpcDQAAdWJlaA59lChoEF2UalcNAABhaBNdlChqvwgAAGrACAAAjAJweZRqwggAAGrDCAAAZWgVXZRoF12UaBldlIwGbW9kdWxllGrICAAAjAVjbGFzc5RqLgsAAIwIZnVsbG5hbWWUjBtNZXNzYWdlQ2FsbE91dHB1dC5oYXNfZXJyZWSUdWgcaqIIAABoHWgeaB9Lm2ggalkNAAB1YmrMCAAAKYGUfZQoaAVoBmgHXZRoDn2UKGgQXZRoE12UaBVdlGgXXZRoGV2UdWgcassIAABoHWgeaB9OaCBqWQ0AAHViZWgOfZQoaBBdlGgTXZQoaoANAACMCWF0dHJpYnV0ZZRlaBVdlGgXXZRoGV2UjAZkb21haW6UaoANAACMB29ianR5cGWUapQNAACMCGRlc2N0eXBllGqUDQAAjAdub2luZGV4lIl1aBxqnQgAAGgdaERoH0sAaCBqWQsAAGghaAN1YmVoDn2UKGgQXZRoE12UaBVdlGgXXZRoGV2UdWgcassIAABoHWgeaB9LoWggaikLAABoIWgDdWJlaA59lChoEF2UaBNdlChqUgsAAIwFY2xhc3OUZWgVXZRoF12UaBldlIwGZG9tYWlulGpSCwAAjAdvYmp0eXBllGqlDQAAjAhkZXNjdHlwZZRqpQ0AAIwHbm9pbmRleJSJdWgcap0IAABoHWhEaB9LAGggauIJAABoIWgDdWJlaA59lChoEF2UarYBAABhaBNdlGgVXZSMEW1lc3NhZ2VjYWxsb3V0cHV0lGFoF12UaBldlHVoHGgzaB1oHmgfS2VoIGpsCAAAaCFoA3ViaDQpgZR9lChoBWgGaAddlChoOSmBlH2UKGgFjBRwcm9jZXNzX21lc3NhZ2VfY2FsbJRoB12UaD+MFHByb2Nlc3NfbWVzc2FnZV9jYWxslIWUgZR9lChoBWgGaCBqtw0AAGghaANoHWhEaB9LAHViYWgOfZQoaBBdlGgTXZRoFV2UaBddlGgZXZR1aBxoOGgdaB5oH0ujaCBqtA0AAHViaCQpgZR9lChoBWgGaAddlGgOfZQoaBBdlGgTXZRoFV2UaBddlGgZXZSMB2VudHJpZXOUXZR1aBxoI2gdTmgfTmggarQNAAB1YmqeCAAAKYGUfZQoaAVoBmgHXZQoaqMIAAApgZR9lChoBYwicHJvY2Vzc19tZXNzYWdlX2NhbGwobWVzc2FnZSwgZW52KZRoB12UKGqpCAAAKYGUfZQoaAWMFHByb2Nlc3NfbWVzc2FnZV9jYWxslGgHXZRoP4wUcHJvY2Vzc19tZXNzYWdlX2NhbGyUhZSBlH2UKGgFaAZoIGrXDQAAaCFoA2gdaERoH0sAdWJhaA59lChoEF2UaBNdlChqtAgAAGq1CAAAarYIAABqtwgAAGVoFV2UaBddlGgZXZSMCXhtbDpzcGFjZZRq6AMAAHVoHGqoCAAAaB1oHmgfTmggatMNAAB1YmgijBJkZXNjX3BhcmFtZXRlcmxpc3SUk5QpgZR9lChoBYwMbWVzc2FnZSwgZW52lGgHXZQoaCKMDmRlc2NfcGFyYW1ldGVylJOUKYGUfZQoaAWMB21lc3NhZ2WUaAddlGoqDAAAKYGUfZQoaAVoBmgHXZRoP4wHbWVzc2FnZZSFlIGUfZQoaAVoBmggavINAABoIWgDaB1oRGgfSwB1YmFoDn2UKGgQXZRoE12UjAFulGFoFV2UaBddlGgZXZR1aBxqKQwAAGgdTmgfTmggau4NAAB1YmFoDn2UKGgQXZRoE12UaBVdlGgXXZRoGV2UjAl4bWw6c3BhY2WUaugDAAB1aBxq7A0AAGgdTmgfTmggaugNAAB1YmrtDQAAKYGUfZQoaAWMA2VudpRoB12UaioMAAApgZR9lChoBWgGaAddlGg/jANlbnaUhZSBlH2UKGgFaAZoIGoLDgAAaCFoA2gdaERoH0sAdWJhaA59lChoEF2UaBNdlGr8DQAAYWgVXZRoF12UaBldlHVoHGopDAAAaB1OaB9OaCBqBw4AAHViYWgOfZQoaBBdlGgTXZRoFV2UaBddlGgZXZSMCXhtbDpzcGFjZZRq6AMAAHVoHGrsDQAAaB1OaB9OaCBq6A0AAHViZWgOfZQoaBBdlGgTXZRoFV2UaBddlGgZXZSMCXhtbDpzcGFjZZRq6AMAAHVoHGrmDQAAaB1oHmgfTmggatMNAAB1YmVoDn2UKGgQXZSMOWV0aGVyZXVtLm11aXJfZ2xhY2llci52bS5pbnRlcnByZXRlci5wcm9jZXNzX21lc3NhZ2VfY2FsbJRhaBNdlChqvwgAAGrACAAAjAJweZRqwggAAGrDCAAAZWgVXZRoF12UaBldlIwGbW9kdWxllGrICAAAjAVjbGFzc5RoBowIZnVsbG5hbWWUatkNAAB1aBxqoggAAGgdaB5oH0umaCBq0A0AAHViaswIAAApgZR9lChoBWgGaAddlChoaSmBlH2UKGgFjIlJZiBgbWVzc2FnZS5jdXJyZW50YCBpcyBlbXB0eSB0aGVuIGl0IGNyZWF0ZXMgYSBzbWFydCBjb250cmFjdAplbHNlIGl0IGV4ZWN1dGVzIGEgY2FsbCBmcm9tIHRoZSBgbWVzc2FnZS5jYWxsZXJgIHRvIHRoZSBgbWVzc2FnZS50YXJnZXRgLpRoB12UKGg/jANJZiCUhZSBlH2UKGgFaAZoIGo0DgAAaCFoA2gdaERoH0sAdWJqbQQAACmBlH2UKGgFjBFgbWVzc2FnZS5jdXJyZW50YJRoB12UaD+MD21lc3NhZ2UuY3VycmVudJSFlIGUfZQoaAVoBmggajwOAABoIWgDaB1oRGgfSwB1YmFoDn2UKGgQXZRoE12UaBVdlGgXXZRoGV2UdWgcamwEAABoHU5oH05oIGo0DgAAdWJoP4xMIGlzIGVtcHR5IHRoZW4gaXQgY3JlYXRlcyBhIHNtYXJ0IGNvbnRyYWN0CmVsc2UgaXQgZXhlY3V0ZXMgYSBjYWxsIGZyb20gdGhlIJSFlIGUfZQoaAVoBmggajQOAABoIWgDaB1oRGgfSwB1YmptBAAAKYGUfZQoaAWMEGBtZXNzYWdlLmNhbGxlcmCUaAddlGg/jA5tZXNzYWdlLmNhbGxlcpSFlIGUfZQoaAVoBmggak4OAABoIWgDaB1oRGgfSwB1YmFoDn2UKGgQXZRoE12UaBVdlGgXXZRoGV2UdWgcamwEAABoHU5oH05oIGo0DgAAdWJoP4wIIHRvIHRoZSCUhZSBlH2UKGgFaAZoIGo0DgAAaCFoA2gdaERoH0sAdWJqbQQAACmBlH2UKGgFjBBgbWVzc2FnZS50YXJnZXRglGgHXZRoP4wObWVzc2FnZS50YXJnZXSUhZSBlH2UKGgFaAZoIGpgDgAAaCFoA2gdaERoH0sAdWJhaA59lChoEF2UaBNdlGgVXZRoF12UaBldlHVoHGpsBAAAaB1OaB9OaCBqNA4AAHViaD+MAS6UhZSBlH2UKGgFaAZoIGo0DgAAaCFoA2gdaERoH0sAdWJlaA59lChoEF2UaBNdlGgVXZRoF12UaBldlHVoHGhoaB1oHmgfS6loIGoxDgAAdWJoAIwKZmllbGRfbGlzdJSTlCmBlH2UKGgFaAZoB12UKGgAjAVmaWVsZJSTlCmBlH2UKGgFaAZoB12UKGgAjApmaWVsZF9uYW1llJOUKYGUfZQoaAWMClBhcmFtZXRlcnOUaAddlGg/jApQYXJhbWV0ZXJzlIWUgZR9lChoBWgGaCBqhA4AAGghaANoHWhEaB9LAHViYWgOfZQoaBBdlGgTXZRoFV2UaBddlGgZXZR1aBxqgg4AAGgdaB5oH0sAaCBqfw4AAHViaACMCmZpZWxkX2JvZHmUk5QpgZR9lChoBWgGaAddlGhfKYGUfZQoaAVoBmgHXZQoaGQpgZR9lChoBWgGaAddlGhpKYGUfZQoaAWMJm1lc3NhZ2UgLS0gVHJhbnNhY3Rpb24gc3BlY2lmaWMgaXRlbXMulGgHXZQoaCKMDmxpdGVyYWxfc3Ryb25nlJOUKYGUfZQoaAWMB21lc3NhZ2WUaAddlGg/jAdtZXNzYWdllIWUgZR9lChoBWgGaCBqow4AAGghaANoHWhEaB9LAHViYWgOfZQoaBBdlGgTXZRoFV2UaBddlGgZXZSMC3JlZnNwZWNpZmljlIiMCXB5Om1vZHVsZZRqyAgAAIwIcHk6Y2xhc3OUTnVoHGqhDgAAaB1OaB9OaCBqnQ4AAHViaD+MICDigJMgVHJhbnNhY3Rpb24gc3BlY2lmaWMgaXRlbXMulIWUgZR9lChoBWgGaCBqnQ4AAGghaANoHWhEaB9LAHViZWgOfZQoaBBdlGgTXZRoFV2UaBddlGgZXZR1aBxoaGgdTmgfTmggapoOAAB1YmFoDn2UKGgQXZRoE12UaBVdlGgXXZRoGV2UdWgcaGNoHU5oH05oIGqXDgAAdWJoZCmBlH2UKGgFaAZoB12UaGkpgZR9lChoBYwxZW52IC0tIEV4dGVybmFsIGl0ZW1zIHJlcXVpcmVkIGZvciBFVk0gZXhlY3V0aW9uLpRoB12UKGqiDgAAKYGUfZQoaAWMA2VudpRoB12UaD+MA2VudpSFlIGUfZQoaAVoBmggassOAABoIWgDaB1oRGgfSwB1YmFoDn2UKGgQXZRoE12UaBVdlGgXXZRoGV2UjAtyZWZzcGVjaWZpY5SIjAlweTptb2R1bGWUasgIAACMCHB5OmNsYXNzlE51aBxqoQ4AAGgdTmgfTmggascOAAB1Ymg/jC8g4oCTIEV4dGVybmFsIGl0ZW1zIHJlcXVpcmVkIGZvciBFVk0gZXhlY3V0aW9uLpSFlIGUfZQoaAVoBmggascOAABoIWgDaB1oRGgfSwB1YmVoDn2UKGgQXZRoE12UaBVdlGgXXZRoGV2UdWgcaGhoHU5oH05oIGrEDgAAdWJhaA59lChoEF2UaBNdlGgVXZRoF12UaBldlHVoHGhjaB1OaB9OaCBqlw4AAHViZWgOfZQoaBBdlGgTXZRoFV2UaBddlGgZXZR1aBxoXmgdTmgfTmggapQOAAB1YmFoDn2UKGgQXZRoE12UaBVdlGgXXZRoGV2UdWgcapIOAABoHU5oH05oIGp/DgAAdWJlaA59lChoEF2UaBNdlGgVXZRoF12UaBldlHVoHGp9DgAAaB1OaB9OaCBqeg4AAHVian4OAAApgZR9lChoBWgGaAddlChqgw4AACmBlH2UKGgFjAdSZXR1cm5zlGgHXZRoP4wHUmV0dXJuc5SFlIGUfZQoaAVoBmggagEPAABoIWgDaB1oRGgfSwB1YmFoDn2UKGgQXZRoE12UaBVdlGgXXZRoGV2UdWgcaoIOAABoHWgeaB9LAGggav4OAAB1YmqTDgAAKYGUfZQoaAVoBmgHXZRoaSmBlH2UKGgFjCRvdXRwdXQgLS0gT3V0cHV0IG9mIHRoZSBtZXNzYWdlIGNhbGyUaAddlChoAIwGc3Ryb25nlJOUKYGUfZQoaAWMCioqb3V0cHV0KiqUaAddlGg/jAZvdXRwdXSUhZSBlH2UKGgFaAZoIGoYDwAAaCFoA2gdaERoH0sAdWJhaA59lChoEF2UaBNdlGgVXZRoF12UaBldlHVoHGoWDwAAaB1OaB9OaCBqEg8AAHViaD+MHyDigJMgT3V0cHV0IG9mIHRoZSBtZXNzYWdlIGNhbGyUhZSBlH2UKGgFaAZoIGoSDwAAaCFoA2gdaERoH0sAdWJlaA59lChoEF2UaBNdlGgVXZRoF12UaBldlHVoHGhoaB1OaB9OaCBqDw8AAHViYWgOfZQoaBBdlGgTXZRoFV2UaBddlGgZXZR1aBxqkg4AAGgdTmgfTmggav4OAAB1YmVoDn2UKGgQXZRoE12UaBVdlGgXXZRoGV2UdWgcan0OAABoHU5oH05oIGp6DgAAdWJqfg4AACmBlH2UKGgFaAZoB12UKGqDDgAAKYGUfZQoaAWMC1JldHVybiB0eXBllGgHXZRoP4wLUmV0dXJuIHR5cGWUhZSBlH2UKGgFaAZoIGo/DwAAaCFoA2gdaERoH0sAdWJhaA59lChoEF2UaBNdlGgVXZRoF12UaBldlHVoHGqCDgAAaB1oHmgfSwBoIGo8DwAAdWJqkw4AACmBlH2UKGgFaAZoB12UaGkpgZR9lChoBYwRTWVzc2FnZUNhbGxPdXRwdXSUaAddlGptBAAAKYGUfZQoaAWME2BNZXNzYWdlQ2FsbE91dHB1dGCUaAddlGg/jBFNZXNzYWdlQ2FsbE91dHB1dJSFlIGUfZQoaAVoBmggalQPAABoIWgDaB1oRGgfSwB1YmFoDn2UKGgQXZRoE12UaBVdlGgXXZRoGV2UdWgcamwEAABoHU5oH05oIGpQDwAAdWJhaA59lChoEF2UaBNdlGgVXZRoF12UaBldlHVoHGhoaB1OaB9OaCBqTQ8AAHViYWgOfZQoaBBdlGgTXZRoFV2UaBddlGgZXZR1aBxqkg4AAGgdTmgfTmggajwPAAB1YmVoDn2UKGgQXZRoE12UaBVdlGgXXZRoGV2UdWgcan0OAABoHU5oH05oIGp6DgAAdWJlaA59lChoEF2UaBNdlGgVXZRoF12UaBldlHVoHGp4DgAAaB1OaB9OaCBqMQ4AAHViZWgOfZQoaBBdlGgTXZRoFV2UaBddlGgZXZR1aBxqywgAAGgdaB5oH05oIGrQDQAAdWJlaA59lChoEF2UaBNdlChqKg4AAIwIZnVuY3Rpb26UZWgVXZRoF12UaBldlIwGZG9tYWlulGoqDgAAjAdvYmp0eXBllGqDDwAAjAhkZXNjdHlwZZRqgw8AAIwHbm9pbmRleJSJdWgcap0IAABoHU5oH05oIGq0DQAAdWJq4ggAACmBlH2UKGgFWMgDAABkZWYgcHJvY2Vzc19tZXNzYWdlX2NhbGwoCiAgICBtZXNzYWdlOiBNZXNzYWdlLCBlbnY6IEVudmlyb25tZW50CikgLT4gTWVzc2FnZUNhbGxPdXRwdXQ6CiAgICBpZiBtZXNzYWdlLnRhcmdldCA9PSBCeXRlczAoYiIiKToKICAgICAgICBpc19jb2xsaXNpb24gPSBhY2NvdW50X2hhc19jb2RlX29yX25vbmNlKAogICAgICAgICAgICBlbnYuc3RhdGUsIG1lc3NhZ2UuY3VycmVudF90YXJnZXQKICAgICAgICApCiAgICAgICAgaWYgaXNfY29sbGlzaW9uOgogICAgICAgICAgICByZXR1cm4gTWVzc2FnZUNhbGxPdXRwdXQoCiAgICAgICAgICAgICAgICBVMjU2KDApLCBVMjU2KDApLCB0dXBsZSgpLCBzZXQoKSwgc2V0KCksIFRydWUKICAgICAgICAgICAgKQogICAgICAgIGVsc2U6CiAgICAgICAgICAgIGV2bSA9IHByb2Nlc3NfY3JlYXRlX21lc3NhZ2UobWVzc2FnZSwgZW52KQogICAgZWxzZToKICAgICAgICBldm0gPSBwcm9jZXNzX21lc3NhZ2UobWVzc2FnZSwgZW52KQoKICAgIGFjY291bnRzX3RvX2RlbGV0ZSA9IGNvbGxlY3RfYWNjb3VudHNfdG9fZGVsZXRlKGV2bSkKICAgIHJlZnVuZF9jb3VudGVyID0gKAogICAgICAgIGNhbGN1bGF0ZV9nYXNfcmVmdW5kKGV2bSkKICAgICAgICArIGxlbihhY2NvdW50c190b19kZWxldGUpICogUkVGVU5EX1NFTEZfREVTVFJVQ1QKICAgICkKCiAgICByZXR1cm4gTWVzc2FnZUNhbGxPdXRwdXQoCiAgICAgICAgZ2FzX2xlZnQ9ZXZtLmdhc19sZWZ0LAogICAgICAgIHJlZnVuZF9jb3VudGVyPXJlZnVuZF9jb3VudGVyLAogICAgICAgIGxvZ3M9ZXZtLmxvZ3MgaWYgbm90IGV2bS5oYXNfZXJyZWQgZWxzZSAoKSwKICAgICAgICBhY2NvdW50c190b19kZWxldGU9YWNjb3VudHNfdG9fZGVsZXRlLAogICAgICAgIHRvdWNoZWRfYWNjb3VudHM9Y29sbGVjdF90b3VjaGVkX2FjY291bnRzKGV2bSksCiAgICAgICAgaGFzX2VycmVkPWV2bS5oYXNfZXJyZWQsCiAgICApCpRoB12UaD9YyAMAAGRlZiBwcm9jZXNzX21lc3NhZ2VfY2FsbCgKICAgIG1lc3NhZ2U6IE1lc3NhZ2UsIGVudjogRW52aXJvbm1lbnQKKSAtPiBNZXNzYWdlQ2FsbE91dHB1dDoKICAgIGlmIG1lc3NhZ2UudGFyZ2V0ID09IEJ5dGVzMChiIiIpOgogICAgICAgIGlzX2NvbGxpc2lvbiA9IGFjY291bnRfaGFzX2NvZGVfb3Jfbm9uY2UoCiAgICAgICAgICAgIGVudi5zdGF0ZSwgbWVzc2FnZS5jdXJyZW50X3RhcmdldAogICAgICAgICkKICAgICAgICBpZiBpc19jb2xsaXNpb246CiAgICAgICAgICAgIHJldHVybiBNZXNzYWdlQ2FsbE91dHB1dCgKICAgICAgICAgICAgICAgIFUyNTYoMCksIFUyNTYoMCksIHR1cGxlKCksIHNldCgpLCBzZXQoKSwgVHJ1ZQogICAgICAgICAgICApCiAgICAgICAgZWxzZToKICAgICAgICAgICAgZXZtID0gcHJvY2Vzc19jcmVhdGVfbWVzc2FnZShtZXNzYWdlLCBlbnYpCiAgICBlbHNlOgogICAgICAgIGV2bSA9IHByb2Nlc3NfbWVzc2FnZShtZXNzYWdlLCBlbnYpCgogICAgYWNjb3VudHNfdG9fZGVsZXRlID0gY29sbGVjdF9hY2NvdW50c190b19kZWxldGUoZXZtKQogICAgcmVmdW5kX2NvdW50ZXIgPSAoCiAgICAgICAgY2FsY3VsYXRlX2dhc19yZWZ1bmQoZXZtKQogICAgICAgICsgbGVuKGFjY291bnRzX3RvX2RlbGV0ZSkgKiBSRUZVTkRfU0VMRl9ERVNUUlVDVAogICAgKQoKICAgIHJldHVybiBNZXNzYWdlQ2FsbE91dHB1dCgKICAgICAgICBnYXNfbGVmdD1ldm0uZ2FzX2xlZnQsCiAgICAgICAgcmVmdW5kX2NvdW50ZXI9cmVmdW5kX2NvdW50ZXIsCiAgICAgICAgbG9ncz1ldm0ubG9ncyBpZiBub3QgZXZtLmhhc19lcnJlZCBlbHNlICgpLAogICAgICAgIGFjY291bnRzX3RvX2RlbGV0ZT1hY2NvdW50c190b19kZWxldGUsCiAgICAgICAgdG91Y2hlZF9hY2NvdW50cz1jb2xsZWN0X3RvdWNoZWRfYWNjb3VudHMoZXZtKSwKICAgICAgICBoYXNfZXJyZWQ9ZXZtLmhhc19lcnJlZCwKICAgICkKlIWUgZR9lChoBWgGaCBqiw8AAGghaANoHWhEaB9LAHViYWgOfZQoaBBdlGgTXZRoFV2UaBddlGgZXZSMBnNvdXJjZZSMXS9ob21lL3J1bm5lci93b3JrL2V4ZWN1dGlvbi1zcGVjcy9leGVjdXRpb24tc3BlY3Mvc3JjL2V0aGVyZXVtL211aXJfZ2xhY2llci92bS9pbnRlcnByZXRlci5weZSMCXhtbDpzcGFjZZRq6AMAAIwFZm9yY2WUiYwIbGFuZ3VhZ2WUjAZweXRob26UjA5oaWdobGlnaHRfYXJnc5R9lGr5CAAASwFzjAdsaW5lbm9zlIl1aBxq4QgAAGgdaB5oH0u1aCBqtA0AAHViZWgOfZQoaBBdlGrYAQAAYWgTXZRoFV2UjBRwcm9jZXNzX21lc3NhZ2VfY2FsbJRhaBddlGgZXZR1aBxoM2gdaB5oH0ujaCBqbAgAAGghaAN1Ymg0KYGUfZQoaAVoBmgHXZQoaDkpgZR9lChoBYwWcHJvY2Vzc19jcmVhdGVfbWVzc2FnZZRoB12UaD+MFnByb2Nlc3NfY3JlYXRlX21lc3NhZ2WUhZSBlH2UKGgFaAZoIGqsDwAAaCFoA2gdaERoH0sAdWJhaA59lChoEF2UaBNdlGgVXZRoF12UaBldlHVoHGg4aB1oHmgfS7poIGqpDwAAdWJoJCmBlH2UKGgFaAZoB12UaA59lChoEF2UaBNdlGgVXZRoF12UaBldlIwHZW50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H05oIGoyEAAAdWJlaA59lChoEF2UaBNdlGgVXZRoF12UaBldlHVoHGp4DgAAaB1OaB9OaCBqIRAAAHViZWgOfZQoaBBdlGgTXZRoFV2UaBddlGgZXZR1aBxqywgAAGgdaB5oH05oIGrFDwAAdWJlaA59lChoEF2UaBNdlChqGhAAAIwIZnVuY3Rpb26UZWgVXZRoF12UaBldlIwGZG9tYWlulGoaEAAAjAdvYmp0eXBllGpBEQAAjAhkZXNjdHlwZZRqQREAAIwHbm9pbmRleJSJdWgcap0IAABoHU5oH05oIGqpDwAAdWJq4ggAACmBlH2UKGgFWIwDAABkZWYgcHJvY2Vzc19jcmVhdGVfbWVzc2FnZShtZXNzYWdlOiBNZXNzYWdlLCBlbnY6IEVudmlyb25tZW50KSAtPiBFdm06CiAgICAjIHRha2Ugc25hcHNob3Qgb2Ygc3RhdGUgYmVmb3JlIHByb2Nlc3NpbmcgdGhlIG1lc3NhZ2UKICAgIGJlZ2luX3RyYW5zYWN0aW9uKGVudi5zdGF0ZSkKCiAgICBpbmNyZW1lbnRfbm9uY2UoZW52LnN0YXRlLCBtZXNzYWdlLmN1cnJlbnRfdGFyZ2V0KQogICAgZXZtID0gcHJvY2Vzc19tZXNzYWdlKG1lc3NhZ2UsIGVudikKICAgIGlmIG5vdCBldm0uaGFzX2VycmVkOgogICAgICAgIGNvbnRyYWN0X2NvZGUgPSBldm0ub3V0cHV0CiAgICAgICAgY29udHJhY3RfY29kZV9nYXMgPSBsZW4oY29udHJhY3RfY29kZSkgKiBHQVNfQ09ERV9ERVBPU0lUCiAgICAgICAgdHJ5OgogICAgICAgICAgICBldm0uZ2FzX2xlZnQgPSBzdWJ0cmFjdF9nYXMoZXZtLmdhc19sZWZ0LCBjb250cmFjdF9jb2RlX2dhcykKICAgICAgICAgICAgZW5zdXJlKGxlbihjb250cmFjdF9jb2RlKSA8PSBNQVhfQ09ERV9TSVpFLCBPdXRPZkdhc0Vycm9yKQogICAgICAgIGV4Y2VwdCBFeGNlcHRpb25hbEhhbHQ6CiAgICAgICAgICAgIHJvbGxiYWNrX3RyYW5zYWN0aW9uKGVudi5zdGF0ZSkKICAgICAgICAgICAgZXZtLmdhc19sZWZ0ID0gVTI1NigwKQogICAgICAgICAgICBldm0ub3V0cHV0ID0gYiIiCiAgICAgICAgICAgIGV2bS5oYXNfZXJyZWQgPSBUcnVlCiAgICAgICAgZWxzZToKICAgICAgICAgICAgc2V0X2NvZGUoZW52LnN0YXRlLCBtZXNzYWdlLmN1cnJlbnRfdGFyZ2V0LCBjb250cmFjdF9jb2RlKQogICAgICAgICAgICBjb21taXRfdHJhbnNhY3Rpb24oZW52LnN0YXRlKQogICAgZWxzZToKICAgICAgICByb2xsYmFja190cmFuc2FjdGlvbihlbnYuc3RhdGUpCiAgICByZXR1cm4gZXZtCpRoB12UaD9YjAMAAGRlZiBwcm9jZXNzX2NyZWF0ZV9tZXNzYWdlKG1lc3NhZ2U6IE1lc3NhZ2UsIGVudjogRW52aXJvbm1lbnQpIC0+IEV2bToKICAgICMgdGFrZSBzbmFwc2hvdCBvZiBzdGF0ZSBiZWZvcmUgcHJvY2Vzc2luZyB0aGUgbWVzc2FnZQogICAgYmVnaW5fdHJhbnNhY3Rpb24oZW52LnN0YXRlKQoKICAgIGluY3JlbWVudF9ub25jZShlbnYuc3RhdGUsIG1lc3NhZ2UuY3VycmVudF90YXJnZXQpCiAgICBldm0gPSBwcm9jZXNzX21lc3NhZ2UobWVzc2FnZSwgZW52KQogICAgaWYgbm90IGV2bS5oYXNfZXJyZWQ6CiAgICAgICAgY29udHJhY3RfY29kZSA9IGV2bS5vdXRwdXQKICAgICAgICBjb250cmFjdF9jb2RlX2dhcyA9IGxlbihjb250cmFjdF9jb2RlKSAqIEdBU19DT0RFX0RFUE9TSVQKICAgICAgICB0cnk6CiAgICAgICAgICAgIGV2bS5nYXNfbGVmdCA9IHN1YnRyYWN0X2dhcyhldm0uZ2FzX2xlZnQsIGNvbnRyYWN0X2NvZGVfZ2FzKQogICAgICAgICAgICBlbnN1cmUobGVuKGNvbnRyYWN0X2NvZGUpIDw9IE1BWF9DT0RFX1NJWkUsIE91dE9mR2FzRXJyb3IpCiAgICAgICAgZXhjZXB0IEV4Y2VwdGlvbmFsSGFsdDoKICAgICAgICAgICAgcm9sbGJhY2tfdHJhbnNhY3Rpb24oZW52LnN0YXRlKQogICAgICAgICAg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ZWgOfZQoaBBdlGgTXZRoFV2UaBddlGgZXZR1aBxqeA4AAGgdTmgfTmggat8RAAB1YmVoDn2UKGgQXZRoE12UaBVdlGgXXZRoGV2UdWgcassIAABoHWgeaB9OaCBqgxEAAHViZWgOfZQoaBBdlGgTXZQoatgRAACMCGZ1bmN0aW9ulGVoFV2UaBddlGgZXZSMBmRvbWFpbpRq2BEAAIwHb2JqdHlwZZRq/xIAAIwIZGVzY3R5cGWUav8SAACMB25vaW5kZXiUiXVoHGqdCAAAaB1OaB9OaCBqZxEAAHViauIIAAApgZR9lChoBViOBAAAZGVmIHByb2Nlc3NfY3JlYXRlMl9tZXNzYWdlKG1lc3NhZ2U6IE1lc3NhZ2UsIGVudjogRW52aXJvbm1lbnQpIC0+IEV2bToKICAgICMgdGFrZSBzbmFwc2hvdCBvZiBzdGF0ZSBiZWZvcmUgcHJvY2Vzc2luZyB0aGUgbWVzc2FnZQogICAgYmVnaW5fdHJhbnNhY3Rpb24oZW52LnN0YXRlKQoKICAgICMgSXQncyBleHBlY3RlZCB0aGF0IHRoZSBjcmVhdGlvbiBvcGVyYXRpb24gd29ya3Mgb24gZW1wdHkgc3RvcmFnZS4gSGVuY2UKICAgICMgd2UgZGVsZXRlIHRoZSBzdG9yYWdlIGFuZCByZXN0b3JlIHRoZSBhY2NvdW50J3Mgc3RhdGUgaWYgdGhlcmUgaXMgYW4KICAgICMgZXJyb3IgaW4gdGhlIGluaXRpYWxpemF0aW9uIGNvZGUgZXhlY3V0aW9uLgogICAgZGVzdHJveV9zdG9yYWdlKGVudi5zdGF0ZSwgbWVzc2FnZS5jdXJyZW50X3RhcmdldCkKCiAgICBpbmNyZW1lbnRfbm9uY2UoZW52LnN0YXRlLCBtZXNzYWdlLmN1cnJlbnRfdGFyZ2V0KQogICAgZXZtID0gcHJvY2Vzc19tZXNzYWdlKG1lc3NhZ2UsIGVudikKICAgIGlmIG5vdCBldm0uaGFzX2VycmVkOgogICAgICAgIGNvbnRyYWN0X2NvZGUgPSBldm0ub3V0cHV0CiAgICAgICAgY29udHJhY3RfY29kZV9nYXMgPSBsZW4oY29udHJhY3RfY29kZSkgKiBHQVNfQ09ERV9ERVBPU0lUCiAgICAgICAgdHJ5OgogICAgICAgICAgICBldm0uZ2FzX2xlZnQgPSBzdWJ0cmFjdF9nYXMoZXZtLmdhc19sZWZ0LCBjb250cmFjdF9jb2RlX2dhcykKICAgICAgICAgICAgZW5zdXJlKGxlbihjb250cmFjdF9jb2RlKSA8PSBNQVhfQ09ERV9TSVpFLCBPdXRPZkdhc0Vycm9yKQogICAgICAgIGV4Y2VwdCBPdXRPZkdhc0Vycm9yOgogICAgICAgICAgICByb2xsYmFja190cmFuc2FjdGlvbihlbnYuc3RhdGUpCiAgICAgICAgICAgIGV2bS5nYXNfbGVmdCA9IFUyNTYoMCkKICAgICAgICAgICAgZXZtLm91dHB1dCA9IGIiIgogICAgICAgICAgICBldm0uaGFzX2VycmVkID0gVHJ1ZQogICAgICAgIGVsc2U6CiAgICAgICAgICAgIHNldF9jb2RlKGVudi5zdGF0ZSwgbWVzc2FnZS5jdXJyZW50X3RhcmdldCwgY29udHJhY3RfY29kZSkKICAgICAgICAgICAgY29tbWl0X3RyYW5zYWN0aW9uKGVudi5zdGF0ZSkKICAgIGVsc2U6CiAgICAgICAgcm9sbGJhY2tfdHJhbnNhY3Rpb24oZW52LnN0YXRlKQogICAgcmV0dXJuIGV2bQqUaAddlGg/WI4EAABkZWYgcHJvY2Vzc19jcmVhdGUyX21lc3NhZ2UobWVzc2FnZTogTWVzc2FnZSwgZW52OiBFbnZpcm9ubWVudCkgLT4gRXZtOgogICAgIyB0YWtlIHNuYXBzaG90IG9mIHN0YXRlIGJlZm9yZSBwcm9jZXNzaW5nIHRoZSBtZXNzYWdlCiAgICBiZWdpbl90cmFuc2FjdGlvbihlbnYuc3RhdGUpCgogICAgIyBJdCdzIGV4cGVjdGVkIHRoYXQgdGhlIGNyZWF0aW9uIG9wZXJhdGlvbiB3b3JrcyBvbiBlbXB0eSBzdG9yYWdlLiBIZW5jZQogICAgIyB3ZSBkZWxldGUgdGhlIHN0b3JhZ2UgYW5kIHJlc3RvcmUgdGhlIGFjY291bnQncyBzdGF0ZSBpZiB0aGVyZSBpcyBhbgogICAgIyBlcnJvciBpbiB0aGUgaW5pdGlhbGl6YXRpb24gY29kZSBleGVjdXRpb24uCiAgICBkZXN0cm95X3N0b3JhZ2UoZW52LnN0YXRlLCBtZXNzYWdlLmN1cnJlbnRfdGFyZ2V0KQoKICAgIGluY3JlbWVudF9ub25jZShlbnYuc3RhdGUsIG1lc3NhZ2UuY3VycmVudF90YXJnZXQpCiAgICBldm0gPSBwcm9jZXNzX21lc3NhZ2UobWVzc2FnZSwgZW52KQogICAgaWYgbm90IGV2bS5oYXNfZXJyZWQ6CiAgICAgICAgY29udHJhY3RfY29kZSA9IGV2bS5vdXRwdXQKICAgICAgICBjb250cmFjdF9jb2RlX2dhcyA9IGxlbihjb250cmFjdF9jb2RlKSAqIEdBU19DT0RFX0RFUE9TSVQKICAgICAgICB0cnk6CiAgICAgICAgICAgIGV2bS5nYXNfbGVmdCA9IHN1YnRyYWN0X2dhcyhldm0uZ2FzX2xlZnQsIGNvbnRyYWN0X2NvZGVfZ2FzKQogICAgICAgICAgICBlbnN1cmUobGVuKGNvbnRyYWN0X2NvZGUpIDw9IE1BWF9DT0RFX1NJWkUsIE91dE9mR2FzRXJyb3IpCiAgICAgICAgZXhjZXB0IE91dE9mR2FzRXJyb3I6CiAgICAgICAgICAgIHJvbGxiYWNrX3RyYW5zYWN0aW9uKGVudi5zdGF0ZSkKICAgICAgICAgICAgZXZtLmdhc19sZWZ0ID0gVTI1NigwKQogICAgICAgICAgICBldm0ub3V0cHV0ID0gYiIiCiAgICAgICAgICAgIGV2bS5oYXNfZXJyZWQgPSBUcnVlCiAgICAgICAgZWxzZToKICAgICAgICAgICAgc2V0X2NvZGUoZW52LnN0YXRlLCBtZXNzYWdlLmN1cnJlbnRfdGFyZ2V0LCBjb250cmFjdF9jb2RlKQogICAgICAgICAgICBjb21taXRfdHJhbnNhY3Rpb24oZW52LnN0YXRlKQogICAgZWxzZToKICAgICAgICByb2xsYmFja190cmFuc2FjdGlvbihlbnYuc3RhdGUpCiAgICByZXR1cm4gZXZtCpSFlIGUfZQoaAVoBmggagcTAABoIWgDaB1oRGgfSwB1YmFoDn2UKGgQXZRoE12UaBVdlGgXXZRoGV2UjAZzb3VyY2WUjF0vaG9tZS9ydW5uZXIvd29yay9leGVjdXRpb24tc3BlY3MvZXhlY3V0aW9uLXNw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YW5zYWN0aW9uKGVudi5zdGF0ZSkKCiAgICB0b3VjaF9hY2NvdW50KGVudi5zdGF0ZSwgbWVzc2FnZS5jdXJyZW50X3RhcmdldCkKCiAgICBzZW5kZXJfYmFsYW5jZSA9IGdldF9hY2NvdW50KGVudi5zdGF0ZSwgbWVzc2FnZS5jYWxsZXIpLmJhbGFuY2UKCiAgICBpZiBtZXNzYWdlLnNob3VsZF90cmFuc2Zlcl92YWx1ZSBhbmQgbWVzc2FnZS52YWx1ZSAhPSAwOgogICAgICAgIGlmIHNlbmRlcl9iYWxhbmNlIDwgbWVzc2FnZS52YWx1ZToKICAgICAgICAgICAgcm9sbGJhY2tfdHJhbnNhY3Rpb24oZW52LnN0YXRlKQogICAgICAgICAgICByYWlzZSBJbnN1ZmZpY2llbnRGdW5kcygKICAgICAgICAgICAgICAgIGYiSW5zdWZmaWNpZW50IGZ1bmRzOiB7c2VuZGVyX2JhbGFuY2V9IDwge21lc3NhZ2UudmFsdWV9IgogICAgICAgICAgICApCiAgICAgICAgbW92ZV9ldGhlcigKICAgICAgICAgICAgZW52LnN0YXRlLCBtZXNzYWdlLmNhbGxlciwgbWVzc2FnZS5jdXJyZW50X3RhcmdldCwgbWVzc2FnZS52YWx1ZQogICAgICAgICkKCiAgICBldm0gPSBleGVjdXRlX2NvZGUobWVzc2FnZSwgZW52KQogICAgaWYgZXZtLmhhc19lcnJlZDoKICAgICAgICAjIHJldmVydCBzdGF0ZSB0byB0aGUgbGFzdCBzYXZlZCBjaGVja3BvaW50CiAgICAgICAgIyBzaW5jZSB0aGUgbWVzc2FnZSBjYWxsIHJlc3VsdGVkIGluIGFuIGVycm9yCiAgICAgICAgcm9sbGJhY2tfdHJhbnNhY3Rpb24oZW52LnN0YXRlKQogICAgZWxzZToKICAgICAgICBjb21taXRfdHJhbnNhY3Rpb24oZW52LnN0YXRlKQogICAgcmV0dXJuIGV2bQqUaAddlGg/WAwEAABkZWYgcHJvY2Vzc19tZXNzYWdlKG1lc3NhZ2U6IE1lc3NhZ2UsIGVudjogRW52aXJvbm1lbnQpIC0+IEV2bToKICAgIGlmIG1lc3NhZ2UuZGVwdGggPiBTVEFDS19ERVBUSF9MSU1JVDoKICAgICAgICByYWlzZSBTdGFja0RlcHRoTGltaXRFcnJvcigiU3RhY2sgZGVwdGggbGltaXQgcmVhY2hlZCIpCgogICAgIyB0YWtlIHNuYXBzaG90IG9mIHN0YXRlIGJlZm9yZSBwcm9jZXNzaW5nIHRoZSBtZXNzYWdlCiAgICBiZWdpbl90cmFuc2FjdGlvbihlbnYuc3RhdGUpCgogICAgdG91Y2hfYWNjb3VudChlbnYuc3RhdGUsIG1lc3NhZ2UuY3VycmVudF90YXJnZXQpCgogICAgc2VuZGVyX2JhbGFuY2UgPSBnZXRfYWNjb3VudChlbnYuc3RhdGUsIG1lc3NhZ2UuY2FsbGVyKS5iYWxhbmNlCgogICAgaWYgbWVzc2FnZS5zaG91bGRfdHJhbnNmZXJfdmFsdWUgYW5kIG1lc3NhZ2UudmFsdWUgIT0gMDoKICAgICAgICBpZiBzZW5kZXJfYmFsYW5jZSA8IG1lc3NhZ2UudmFsdWU6CiAgICAgICAgICAgIHJvbGxiYWNrX3RyYW5zYWN0aW9uKGVudi5zdGF0ZSkKICAgICAgICAgICAgcmFpc2UgSW5zdWZmaWNpZW50RnVuZHMoCiAgICAgICAgICAgICAgICBmIkluc3VmZmljaWVudCBmdW5kczoge3NlbmRlcl9iYWxhbmNlfSA8IHttZXNzYWdlLnZhbHVlfSIKICAgICAgICAgICAgKQogICAgICAgIG1vdmVfZXRoZXIoCiAgICAgICAgICAgIGVudi5zdGF0ZSwgbWVzc2FnZS5jYWxsZXIsIG1lc3NhZ2UuY3VycmVudF90YXJnZXQsIG1lc3NhZ2UudmFsdWUKICAgICAgICApCgogICAgZXZtID0gZXhlY3V0ZV9jb2RlKG1lc3NhZ2UsIGVudikKICAgIGlmIGV2bS5oYXNfZXJyZWQ6CiAgICAgICAgIyByZXZlcnQgc3RhdGUgdG8gdGhlIGxhc3Qgc2F2ZWQgY2hlY2twb2ludAogICAgICAgICMgc2luY2UgdGhlIG1lc3NhZ2UgY2FsbCByZXN1bHRlZCBpbiBhbiBlcnJvcgogICAgICAgIHJvbGxiYWNrX3RyYW5zYWN0aW9uKGVudi5zdGF0ZSkKICAgIGVsc2U6CiAgICAgICAgY29t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cF9kZXN0aW5hdGlvbnMoY29kZSkKICAgIGV2bSA9IEV2bSgKICAgICAgICBwYz1VaW50KDApLAogICAgICAgIHN0YWNrPVtdLAogICAgICAgIG1lbW9yeT1ieXRlYXJyYXkoKSwKICAgICAgICBjb2RlPWNvZGUsCiAgICAgICAgZ2FzX2xlZnQ9bWVzc2FnZS5nYXMsCiAgICAgICAgZW52PWVudiwKICAgICAgICB2YWxpZF9qdW1wX2Rlc3RpbmF0aW9ucz12YWxpZF9qdW1wX2Rlc3RpbmF0aW9ucywKICAgICAgICBsb2dzPSgpLAogICAgICAgIHJlZnVuZF9jb3VudGVyPTAsCiAgICAgICAgcnVubmluZz1UcnVlLAogICAgICAgIG1lc3NhZ2U9bWVzc2FnZSwKICAgICAgICBvdXRwdXQ9YiIiLAogICAgICAgIGFjY291bnRzX3RvX2RlbGV0ZT1kaWN0KCksCiAgICAgICAgaGFzX2VycmVkPUZhbHNlLAogICAgICAgIGNoaWxkcmVuPVtdLAogICAgICAgIHJldHVybl9kYXRhPWIiIiwKICAgICAgICBlcnJvcj1Ob25lLAogICAgKQogICAgdHJ5OgoKICAgICAgICBpZiBldm0ubWVzc2FnZS5jb2RlX2FkZHJlc3MgaW4gUFJFX0NPTVBJTEVEX0NPTlRSQUNUUzoKICAgICAgICAgICAgZXZtX3RyYWNlKGV2bSwgZXZtLm1lc3NhZ2UuY29kZV9hZGRyZXNzKQogICAgICAgICAgICBQUkVfQ09NUElMRURfQ09OVFJBQ1RTW2V2bS5tZXNzYWdlLmNvZGVfYWRkcmVzc10oZXZtKQogICAgICAgICAgICByZXR1cm4gZXZtCgogICAgICAgIHdoaWxlIGV2bS5ydW5uaW5nIGFuZCBldm0ucGMgPCBsZW4oZXZtLmNvZGUpOgogICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICBvcCA9IE9wcyhldm0uY29kZVtldm0ucGNdKQogICAgICAgICAgICBleGNlcHQgVmFsdWVFcnJvcjoKICAgICAgICAgICAgICAgIHJhaXNlIEludmFsaWRPcGNvZGUoZXZtLmNvZGVbZXZtLnBjXSkKCiAgICAgICAgICAgIGV2bV90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RUxGREVTVFJVQ1QpCiAgICBmb3IgYmVuZWZpY2lhcnkgaW4gc29ydGVkKHNldChldm0uYWNjb3VudHNfdG9fZGVsZXRlLnZhbHVlcygpKSk6CiAgICAgICAgaWYgZXZtLmhhc19lcnJlZCBvciBhbmNlc3Rvcl9oYWRfZXJyb3I6CiAgICAgICAgICAgICMgU3BlY2lhbCBjYXNlIHRvIGFjY291bnQgZm9yIGdldGgrcGFyaXR5IGJ1ZwogICAgICAgICAgICAjIGh0dHBzOi8vZ2l0aHViLmNvbS9ldGhlcmV1bS9FSVBzL2lzc3Vlcy83MTYKICAgICAgICAgICAgaWYgYmVuZWZpY2lhcnkgPT0gUklQRU1EMTYwX0FERFJFU1M6CiAgICAgICAgICAgICAgICB5aWVsZCBiZW5lZmljaWFyeQogICAgICAgICAgICBjb250aW51ZQogICAgICAgIGVsc2U6CiAgICAgICAgICAgIHlpZWxkIGJlbmVmaWNpYXJ5CgogICAgIyBjb2xsZWN0IGFjY291bnQgZGlyZWN0bHkgYWRkcmVzc2VkCiAgICBpZiBub3QgaXNpbnN0YW5jZShldm0ubWVzc2FnZS50YXJnZXQsIEJ5dGVzMCk6CiAgICAgICAgaWYgZXZtLmhhc19lcnJlZCBvciBhbmNlc3Rvcl9oYWRfZXJyb3I6CiAgICAgICAgICAgICMgY29sbGVjdCBSSVBFTUQxNjAgcHJlY29tcGlsZSBldmVuIGlmIGFuY2VzdG9yIGV2bSBoYWQgZXJyb3IuCiAgICAgICAgICAgICMgb3RoZXJ3aXNlLCBza2lwIGNvbGxlY3Rpb24gZnJvbSBjaGlsZHJlbiBvZiBlcnJlZC1vdXQgZXZtIG9iamVjdHMKICAgICAgICAgICAgaWYgZXZtLm1lc3NhZ2UudGFyZ2V0ID09IFJJUEVNRDE2MF9BRERSRVNTOgogICAgICAgICAgICAgICAgeWllbGQgZXZtLm1lc3NhZ2UudGFyZ2V0CiAgICAgICAgZWxzZToKICAgICAgICAgICAgeWllbGQgZXZtLm1lc3NhZ2UudGFyZ2V0CgogICAgIyByZWN1cnNlIGludG8gbmVzdGVkIGNvbXB1dGF0aW9ucwogICAgIyAoZXZlbiBlcnJlZCBvbmVzLCBzaW5jZSBsb29raW5nIGZvciBSSVBFTUQxNjApCiAgICBmb3IgY2hpbGQgaW4gZXZtLmNoaWxkcmVuOgogICAgICAgIHlpZWxkIGZyb20gY29sbGVjdF90b3VjaGVkX2FjY291bnRzKAogICAgICAgICAgICBjaGlsZCwgYW5jZXN0b3JfaGFkX2Vycm9yPShldm0uaGFzX2VycmVkIG9yIGFuY2VzdG9yX2hhZF9lcnJvcikKICAgICAgICApCpRoB12UaD9YrgUAAGRlZiBjb2xsZWN0X3RvdWNoZWRfYWNjb3VudHMoCiAgICBldm06IEV2bSwgYW5jZXN0b3JfaGFkX2Vycm9yOiBib29sID0gRmFsc2UKKSAtPiBJdGVyYWJsZVtBZGRyZXNzXToKICAgICMgY29sbGVjdCB0aGUgY29pbmJhc2UgYWNjb3VudCBpZiBpdCB3YXMgdG91Y2hlZCB2aWEgemVyby1mZWUgdHJhbnNmZXIKICAgIGlmIChldm0ubWVzc2FnZS5jYWxsZXIgPT0gZXZtLmVudi5vcmlnaW4pIGFuZCBldm0uZW52Lmdhc19wcmljZSA9PSAwOgogICAgICAgIHlpZWxkIGV2bS5lbnYuY29pbmJhc2UKCiAgICAjIGNvbGxlY3QgdGhvc2UgZXhwbGljaXRseSBtYXJrZWQgZm9yIGRlbGV0aW9uCiAgICAjICgiYmVuZWZpY2lhcnkiIGlzIG9mIFNFTEZERVNUUlVDVCkKICAgIGZvciBiZW5lZmljaWFyeSBpbiBzb3J0ZWQoc2V0KGV2bS5hY2NvdW50c190b19kZWxldGUudmFsdWVzKCkpKToKICAgICAgICBpZiBldm0uaGFzX2VycmVkIG9yIGFuY2VzdG9yX2hhZF9lcnJvcjoKICAgICAgICAgICAgIyBTcGVjaWFsIGNhc2UgdG8gYWNjb3VudCBmb3IgZ2V0aCtwYXJpdHkgYnVnCiAgICAgICAgICAgICMgaHR0cHM6Ly9naXRodWIuY29tL2V0aGVyZXVtL0VJUHMvaXNzdWVzLzcxNgogICAgICAgICAgICBpZiBiZW5lZmljaWFyeSA9PSBSSVBFTUQxNjBfQUREUkVTUzoKICAgICAgICAgICAgICAgIHlpZWxkIGJlbmVmaWNpYXJ5CiAgICAgICAgICAgIGNvbnRpbnVlCiAgICAgICAgZWxzZToKICAgICAgICAgICAgeWllbGQgYmVuZWZpY2lhcnkKCiAgICAjIGNvbGxlY3QgYWNjb3VudCBkaXJlY3RseSBhZGRyZXNzZWQKICAgIGlmIG5vdCBpc2luc3RhbmNlKGV2bS5tZXNzYWdlLnRhcmdldCwgQnl0ZXMwKToKICAgICAgICBpZiBldm0uaGFzX2VycmVkIG9yIGFuY2VzdG9yX2hhZF9lcnJvcjoKICAgICAgICAgICAgIyBjb2xsZWN0IFJJUEVNRDE2MCBwcmVjb21waWxlIGV2ZW4gaWYgYW5jZXN0b3IgZXZtIGhhZCBlcnJvci4KICAgICAgICAgICAgIyBvdGhlcndpc2UsIHNraXAgY29sbGVjdGlvbiBmcm9tIGNoaWxkcmVuIG9mIGVycmVkLW91dCBldm0gb2JqZWN0cwogICAgICAgICAgICBpZiBldm0ubWVzc2FnZS50YXJnZXQgPT0gUklQRU1EMTYwX0FERFJFU1M6CiAgICAgICAgICAgICAgICB5aWVsZCBldm0ubWVzc2FnZS50YXJnZXQKICAgICAgICBlbHNlOgogICAgICAgICAgICB5aWVsZCBldm0ubWVzc2FnZS50YXJnZXQKCiAgICAjIHJlY3Vyc2UgaW50byBuZXN0ZWQgY29tcHV0YXRpb25zCiAgICAjIChldmVuIGVycmVkIG9uZXMsIHNpbmNlIGxvb2tpbmcgZm9yIFJJUEVNRDE2MCkKICAgIGZvciBjaGlsZCBpbiBldm0uY2hpbGRyZW46CiAgICAgICAgeWllbGQgZnJvbSBjb2xsZWN0X3RvdWNoZWRfYWNjb3VudHMoCiAgICAgICAgICAgIGNoaWxkLCBhbmNlc3Rvcl9oYWRfZXJyb3I9KGV2bS5oYXNfZXJyZWQgb3IgYW5jZXN0b3JfaGFkX2Vycm9yKQogICAgICAgICkKlIWUgZR9lChoBWgGaCBquRgAAGghaANoHWhEaB9LAHViYWgOfZQoaBBdlGgTXZRoFV2UaBddlGgZXZSMBnNvdXJjZZSMXS9ob21lL3J1bm5lci93b3JrL2V4ZWN1dGlvbi1zcGVjcy9leGVjdXRpb24tc3BlY3Mvc3JjL2V0aGVyZXVtL211aXJfZ2xh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YmVoDn2UKGgQXZRoE12UaBVdlGgXXZRoGV2UdWgcassIAABoHWgeaB9OaCBq8xgAAHViZWgOfZQoaBBdlGgTXZQoajAZAACMCGZ1bmN0aW9ulGVoFV2UaBddlGgZXZSMBmRvbWFpbpRqMBkAAIwHb2JqdHlwZZRqMRoAAIwIZGVzY3R5cGWUajEaAACMB25vaW5kZXiUiXVoHGqdCAAAaB1OaB9OaCBq1xgAAHViauIIAAApgZR9lChoBVgtAQAAZGVmIGNvbGxlY3RfYWNjb3VudHNfdG9fZGVsZXRlKGV2bTogRXZtKSAtPiBTZXRbQWRkcmVzc106CiAgICBpZiBldm0uaGFzX2VycmVkOgogICAgICAgIHJldHVybiBzZXQoKQogICAgZWxzZToKICAgICAgICByZXR1cm4gc2V0KAogICAgICAgICAgICBjaGFpbigKICAgICAgICAgICAgICAgIGV2bS5hY2NvdW50c190b19kZWxldGUua2V5cygpLAogICAgICAgICAgICAgICAgKihjb2xsZWN0X2FjY291bnRzX3RvX2RlbGV0ZShjaGlsZCkgZm9yIGNoaWxkIGluIGV2bS5jaGlsZHJlbiksCiAgICAgICAgICAgICkKICAgICAgICApCpRoB12UaD9YLQEAAGRlZiBjb2xsZWN0X2FjY291bnRzX3RvX2RlbGV0ZShldm06IEV2bSkgLT4gU2V0W0FkZHJlc3NdOgogICAgaWYgZXZtLmhhc19lcnJlZDoKICAgICAgICByZXR1cm4gc2V0KCkKICAgIGVsc2U6CiAgICAgICAgcmV0dXJuIHNldCgKICAgICAgICAgICAgY2hhaW4oCiAgICAgICAgICAgICAgICBldm0uYWNjb3VudHNfdG9fZGVsZXRlLmtleXMoKSwKICAgICAgICAgICAgICAgICooY29sbGVjdF9hY2NvdW50c190b19kZWxldGUoY2hpbGQpIGZvciBjaGlsZCBpbiBldm0uY2hpbGRyZW4pLAogICAgICAgICAgICApCiAgICAgICAgKQqUhZSBlH2UKGgFaAZoIGo5GgAAaCFoA2gdaERoH0sAdWJhaA59lChoEF2UaBNdlGgVXZRoF12UaBldlIwGc291cmNllIxdL2hvbWUvcnVubmVyL3dvcmsvZXhlY3V0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ICAgcmV0dXJuIDAKICAgIGVsc2U6CiAgICAgICAgcmV0dXJuIGV2bS5yZWZ1bmRfY291bnRlciArIHN1bSgKICAgICAgICAgICAgY2FsY3VsYXRlX2dhc19yZWZ1bmQoY2hpbGRfZXZtKSBmb3IgY2hpbGRfZXZtIGluIGV2bS5jaGlsZHJlbgogICAgICAgICkKlGgHXZRoP4zZZGVmIGNhbGN1bGF0ZV9nYXNfcmVmdW5kKGV2bTogRXZtKSAtPiBpbnQ6CiAgICBpZiBldm0uaGFzX2VycmVkOgogICAgICAgIHJldHVybiAwCiAgICBlbHNlOgogICAgICAgIHJldHVybiBldm0ucmVmdW5kX2NvdW50ZXIgKyBzdW0oCiAgICAgICAgICAgIGNhbGN1bGF0ZV9nYXNfcmVmdW5kKGNoaWxkX2V2bSkgZm9yIGNoaWxkX2V2bSBpbiBldm0uY2hpbGRyZW4KICAgICAgICApCpSFlIGUfZQoaAVoBmggapUbAABoIWgDaB1oRGgfSwB1YmFoDn2UKGgQXZRoE12UaBVdlGgXXZRoGV2UjAZzb3VyY2WUjF0vaG9tZS9ydW5uZXIvd29yay9leGVjdXRpb24tc3BlY3MvZXhlY3V0aW9uLXNwZWNzL3NyYy9ldGhlcmV1bS9tdWlyX2dsYWNpZXIvdm0vaW50ZXJwcmV0ZXIucHmUjAl4bWw6c3BhY2WUaugDAACMBWZvcmNllImMCGxhbmd1YWdllIwGcHl0aG9ulIwOaGlnaGxpZ2h0X2FyZ3OUfZRq+QgAAEsBc4wHbGluZW5vc5SJdWgcauEIAABoHWgeaB9NVAFoIGpXGgAAdWJlaA59lChoEF2UasYCAABhaBNdlGgVXZSMFGNhbGN1bGF0ZV9nYXNfcmVmdW5klGFoF12UaBldlHVoHGgzaB1oHmgfTUIBaCBqbAgAAGghaAN1YmVoDn2UKGgQXZRqMQEAAGFoE12UaBVdlIwObW9kdWxlIGRldGFpbHOUYWgXXZRoGV2UdWgcaDNoHWgeaB9LOGggaDVoIWgDdWJlaA59lChoEF2UjChldGhlcmV1bS12aXJ0dWFsLW1hY2hpbmUtZXZtLWludGVycHJldGVylGFoE12UaBVdlIwqZXRoZXJldW0gdmlydHVhbCBtYWNoaW5lIChldm0pIGludGVycHJldGVylGFoF12UaBldlHVoHGgzaB1oHmgfSwRoIGgDaCFoA3ViZWgOfZQoaBBdlGgTXZRoFV2UaBddlGgZXZSMBnNvdXJjZZRoRHVoHGgBjA5jdXJyZW50X3NvdXJjZZRoRIwMY3VycmVudF9saW5llEsAjAhzZXR0aW5nc5SMEWRvY3V0aWxzLmZyb250ZW5klIwGVmFsdWVzlJOUKYGUfZQojAxyZXBvcnRfbGV2ZWyUSwKMCmhhbHRfbGV2ZWyUSwSMEWV4aXRfc3RhdHVzX2xldmVslEsFjAVkZWJ1Z5ROjA53YXJuaW5nX3N0cmVhbZROjAl0cmFjZWJhY2uUTowPb3V0cHV0X2VuY29kaW5nlIwFdXRmLTiUjB1vdXRwdXRfZW5jb2RpbmdfZXJyb3JfaGFuZGxlcpSMEXhtbGNoYXJyZWZyZXBsYWNllIwOZXJyb3JfZW5jb2RpbmeUjAV1dGYtOJSMHGVycm9yX2VuY29kaW5nX2Vycm9yX2hhbmRsZXKUjBBiYWNrc2xhc2hyZXBsYWNllIwTcmVjb3JkX2RlcGVuZGVuY2llc5SMDmRvY3V0aWxzLnV0aWxzlIwORGVwZW5kZW5jeUxpc3SUk5QpgZR9lCiMBGxpc3SUXZSMBGZpbGWUTnVijAZjb25maWeUTowNZHVtcF9zZXR0aW5nc5ROjA5kdW1wX2ludGVybmFsc5ROjA9kdW1wX3RyYW5zZm9ybXOUTowPZHVtcF9wc2V1ZG9feG1slE6MEGV4cG9zZV9pbnRlcm5hbHOUTowOc3RyaWN0X3Zpc2l0b3KUTowPX2Rpc2FibGVfY29uZmlnlE6MB19zb3VyY2WUTowMX2Rlc3RpbmF0aW9ulIw7ZG9jL2RpZmZzL211aXJfZ2xhY2llcl9iZXJsaW4vdm0vaW50ZXJwcmV0ZXIvaW5kZXgucGlja2xlNjSUjA1fY29uZmlnX2ZpbGVzlF2UjBFsaW5lX2xlbmd0aF9saW1pdJRNECeMCXRhYl93aWR0aJRLCIwQc3ludGF4X2hpZ2hsaWdodJSMBGxvbmeUjAxzbWFydF9xdW90ZXOUiYwTc21hcnRxdW90ZXNfbG9jYWxlc5ROjB1jaGFyYWN0ZXJfbGV2ZWxfaW5saW5lX21hcmt1cJSJjAZ3cml0ZXKUjAN4bWyUjBljb21wYXJlX3NlY3Rpb25zX2J5X25hbWVzlImMDGR1bXBfcnN0ZGlmZpROjAVfYm90aJR9lChoOE6MCWdlbmVyYXRvcpROjAlkYXRlc3RhbXCUTowLc291cmNlX2xpbmuUTowKc291cmNlX3VybJROjA10b2NfYmFja2xpbmtzlGp2AwAAjBJmb290bm90ZV9iYWNrbGlua3OUSwGMDXNlY3RudW1feGZvcm2USwGMDmRvY3RpdGxlX3hmb3JtlEsBjA1kb2NpbmZvX3hmb3JtlEsBjBJzZWN0c3VidGl0bGVfeGZvcm2USwCMDnN0cmlwX2NvbW1lbnRzlE6MDmlucHV0X2VuY29kaW5nlE6MHGlucHV0X2VuY29kaW5nX2Vycm9yX2hhbmRsZXKUjAZzdHJpY3SUjA1sYW5ndWFnZV9jb2RllIwCZW6UjA5wZXBfcmVmZXJlbmNlc5ROjAxwZXBfYmFzZV91cmyUjB9odHRwOi8vd3d3LnB5dGhvbi5vcmcvZGV2L3BlcHMvlIwVcGVwX2ZpbGVfdXJsX3RlbXBsYXRllIwIcGVwLSUwNGSUjA5yZmNfcmVmZXJlbmNlc5ROjAxyZmNfYmFzZV91cmyUjBtodHRwOi8vdG9vbHMuaWV0Zi5vcmcvaHRtbC+UjB10cmltX2Zvb3Rub3RlX3JlZmVyZW5jZV9zcGFjZZROjBZmaWxlX2luc2VydGlvbl9lbmFibGVklEsBjAtyYXdfZW5hYmxlZJRLAYwOYXV0b19pZF9wcmVmaXiUjAJpZJSMCWlkX3ByZWZpeJRoBowbc3RyaXBfZWxlbWVudHNfd2l0aF9jbGFzc2VzlE6MDXN0cmlwX2NsYXNzZXOUTnWMBGJvdGiUfZSMCl9vcHRpb25zVG+UjAVfYm90aJSMC19vbGRfc291cmNllIwcLnRveC9kb2NzL3N0YWdlMF9vdXQvYXV0b2FwaZSMC19uZXdfc291cmNllIwJZG9jL2RpZmZzlGoQHAAAahEcAAB1YowIcmVwb3J0ZXKUTowQaW5kaXJlY3RfdGFyZ2V0c5RdlIwRc3Vic3RpdHV0aW9uX2RlZnOUfZSMEnN1YnN0aXR1dGlvbl9uYW1lc5R9lIwIcmVmbmFtZXOUfZSMBnJlZmlkc5R9lIwHbmFtZWlkc5R9lIwJbmFtZXR5cGVzlH2UaBB9lIwNZm9vdG5vdGVfcmVmc5R9lIwNY2l0YXRpb25fcmVmc5R9lIwNYXV0b2Zvb3Rub3Rlc5RdlIwRYXV0b2Zvb3Rub3RlX3JlZnOUXZSMEHN5bWJvbF9mb290bm90ZXOUXZSMFHN5bWJvbF9mb290bm90ZV9yZWZzlF2UjAlmb290bm90ZXOUXZSMCWNpdGF0aW9uc5RdlIwSYXV0b2Zvb3Rub3RlX3N0YXJ0lEsBjBVzeW1ib2xfZm9vdG5vdGVfc3RhcnSUSwCMCmlkX2NvdW50ZXKUjAtjb2xsZWN0aW9uc5SMB0NvdW50ZXKUk5R9lIWUUpSMDnBhcnNlX21lc3NhZ2VzlF2UjBJ0cmFuc2Zvcm1fbWVzc2FnZXOUXZSMC3RyYW5zZm9ybWVylE6MC2luY2x1ZGVfbG9nlF2UjApkZWNvcmF0aW9ulE5oIWgDdWIu